
WorkingProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002628  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ac  20000000  00002628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000198  200000ac  000026d4  000200ac  2**2
                  ALLOC
  3 .stack        00002004  20000244  0000286c  000200ac  2**0
                  ALLOC
  4 .ARM.attributes 0000002d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  5 .comment      000000c7  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a279  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cc8  00000000  00000000  0004a419  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ccac  00000000  00000000  0004e0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d20  00000000  00000000  0005ad8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d50  00000000  00000000  0005baad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d57c  00000000  00000000  0005c7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015163  00000000  00000000  00079d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000892ab  00000000  00000000  0008eedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002584  00000000  00000000  00118188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 22 00 20 35 01 00 00 31 01 00 00 31 01 00 00     H". 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	8d 0f 00 00 31 01 00 00 31 01 00 00 31 01 00 00     ....1...1...1...
      5c:	31 01 00 00 31 01 00 00 21 13 00 00 31 01 00 00     1...1...!...1...
      6c:	31 01 00 00 31 01 00 00 35 13 00 00 31 01 00 00     1...1...5...1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      8c:	31 01 00 00 31 01 00 00 00 00 00 00 00 00 00 00     1...1...........
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 c5 15 00 00     1...1...1.......
      ac:	31 01 00 00 00 00 00 00                             1.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000ac 	.word	0x200000ac
      d4:	00000000 	.word	0x00000000
      d8:	00002628 	.word	0x00002628

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b0 	.word	0x200000b0
     108:	00002628 	.word	0x00002628
     10c:	00002628 	.word	0x00002628
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <atmel_start_init+0x10>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11c:	4798      	blx	r3

	touch_init();
     11e:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	00000439 	.word	0x00000439
     128:	0000169d 	.word	0x0000169d
     12c:	000015a9 	.word	0x000015a9

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     136:	4a23      	ldr	r2, [pc, #140]	; (1c4 <Reset_Handler+0x90>)
     138:	4b23      	ldr	r3, [pc, #140]	; (1c8 <Reset_Handler+0x94>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b22      	ldr	r3, [pc, #136]	; (1c8 <Reset_Handler+0x94>)
     140:	4a20      	ldr	r2, [pc, #128]	; (1c4 <Reset_Handler+0x90>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	491f      	ldr	r1, [pc, #124]	; (1cc <Reset_Handler+0x98>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b1f      	ldr	r3, [pc, #124]	; (1d0 <Reset_Handler+0x9c>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a1d      	ldr	r2, [pc, #116]	; (1d4 <Reset_Handler+0xa0>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a1d      	ldr	r2, [pc, #116]	; (1d8 <Reset_Handler+0xa4>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b1d      	ldr	r3, [pc, #116]	; (1dc <Reset_Handler+0xa8>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16c:	39fd      	subs	r1, #253	; 0xfd
     16e:	2390      	movs	r3, #144	; 0x90
     170:	005b      	lsls	r3, r3, #1
     172:	4a1b      	ldr	r2, [pc, #108]	; (1e0 <Reset_Handler+0xac>)
     174:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     176:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xb0>)
     178:	78d3      	ldrb	r3, [r2, #3]
     17a:	2503      	movs	r5, #3
     17c:	43ab      	bics	r3, r5
     17e:	2402      	movs	r4, #2
     180:	4323      	orrs	r3, r4
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	78d3      	ldrb	r3, [r2, #3]
     186:	270c      	movs	r7, #12
     188:	43bb      	bics	r3, r7
     18a:	2608      	movs	r6, #8
     18c:	4333      	orrs	r3, r6
     18e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     190:	4b15      	ldr	r3, [pc, #84]	; (1e8 <Reset_Handler+0xb4>)
     192:	7b98      	ldrb	r0, [r3, #14]
     194:	2230      	movs	r2, #48	; 0x30
     196:	4390      	bics	r0, r2
     198:	2220      	movs	r2, #32
     19a:	4310      	orrs	r0, r2
     19c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     19e:	7b99      	ldrb	r1, [r3, #14]
     1a0:	43b9      	bics	r1, r7
     1a2:	4331      	orrs	r1, r6
     1a4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a6:	7b9a      	ldrb	r2, [r3, #14]
     1a8:	43aa      	bics	r2, r5
     1aa:	4322      	orrs	r2, r4
     1ac:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1ae:	4a0f      	ldr	r2, [pc, #60]	; (1ec <Reset_Handler+0xb8>)
     1b0:	6851      	ldr	r1, [r2, #4]
     1b2:	2380      	movs	r3, #128	; 0x80
     1b4:	430b      	orrs	r3, r1
     1b6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1b8:	4b0d      	ldr	r3, [pc, #52]	; (1f0 <Reset_Handler+0xbc>)
     1ba:	4798      	blx	r3
        main();
     1bc:	4b0d      	ldr	r3, [pc, #52]	; (1f4 <Reset_Handler+0xc0>)
     1be:	4798      	blx	r3
     1c0:	e7fe      	b.n	1c0 <Reset_Handler+0x8c>
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	00002628 	.word	0x00002628
     1c8:	20000000 	.word	0x20000000
     1cc:	200000ac 	.word	0x200000ac
     1d0:	200000ac 	.word	0x200000ac
     1d4:	20000244 	.word	0x20000244
     1d8:	e000ed00 	.word	0xe000ed00
     1dc:	00000000 	.word	0x00000000
     1e0:	41007000 	.word	0x41007000
     1e4:	41005000 	.word	0x41005000
     1e8:	41004800 	.word	0x41004800
     1ec:	41004000 	.word	0x41004000
     1f0:	00001c09 	.word	0x00001c09
     1f4:	0000147d 	.word	0x0000147d

000001f8 <PTC_clock_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     1f8:	4a04      	ldr	r2, [pc, #16]	; (20c <PTC_clock_init+0x14>)
     1fa:	6a11      	ldr	r1, [r2, #32]
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	031b      	lsls	r3, r3, #12
     200:	430b      	orrs	r3, r1
     202:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     204:	4a02      	ldr	r2, [pc, #8]	; (210 <PTC_clock_init+0x18>)
     206:	4b03      	ldr	r3, [pc, #12]	; (214 <PTC_clock_init+0x1c>)
     208:	805a      	strh	r2, [r3, #2]
 */
static void PTC_clock_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, PTC);
	_gclk_enable_channel(PTC_GCLK_ID, CONF_GCLK_PTC_SRC);
}
     20a:	4770      	bx	lr
     20c:	40000400 	.word	0x40000400
     210:	00004222 	.word	0x00004222
     214:	40000c00 	.word	0x40000c00

00000218 <Timer_init>:
{
     218:	b510      	push	{r4, lr}
		PM->APBAMASK.reg |= 1 << peripheral;
     21a:	4a08      	ldr	r2, [pc, #32]	; (23c <Timer_init+0x24>)
     21c:	6993      	ldr	r3, [r2, #24]
     21e:	2120      	movs	r1, #32
     220:	430b      	orrs	r3, r1
     222:	6193      	str	r3, [r2, #24]
     224:	4a06      	ldr	r2, [pc, #24]	; (240 <Timer_init+0x28>)
     226:	4b07      	ldr	r3, [pc, #28]	; (244 <Timer_init+0x2c>)
     228:	805a      	strh	r2, [r3, #2]
	timer_init(&Timer, RTC, _rtc_get_timer());
     22a:	4b07      	ldr	r3, [pc, #28]	; (248 <Timer_init+0x30>)
     22c:	4798      	blx	r3
     22e:	0002      	movs	r2, r0
     230:	4906      	ldr	r1, [pc, #24]	; (24c <Timer_init+0x34>)
     232:	4807      	ldr	r0, [pc, #28]	; (250 <Timer_init+0x38>)
     234:	4b07      	ldr	r3, [pc, #28]	; (254 <Timer_init+0x3c>)
     236:	4798      	blx	r3
}
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	40000400 	.word	0x40000400
     240:	00004104 	.word	0x00004104
     244:	40000c00 	.word	0x40000c00
     248:	00000f89 	.word	0x00000f89
     24c:	40001400 	.word	0x40001400
     250:	20000198 	.word	0x20000198
     254:	000005f1 	.word	0x000005f1

00000258 <USART_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     258:	4a04      	ldr	r2, [pc, #16]	; (26c <USART_CLOCK_init+0x14>)
     25a:	6a13      	ldr	r3, [r2, #32]
     25c:	2104      	movs	r1, #4
     25e:	430b      	orrs	r3, r1
     260:	6213      	str	r3, [r2, #32]
     262:	4a03      	ldr	r2, [pc, #12]	; (270 <USART_CLOCK_init+0x18>)
     264:	4b03      	ldr	r3, [pc, #12]	; (274 <USART_CLOCK_init+0x1c>)
     266:	805a      	strh	r2, [r3, #2]
}
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40000400 	.word	0x40000400
     270:	00004214 	.word	0x00004214
     274:	40000c00 	.word	0x40000c00

00000278 <USART_PORT_init>:
{
     278:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	4b0f      	ldr	r3, [pc, #60]	; (2b8 <USART_PORT_init+0x40>)
     27c:	2248      	movs	r2, #72	; 0x48
     27e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     280:	2501      	movs	r5, #1
     282:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     284:	2401      	movs	r4, #1
     286:	4321      	orrs	r1, r4
     288:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     28a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     28c:	2034      	movs	r0, #52	; 0x34
     28e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     290:	3a39      	subs	r2, #57	; 0x39
     292:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     294:	2202      	movs	r2, #2
     296:	4311      	orrs	r1, r2
     298:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29c:	2149      	movs	r1, #73	; 0x49
     29e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a2:	4322      	orrs	r2, r4
     2a4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2aa:	393a      	subs	r1, #58	; 0x3a
     2ac:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2ae:	2120      	movs	r1, #32
     2b0:	430a      	orrs	r2, r1
     2b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2b4:	541a      	strb	r2, [r3, r0]
}
     2b6:	bd30      	pop	{r4, r5, pc}
     2b8:	41004400 	.word	0x41004400

000002bc <USART_init>:
{
     2bc:	b510      	push	{r4, lr}
     2be:	b082      	sub	sp, #8
	USART_CLOCK_init();
     2c0:	4b06      	ldr	r3, [pc, #24]	; (2dc <USART_init+0x20>)
     2c2:	4798      	blx	r3
	usart_async_init(&USART, SERCOM0, USART_buffer, USART_BUFFER_SIZE, (void *)NULL);
     2c4:	2300      	movs	r3, #0
     2c6:	9300      	str	r3, [sp, #0]
     2c8:	3310      	adds	r3, #16
     2ca:	4a05      	ldr	r2, [pc, #20]	; (2e0 <USART_init+0x24>)
     2cc:	4905      	ldr	r1, [pc, #20]	; (2e4 <USART_init+0x28>)
     2ce:	4806      	ldr	r0, [pc, #24]	; (2e8 <USART_init+0x2c>)
     2d0:	4c06      	ldr	r4, [pc, #24]	; (2ec <USART_init+0x30>)
     2d2:	47a0      	blx	r4
	USART_PORT_init();
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <USART_init+0x34>)
     2d6:	4798      	blx	r3
}
     2d8:	b002      	add	sp, #8
     2da:	bd10      	pop	{r4, pc}
     2dc:	00000259 	.word	0x00000259
     2e0:	200000c8 	.word	0x200000c8
     2e4:	42000800 	.word	0x42000800
     2e8:	200001b4 	.word	0x200001b4
     2ec:	00000935 	.word	0x00000935
     2f0:	00000279 	.word	0x00000279

000002f4 <TARGET_IO_PORT_init>:
{
     2f4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f6:	4b0f      	ldr	r3, [pc, #60]	; (334 <TARGET_IO_PORT_init+0x40>)
     2f8:	2240      	movs	r2, #64	; 0x40
     2fa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2fc:	2501      	movs	r5, #1
     2fe:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     300:	2401      	movs	r4, #1
     302:	4321      	orrs	r1, r4
     304:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     306:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     308:	2030      	movs	r0, #48	; 0x30
     30a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     30c:	3a31      	subs	r2, #49	; 0x31
     30e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     310:	2203      	movs	r2, #3
     312:	4311      	orrs	r1, r2
     314:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     316:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     318:	2141      	movs	r1, #65	; 0x41
     31a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     31e:	4322      	orrs	r2, r4
     320:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     322:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     324:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     326:	3932      	subs	r1, #50	; 0x32
     328:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     32a:	2130      	movs	r1, #48	; 0x30
     32c:	430a      	orrs	r2, r1
     32e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     330:	541a      	strb	r2, [r3, r0]
}
     332:	bd30      	pop	{r4, r5, pc}
     334:	41004400 	.word	0x41004400

00000338 <TARGET_IO_CLOCK_init>:
     338:	4a04      	ldr	r2, [pc, #16]	; (34c <TARGET_IO_CLOCK_init+0x14>)
     33a:	6a13      	ldr	r3, [r2, #32]
     33c:	2108      	movs	r1, #8
     33e:	430b      	orrs	r3, r1
     340:	6213      	str	r3, [r2, #32]
     342:	4a03      	ldr	r2, [pc, #12]	; (350 <TARGET_IO_CLOCK_init+0x18>)
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <TARGET_IO_CLOCK_init+0x1c>)
     346:	805a      	strh	r2, [r3, #2]
}
     348:	4770      	bx	lr
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	40000400 	.word	0x40000400
     350:	00004015 	.word	0x00004015
     354:	40000c00 	.word	0x40000c00

00000358 <TARGET_IO_init>:
{
     358:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     35a:	4b05      	ldr	r3, [pc, #20]	; (370 <TARGET_IO_init+0x18>)
     35c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM1, (void *)NULL);
     35e:	2200      	movs	r2, #0
     360:	4904      	ldr	r1, [pc, #16]	; (374 <TARGET_IO_init+0x1c>)
     362:	4805      	ldr	r0, [pc, #20]	; (378 <TARGET_IO_init+0x20>)
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <TARGET_IO_init+0x24>)
     366:	4798      	blx	r3
	TARGET_IO_PORT_init();
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <TARGET_IO_init+0x28>)
     36a:	4798      	blx	r3
}
     36c:	bd10      	pop	{r4, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	00000339 	.word	0x00000339
     374:	42000c00 	.word	0x42000c00
     378:	2000018c 	.word	0x2000018c
     37c:	00000b85 	.word	0x00000b85
     380:	000002f5 	.word	0x000002f5

00000384 <SERIAL_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SERIAL_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2140      	movs	r1, #64	; 0x40
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SERIAL_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SERIAL_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004018 	.word	0x00004018
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SERIAL_PORT_init>:
{
     3a4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a6:	4b0f      	ldr	r3, [pc, #60]	; (3e4 <SERIAL_PORT_init+0x40>)
     3a8:	22c8      	movs	r2, #200	; 0xc8
     3aa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ac:	2501      	movs	r5, #1
     3ae:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b0:	2401      	movs	r4, #1
     3b2:	4321      	orrs	r1, r4
     3b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b8:	20b4      	movs	r0, #180	; 0xb4
     3ba:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3bc:	3ab9      	subs	r2, #185	; 0xb9
     3be:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c0:	2203      	movs	r2, #3
     3c2:	4311      	orrs	r1, r2
     3c4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	21c9      	movs	r1, #201	; 0xc9
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	39ba      	subs	r1, #186	; 0xba
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	2130      	movs	r1, #48	; 0x30
     3dc:	430a      	orrs	r2, r1
     3de:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e0:	541a      	strb	r2, [r3, r0]
}
     3e2:	bd30      	pop	{r4, r5, pc}
     3e4:	41004400 	.word	0x41004400

000003e8 <SERIAL_init>:
{
     3e8:	b510      	push	{r4, lr}
     3ea:	b082      	sub	sp, #8
	SERIAL_CLOCK_init();
     3ec:	4b07      	ldr	r3, [pc, #28]	; (40c <SERIAL_init+0x24>)
     3ee:	4798      	blx	r3
	usart_async_init(&SERIAL, SERCOM4, SERIAL_buffer, SERIAL_BUFFER_SIZE, (void *)NULL);
     3f0:	2300      	movs	r3, #0
     3f2:	9300      	str	r3, [sp, #0]
     3f4:	3310      	adds	r3, #16
     3f6:	4a06      	ldr	r2, [pc, #24]	; (410 <SERIAL_init+0x28>)
     3f8:	3210      	adds	r2, #16
     3fa:	4906      	ldr	r1, [pc, #24]	; (414 <SERIAL_init+0x2c>)
     3fc:	4806      	ldr	r0, [pc, #24]	; (418 <SERIAL_init+0x30>)
     3fe:	4c07      	ldr	r4, [pc, #28]	; (41c <SERIAL_init+0x34>)
     400:	47a0      	blx	r4
	SERIAL_PORT_init();
     402:	4b07      	ldr	r3, [pc, #28]	; (420 <SERIAL_init+0x38>)
     404:	4798      	blx	r3
}
     406:	b002      	add	sp, #8
     408:	bd10      	pop	{r4, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	00000385 	.word	0x00000385
     410:	200000c8 	.word	0x200000c8
     414:	42001800 	.word	0x42001800
     418:	2000013c 	.word	0x2000013c
     41c:	00000935 	.word	0x00000935
     420:	000003a5 	.word	0x000003a5

00000424 <delay_driver_init>:
{
     424:	b510      	push	{r4, lr}
	delay_init(SysTick);
     426:	4802      	ldr	r0, [pc, #8]	; (430 <delay_driver_init+0xc>)
     428:	4b02      	ldr	r3, [pc, #8]	; (434 <delay_driver_init+0x10>)
     42a:	4798      	blx	r3
}
     42c:	bd10      	pop	{r4, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	e000e010 	.word	0xe000e010
     434:	00000491 	.word	0x00000491

00000438 <system_init>:

void system_init(void)
{
     438:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     43a:	4b07      	ldr	r3, [pc, #28]	; (458 <system_init+0x20>)
     43c:	4798      	blx	r3
	init_mcu();

	USART_init();
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <system_init+0x24>)
     440:	4798      	blx	r3

	TARGET_IO_init();
     442:	4b07      	ldr	r3, [pc, #28]	; (460 <system_init+0x28>)
     444:	4798      	blx	r3
	SERIAL_init();
     446:	4b07      	ldr	r3, [pc, #28]	; (464 <system_init+0x2c>)
     448:	4798      	blx	r3

	delay_driver_init();
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <system_init+0x30>)
     44c:	4798      	blx	r3

	Timer_init();
     44e:	4b07      	ldr	r3, [pc, #28]	; (46c <system_init+0x34>)
     450:	4798      	blx	r3

	PTC_clock_init();
     452:	4b07      	ldr	r3, [pc, #28]	; (470 <system_init+0x38>)
     454:	4798      	blx	r3
}
     456:	bd10      	pop	{r4, pc}
     458:	00000dd5 	.word	0x00000dd5
     45c:	000002bd 	.word	0x000002bd
     460:	00000359 	.word	0x00000359
     464:	000003e9 	.word	0x000003e9
     468:	00000425 	.word	0x00000425
     46c:	00000219 	.word	0x00000219
     470:	000001f9 	.word	0x000001f9

00000474 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     474:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     478:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     47a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     47c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     480:	4770      	bx	lr

00000482 <atomic_leave_critical>:
     482:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     486:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     488:	f383 8810 	msr	PRIMASK, r3
}
     48c:	4770      	bx	lr
	...

00000490 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     490:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     492:	4b02      	ldr	r3, [pc, #8]	; (49c <delay_init+0xc>)
     494:	6018      	str	r0, [r3, #0]
     496:	4b02      	ldr	r3, [pc, #8]	; (4a0 <delay_init+0x10>)
     498:	4798      	blx	r3
}
     49a:	bd10      	pop	{r4, pc}
     49c:	200000e8 	.word	0x200000e8
     4a0:	00001431 	.word	0x00001431

000004a4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     4a4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     4a6:	4b04      	ldr	r3, [pc, #16]	; (4b8 <delay_ms+0x14>)
     4a8:	681c      	ldr	r4, [r3, #0]
     4aa:	4b04      	ldr	r3, [pc, #16]	; (4bc <delay_ms+0x18>)
     4ac:	4798      	blx	r3
     4ae:	0001      	movs	r1, r0
     4b0:	0020      	movs	r0, r4
     4b2:	4b03      	ldr	r3, [pc, #12]	; (4c0 <delay_ms+0x1c>)
     4b4:	4798      	blx	r3
}
     4b6:	bd10      	pop	{r4, pc}
     4b8:	200000e8 	.word	0x200000e8
     4bc:	00000dc9 	.word	0x00000dc9
     4c0:	0000143d 	.word	0x0000143d

000004c4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4c4:	b570      	push	{r4, r5, r6, lr}
     4c6:	0004      	movs	r4, r0
     4c8:	000d      	movs	r5, r1
     4ca:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4cc:	2800      	cmp	r0, #0
     4ce:	d00e      	beq.n	4ee <io_write+0x2a>
     4d0:	2900      	cmp	r1, #0
     4d2:	d00a      	beq.n	4ea <io_write+0x26>
     4d4:	2001      	movs	r0, #1
     4d6:	2234      	movs	r2, #52	; 0x34
     4d8:	4906      	ldr	r1, [pc, #24]	; (4f4 <io_write+0x30>)
     4da:	4b07      	ldr	r3, [pc, #28]	; (4f8 <io_write+0x34>)
     4dc:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4de:	6823      	ldr	r3, [r4, #0]
     4e0:	0032      	movs	r2, r6
     4e2:	0029      	movs	r1, r5
     4e4:	0020      	movs	r0, r4
     4e6:	4798      	blx	r3
}
     4e8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     4ea:	2000      	movs	r0, #0
     4ec:	e7f3      	b.n	4d6 <io_write+0x12>
     4ee:	2000      	movs	r0, #0
     4f0:	e7f1      	b.n	4d6 <io_write+0x12>
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	0000241c 	.word	0x0000241c
     4f8:	00000bfd 	.word	0x00000bfd

000004fc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4fc:	b570      	push	{r4, r5, r6, lr}
     4fe:	0004      	movs	r4, r0
     500:	000d      	movs	r5, r1
     502:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     504:	2800      	cmp	r0, #0
     506:	d00e      	beq.n	526 <io_read+0x2a>
     508:	2900      	cmp	r1, #0
     50a:	d00a      	beq.n	522 <io_read+0x26>
     50c:	2001      	movs	r0, #1
     50e:	223d      	movs	r2, #61	; 0x3d
     510:	4906      	ldr	r1, [pc, #24]	; (52c <io_read+0x30>)
     512:	4b07      	ldr	r3, [pc, #28]	; (530 <io_read+0x34>)
     514:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     516:	6863      	ldr	r3, [r4, #4]
     518:	0032      	movs	r2, r6
     51a:	0029      	movs	r1, r5
     51c:	0020      	movs	r0, r4
     51e:	4798      	blx	r3
}
     520:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     522:	2000      	movs	r0, #0
     524:	e7f3      	b.n	50e <io_read+0x12>
     526:	2000      	movs	r0, #0
     528:	e7f1      	b.n	50e <io_read+0x12>
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	0000241c 	.word	0x0000241c
     530:	00000bfd 	.word	0x00000bfd

00000534 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     536:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     538:	2e00      	cmp	r6, #0
     53a:	d002      	beq.n	542 <timer_add_timer_task+0xe>
     53c:	0033      	movs	r3, r6
     53e:	2500      	movs	r5, #0
     540:	e00c      	b.n	55c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     542:	4b10      	ldr	r3, [pc, #64]	; (584 <timer_add_timer_task+0x50>)
     544:	4798      	blx	r3
		return;
     546:	e018      	b.n	57a <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     548:	689f      	ldr	r7, [r3, #8]
     54a:	46bc      	mov	ip, r7
     54c:	4464      	add	r4, ip
     54e:	1aa4      	subs	r4, r4, r2
     550:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     552:	688f      	ldr	r7, [r1, #8]
     554:	42bc      	cmp	r4, r7
     556:	d20b      	bcs.n	570 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     558:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	2b00      	cmp	r3, #0
     55e:	d007      	beq.n	570 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     560:	685c      	ldr	r4, [r3, #4]
     562:	4294      	cmp	r4, r2
     564:	d8f0      	bhi.n	548 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     566:	1aa4      	subs	r4, r4, r2
     568:	689f      	ldr	r7, [r3, #8]
     56a:	46bc      	mov	ip, r7
     56c:	4464      	add	r4, ip
     56e:	e7f0      	b.n	552 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     570:	42b3      	cmp	r3, r6
     572:	d003      	beq.n	57c <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     574:	0028      	movs	r0, r5
     576:	4b04      	ldr	r3, [pc, #16]	; (588 <timer_add_timer_task+0x54>)
     578:	4798      	blx	r3
	}
}
     57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     57c:	4b01      	ldr	r3, [pc, #4]	; (584 <timer_add_timer_task+0x50>)
     57e:	4798      	blx	r3
     580:	e7fb      	b.n	57a <timer_add_timer_task+0x46>
     582:	46c0      	nop			; (mov r8, r8)
     584:	00000c1d 	.word	0x00000c1d
     588:	00000c49 	.word	0x00000c49

0000058c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     58e:	0005      	movs	r5, r0
     590:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     592:	6903      	ldr	r3, [r0, #16]
     594:	1c5e      	adds	r6, r3, #1
     596:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     598:	7e03      	ldrb	r3, [r0, #24]
     59a:	07db      	lsls	r3, r3, #31
     59c:	d402      	bmi.n	5a4 <timer_process_counted+0x18>
     59e:	7e03      	ldrb	r3, [r0, #24]
     5a0:	079b      	lsls	r3, r3, #30
     5a2:	d50a      	bpl.n	5ba <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     5a4:	7e2b      	ldrb	r3, [r5, #24]
     5a6:	2202      	movs	r2, #2
     5a8:	4313      	orrs	r3, r2
     5aa:	b2db      	uxtb	r3, r3
     5ac:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5b0:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     5b2:	68e3      	ldr	r3, [r4, #12]
     5b4:	0020      	movs	r0, r4
     5b6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     5b8:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     5ba:	2c00      	cmp	r4, #0
     5bc:	d0f7      	beq.n	5ae <timer_process_counted+0x22>
     5be:	6863      	ldr	r3, [r4, #4]
     5c0:	1af3      	subs	r3, r6, r3
     5c2:	68a2      	ldr	r2, [r4, #8]
     5c4:	4293      	cmp	r3, r2
     5c6:	d3f2      	bcc.n	5ae <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     5c8:	002f      	movs	r7, r5
     5ca:	3714      	adds	r7, #20
     5cc:	0038      	movs	r0, r7
     5ce:	4b06      	ldr	r3, [pc, #24]	; (5e8 <timer_process_counted+0x5c>)
     5d0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     5d2:	7c23      	ldrb	r3, [r4, #16]
     5d4:	2b01      	cmp	r3, #1
     5d6:	d1eb      	bne.n	5b0 <timer_process_counted+0x24>
			tmp->time_label = time;
     5d8:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     5da:	0032      	movs	r2, r6
     5dc:	0021      	movs	r1, r4
     5de:	0038      	movs	r0, r7
     5e0:	4b02      	ldr	r3, [pc, #8]	; (5ec <timer_process_counted+0x60>)
     5e2:	4798      	blx	r3
     5e4:	e7e4      	b.n	5b0 <timer_process_counted+0x24>
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00000c51 	.word	0x00000c51
     5ec:	00000535 	.word	0x00000535

000005f0 <timer_init>:
{
     5f0:	b570      	push	{r4, r5, r6, lr}
     5f2:	0004      	movs	r4, r0
     5f4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5f6:	2800      	cmp	r0, #0
     5f8:	d012      	beq.n	620 <timer_init+0x30>
     5fa:	2900      	cmp	r1, #0
     5fc:	d00e      	beq.n	61c <timer_init+0x2c>
     5fe:	2001      	movs	r0, #1
     600:	223b      	movs	r2, #59	; 0x3b
     602:	4908      	ldr	r1, [pc, #32]	; (624 <timer_init+0x34>)
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <timer_init+0x38>)
     606:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     608:	0029      	movs	r1, r5
     60a:	0020      	movs	r0, r4
     60c:	4b07      	ldr	r3, [pc, #28]	; (62c <timer_init+0x3c>)
     60e:	4798      	blx	r3
	descr->time                           = 0;
     610:	2300      	movs	r3, #0
     612:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     614:	4b06      	ldr	r3, [pc, #24]	; (630 <timer_init+0x40>)
     616:	6023      	str	r3, [r4, #0]
}
     618:	2000      	movs	r0, #0
     61a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     61c:	2000      	movs	r0, #0
     61e:	e7ef      	b.n	600 <timer_init+0x10>
     620:	2000      	movs	r0, #0
     622:	e7ed      	b.n	600 <timer_init+0x10>
     624:	00002430 	.word	0x00002430
     628:	00000bfd 	.word	0x00000bfd
     62c:	00000ec1 	.word	0x00000ec1
     630:	0000058d 	.word	0x0000058d

00000634 <timer_start>:
{
     634:	b510      	push	{r4, lr}
     636:	0004      	movs	r4, r0
	ASSERT(descr);
     638:	1e43      	subs	r3, r0, #1
     63a:	4198      	sbcs	r0, r3
     63c:	b2c0      	uxtb	r0, r0
     63e:	2253      	movs	r2, #83	; 0x53
     640:	4907      	ldr	r1, [pc, #28]	; (660 <timer_start+0x2c>)
     642:	4b08      	ldr	r3, [pc, #32]	; (664 <timer_start+0x30>)
     644:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     646:	0020      	movs	r0, r4
     648:	4b07      	ldr	r3, [pc, #28]	; (668 <timer_start+0x34>)
     64a:	4798      	blx	r3
     64c:	2800      	cmp	r0, #0
     64e:	d104      	bne.n	65a <timer_start+0x26>
	_timer_start(&descr->device);
     650:	0020      	movs	r0, r4
     652:	4b06      	ldr	r3, [pc, #24]	; (66c <timer_start+0x38>)
     654:	4798      	blx	r3
	return ERR_NONE;
     656:	2000      	movs	r0, #0
}
     658:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     65a:	2011      	movs	r0, #17
     65c:	4240      	negs	r0, r0
     65e:	e7fb      	b.n	658 <timer_start+0x24>
     660:	00002430 	.word	0x00002430
     664:	00000bfd 	.word	0x00000bfd
     668:	00000f75 	.word	0x00000f75
     66c:	00000f1d 	.word	0x00000f1d

00000670 <timer_add_task>:
{
     670:	b570      	push	{r4, r5, r6, lr}
     672:	b082      	sub	sp, #8
     674:	0004      	movs	r4, r0
     676:	000d      	movs	r5, r1
	ASSERT(descr && task);
     678:	2800      	cmp	r0, #0
     67a:	d026      	beq.n	6ca <timer_add_task+0x5a>
     67c:	2900      	cmp	r1, #0
     67e:	d022      	beq.n	6c6 <timer_add_task+0x56>
     680:	2001      	movs	r0, #1
     682:	227a      	movs	r2, #122	; 0x7a
     684:	491f      	ldr	r1, [pc, #124]	; (704 <timer_add_task+0x94>)
     686:	4b20      	ldr	r3, [pc, #128]	; (708 <timer_add_task+0x98>)
     688:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     68a:	7e23      	ldrb	r3, [r4, #24]
     68c:	2201      	movs	r2, #1
     68e:	4313      	orrs	r3, r2
     690:	b2db      	uxtb	r3, r3
     692:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     694:	0026      	movs	r6, r4
     696:	3614      	adds	r6, #20
     698:	0029      	movs	r1, r5
     69a:	0030      	movs	r0, r6
     69c:	4b1b      	ldr	r3, [pc, #108]	; (70c <timer_add_task+0x9c>)
     69e:	4798      	blx	r3
     6a0:	2800      	cmp	r0, #0
     6a2:	d114      	bne.n	6ce <timer_add_task+0x5e>
	task->time_label = descr->time;
     6a4:	6923      	ldr	r3, [r4, #16]
     6a6:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     6a8:	6922      	ldr	r2, [r4, #16]
     6aa:	0029      	movs	r1, r5
     6ac:	0030      	movs	r0, r6
     6ae:	4b18      	ldr	r3, [pc, #96]	; (710 <timer_add_task+0xa0>)
     6b0:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6b2:	7e23      	ldrb	r3, [r4, #24]
     6b4:	2201      	movs	r2, #1
     6b6:	4393      	bics	r3, r2
     6b8:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     6ba:	7e23      	ldrb	r3, [r4, #24]
     6bc:	079b      	lsls	r3, r3, #30
     6be:	d412      	bmi.n	6e6 <timer_add_task+0x76>
	return ERR_NONE;
     6c0:	2000      	movs	r0, #0
}
     6c2:	b002      	add	sp, #8
     6c4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     6c6:	2000      	movs	r0, #0
     6c8:	e7db      	b.n	682 <timer_add_task+0x12>
     6ca:	2000      	movs	r0, #0
     6cc:	e7d9      	b.n	682 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6ce:	7e23      	ldrb	r3, [r4, #24]
     6d0:	2201      	movs	r2, #1
     6d2:	4393      	bics	r3, r2
     6d4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     6d6:	327e      	adds	r2, #126	; 0x7e
     6d8:	490a      	ldr	r1, [pc, #40]	; (704 <timer_add_task+0x94>)
     6da:	2000      	movs	r0, #0
     6dc:	4b0a      	ldr	r3, [pc, #40]	; (708 <timer_add_task+0x98>)
     6de:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     6e0:	2012      	movs	r0, #18
     6e2:	4240      	negs	r0, r0
     6e4:	e7ed      	b.n	6c2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     6e6:	a801      	add	r0, sp, #4
     6e8:	4b0a      	ldr	r3, [pc, #40]	; (714 <timer_add_task+0xa4>)
     6ea:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     6ec:	7e23      	ldrb	r3, [r4, #24]
     6ee:	2202      	movs	r2, #2
     6f0:	4393      	bics	r3, r2
     6f2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     6f4:	0020      	movs	r0, r4
     6f6:	4b08      	ldr	r3, [pc, #32]	; (718 <timer_add_task+0xa8>)
     6f8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     6fa:	a801      	add	r0, sp, #4
     6fc:	4b07      	ldr	r3, [pc, #28]	; (71c <timer_add_task+0xac>)
     6fe:	4798      	blx	r3
	return ERR_NONE;
     700:	2000      	movs	r0, #0
     702:	e7de      	b.n	6c2 <timer_add_task+0x52>
     704:	00002430 	.word	0x00002430
     708:	00000bfd 	.word	0x00000bfd
     70c:	00000c05 	.word	0x00000c05
     710:	00000535 	.word	0x00000535
     714:	00000475 	.word	0x00000475
     718:	00000f87 	.word	0x00000f87
     71c:	00000483 	.word	0x00000483

00000720 <timer_remove_task>:
{
     720:	b570      	push	{r4, r5, r6, lr}
     722:	b082      	sub	sp, #8
     724:	0004      	movs	r4, r0
     726:	000d      	movs	r5, r1
	ASSERT(descr && task);
     728:	2800      	cmp	r0, #0
     72a:	d023      	beq.n	774 <timer_remove_task+0x54>
     72c:	2900      	cmp	r1, #0
     72e:	d01f      	beq.n	770 <timer_remove_task+0x50>
     730:	2001      	movs	r0, #1
     732:	2295      	movs	r2, #149	; 0x95
     734:	491d      	ldr	r1, [pc, #116]	; (7ac <timer_remove_task+0x8c>)
     736:	4b1e      	ldr	r3, [pc, #120]	; (7b0 <timer_remove_task+0x90>)
     738:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     73a:	7e23      	ldrb	r3, [r4, #24]
     73c:	2201      	movs	r2, #1
     73e:	4313      	orrs	r3, r2
     740:	b2db      	uxtb	r3, r3
     742:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
     744:	0026      	movs	r6, r4
     746:	3614      	adds	r6, #20
     748:	0029      	movs	r1, r5
     74a:	0030      	movs	r0, r6
     74c:	4b19      	ldr	r3, [pc, #100]	; (7b4 <timer_remove_task+0x94>)
     74e:	4798      	blx	r3
     750:	2800      	cmp	r0, #0
     752:	d011      	beq.n	778 <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
     754:	0029      	movs	r1, r5
     756:	0030      	movs	r0, r6
     758:	4b17      	ldr	r3, [pc, #92]	; (7b8 <timer_remove_task+0x98>)
     75a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     75c:	7e23      	ldrb	r3, [r4, #24]
     75e:	2201      	movs	r2, #1
     760:	4393      	bics	r3, r2
     762:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     764:	7e23      	ldrb	r3, [r4, #24]
     766:	079b      	lsls	r3, r3, #30
     768:	d411      	bmi.n	78e <timer_remove_task+0x6e>
	return ERR_NONE;
     76a:	2000      	movs	r0, #0
}
     76c:	b002      	add	sp, #8
     76e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     770:	2000      	movs	r0, #0
     772:	e7de      	b.n	732 <timer_remove_task+0x12>
     774:	2000      	movs	r0, #0
     776:	e7dc      	b.n	732 <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     778:	7e23      	ldrb	r3, [r4, #24]
     77a:	2201      	movs	r2, #1
     77c:	4393      	bics	r3, r2
     77e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     780:	3299      	adds	r2, #153	; 0x99
     782:	490a      	ldr	r1, [pc, #40]	; (7ac <timer_remove_task+0x8c>)
     784:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <timer_remove_task+0x90>)
     786:	4798      	blx	r3
		return ERR_NOT_FOUND;
     788:	200a      	movs	r0, #10
     78a:	4240      	negs	r0, r0
     78c:	e7ee      	b.n	76c <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
     78e:	a801      	add	r0, sp, #4
     790:	4b0a      	ldr	r3, [pc, #40]	; (7bc <timer_remove_task+0x9c>)
     792:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     794:	7e23      	ldrb	r3, [r4, #24]
     796:	2202      	movs	r2, #2
     798:	4393      	bics	r3, r2
     79a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     79c:	0020      	movs	r0, r4
     79e:	4b08      	ldr	r3, [pc, #32]	; (7c0 <timer_remove_task+0xa0>)
     7a0:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     7a2:	a801      	add	r0, sp, #4
     7a4:	4b07      	ldr	r3, [pc, #28]	; (7c4 <timer_remove_task+0xa4>)
     7a6:	4798      	blx	r3
	return ERR_NONE;
     7a8:	2000      	movs	r0, #0
     7aa:	e7df      	b.n	76c <timer_remove_task+0x4c>
     7ac:	00002430 	.word	0x00002430
     7b0:	00000bfd 	.word	0x00000bfd
     7b4:	00000c05 	.word	0x00000c05
     7b8:	00000c63 	.word	0x00000c63
     7bc:	00000475 	.word	0x00000475
     7c0:	00000f87 	.word	0x00000f87
     7c4:	00000483 	.word	0x00000483

000007c8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     7c8:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7ca:	3808      	subs	r0, #8

	descr->stat = 0;
     7cc:	2300      	movs	r3, #0
     7ce:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     7d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
     7d2:	2b00      	cmp	r3, #0
     7d4:	d000      	beq.n	7d8 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     7d6:	4798      	blx	r3
	}
}
     7d8:	bd10      	pop	{r4, pc}

000007da <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     7da:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7dc:	3808      	subs	r0, #8

	descr->stat = 0;
     7de:	2300      	movs	r3, #0
     7e0:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     7e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     7e4:	2b00      	cmp	r3, #0
     7e6:	d000      	beq.n	7ea <usart_error+0x10>
		descr->usart_cb.error(descr);
     7e8:	4798      	blx	r3
	}
}
     7ea:	bd10      	pop	{r4, pc}

000007ec <usart_fill_rx_buffer>:
{
     7ec:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7ee:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     7f0:	302c      	adds	r0, #44	; 0x2c
     7f2:	4b04      	ldr	r3, [pc, #16]	; (804 <usart_fill_rx_buffer+0x18>)
     7f4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     7f6:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7f8:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     7fa:	2b00      	cmp	r3, #0
     7fc:	d001      	beq.n	802 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     7fe:	0020      	movs	r0, r4
     800:	4798      	blx	r3
}
     802:	bd10      	pop	{r4, pc}
     804:	00000d2d 	.word	0x00000d2d

00000808 <usart_async_write>:
{
     808:	b570      	push	{r4, r5, r6, lr}
     80a:	0004      	movs	r4, r0
     80c:	000e      	movs	r6, r1
     80e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     810:	2800      	cmp	r0, #0
     812:	d01d      	beq.n	850 <usart_async_write+0x48>
     814:	2900      	cmp	r1, #0
     816:	d01d      	beq.n	854 <usart_async_write+0x4c>
     818:	2a00      	cmp	r2, #0
     81a:	d11d      	bne.n	858 <usart_async_write+0x50>
     81c:	2000      	movs	r0, #0
     81e:	223c      	movs	r2, #60	; 0x3c
     820:	32ff      	adds	r2, #255	; 0xff
     822:	4910      	ldr	r1, [pc, #64]	; (864 <usart_async_write+0x5c>)
     824:	4b10      	ldr	r3, [pc, #64]	; (868 <usart_async_write+0x60>)
     826:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     828:	2344      	movs	r3, #68	; 0x44
     82a:	5ae2      	ldrh	r2, [r4, r3]
     82c:	3308      	adds	r3, #8
     82e:	5ae3      	ldrh	r3, [r4, r3]
     830:	429a      	cmp	r2, r3
     832:	d113      	bne.n	85c <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     834:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     836:	234c      	movs	r3, #76	; 0x4c
     838:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     83a:	2200      	movs	r2, #0
     83c:	3b08      	subs	r3, #8
     83e:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     840:	3b43      	subs	r3, #67	; 0x43
     842:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     844:	0020      	movs	r0, r4
     846:	3008      	adds	r0, #8
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <usart_async_write+0x64>)
     84a:	4798      	blx	r3
	return (int32_t)length;
     84c:	0028      	movs	r0, r5
}
     84e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     850:	2000      	movs	r0, #0
     852:	e7e4      	b.n	81e <usart_async_write+0x16>
     854:	2000      	movs	r0, #0
     856:	e7e2      	b.n	81e <usart_async_write+0x16>
     858:	2001      	movs	r0, #1
     85a:	e7e0      	b.n	81e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     85c:	201c      	movs	r0, #28
     85e:	4240      	negs	r0, r0
     860:	e7f5      	b.n	84e <usart_async_write+0x46>
     862:	46c0      	nop			; (mov r8, r8)
     864:	00002448 	.word	0x00002448
     868:	00000bfd 	.word	0x00000bfd
     86c:	00001297 	.word	0x00001297

00000870 <usart_process_byte_sent>:
{
     870:	b570      	push	{r4, r5, r6, lr}
     872:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     874:	0002      	movs	r2, r0
     876:	3a08      	subs	r2, #8
     878:	2344      	movs	r3, #68	; 0x44
     87a:	5ad3      	ldrh	r3, [r2, r3]
     87c:	214c      	movs	r1, #76	; 0x4c
     87e:	5a52      	ldrh	r2, [r2, r1]
     880:	4293      	cmp	r3, r2
     882:	d00d      	beq.n	8a0 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     884:	0002      	movs	r2, r0
     886:	6c01      	ldr	r1, [r0, #64]	; 0x40
     888:	3a08      	subs	r2, #8
     88a:	1c5d      	adds	r5, r3, #1
     88c:	2044      	movs	r0, #68	; 0x44
     88e:	5215      	strh	r5, [r2, r0]
     890:	5cc9      	ldrb	r1, [r1, r3]
     892:	0020      	movs	r0, r4
     894:	4b04      	ldr	r3, [pc, #16]	; (8a8 <usart_process_byte_sent+0x38>)
     896:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     898:	0020      	movs	r0, r4
     89a:	4b04      	ldr	r3, [pc, #16]	; (8ac <usart_process_byte_sent+0x3c>)
     89c:	4798      	blx	r3
}
     89e:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     8a0:	4b03      	ldr	r3, [pc, #12]	; (8b0 <usart_process_byte_sent+0x40>)
     8a2:	4798      	blx	r3
}
     8a4:	e7fb      	b.n	89e <usart_process_byte_sent+0x2e>
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	00001265 	.word	0x00001265
     8ac:	00001297 	.word	0x00001297
     8b0:	0000129f 	.word	0x0000129f

000008b4 <usart_async_read>:
{
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b6:	b085      	sub	sp, #20
     8b8:	0004      	movs	r4, r0
     8ba:	000d      	movs	r5, r1
     8bc:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     8be:	2800      	cmp	r0, #0
     8c0:	d017      	beq.n	8f2 <usart_async_read+0x3e>
     8c2:	2900      	cmp	r1, #0
     8c4:	d017      	beq.n	8f6 <usart_async_read+0x42>
     8c6:	2a00      	cmp	r2, #0
     8c8:	d117      	bne.n	8fa <usart_async_read+0x46>
     8ca:	2000      	movs	r0, #0
     8cc:	22ac      	movs	r2, #172	; 0xac
     8ce:	0052      	lsls	r2, r2, #1
     8d0:	4912      	ldr	r1, [pc, #72]	; (91c <usart_async_read+0x68>)
     8d2:	4b13      	ldr	r3, [pc, #76]	; (920 <usart_async_read+0x6c>)
     8d4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     8d6:	a803      	add	r0, sp, #12
     8d8:	4b12      	ldr	r3, [pc, #72]	; (924 <usart_async_read+0x70>)
     8da:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     8dc:	3434      	adds	r4, #52	; 0x34
     8de:	0020      	movs	r0, r4
     8e0:	9401      	str	r4, [sp, #4]
     8e2:	4b11      	ldr	r3, [pc, #68]	; (928 <usart_async_read+0x74>)
     8e4:	4798      	blx	r3
     8e6:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     8e8:	a803      	add	r0, sp, #12
     8ea:	4b10      	ldr	r3, [pc, #64]	; (92c <usart_async_read+0x78>)
     8ec:	4798      	blx	r3
	uint16_t                       was_read = 0;
     8ee:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     8f0:	e00b      	b.n	90a <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     8f2:	2000      	movs	r0, #0
     8f4:	e7ea      	b.n	8cc <usart_async_read+0x18>
     8f6:	2000      	movs	r0, #0
     8f8:	e7e8      	b.n	8cc <usart_async_read+0x18>
     8fa:	2001      	movs	r0, #1
     8fc:	e7e6      	b.n	8cc <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     8fe:	3401      	adds	r4, #1
     900:	b2a4      	uxth	r4, r4
     902:	1869      	adds	r1, r5, r1
     904:	9801      	ldr	r0, [sp, #4]
     906:	4b0a      	ldr	r3, [pc, #40]	; (930 <usart_async_read+0x7c>)
     908:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     90a:	0021      	movs	r1, r4
     90c:	42a7      	cmp	r7, r4
     90e:	d901      	bls.n	914 <usart_async_read+0x60>
     910:	42b4      	cmp	r4, r6
     912:	d3f4      	bcc.n	8fe <usart_async_read+0x4a>
}
     914:	0020      	movs	r0, r4
     916:	b005      	add	sp, #20
     918:	bdf0      	pop	{r4, r5, r6, r7, pc}
     91a:	46c0      	nop			; (mov r8, r8)
     91c:	00002448 	.word	0x00002448
     920:	00000bfd 	.word	0x00000bfd
     924:	00000475 	.word	0x00000475
     928:	00000d6d 	.word	0x00000d6d
     92c:	00000483 	.word	0x00000483
     930:	00000ce1 	.word	0x00000ce1

00000934 <usart_async_init>:
{
     934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     936:	0004      	movs	r4, r0
     938:	000d      	movs	r5, r1
     93a:	0016      	movs	r6, r2
     93c:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     93e:	2800      	cmp	r0, #0
     940:	d026      	beq.n	990 <usart_async_init+0x5c>
     942:	2900      	cmp	r1, #0
     944:	d026      	beq.n	994 <usart_async_init+0x60>
     946:	2a00      	cmp	r2, #0
     948:	d026      	beq.n	998 <usart_async_init+0x64>
     94a:	2b00      	cmp	r3, #0
     94c:	d126      	bne.n	99c <usart_async_init+0x68>
     94e:	2000      	movs	r0, #0
     950:	223a      	movs	r2, #58	; 0x3a
     952:	4915      	ldr	r1, [pc, #84]	; (9a8 <usart_async_init+0x74>)
     954:	4b15      	ldr	r3, [pc, #84]	; (9ac <usart_async_init+0x78>)
     956:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     958:	0020      	movs	r0, r4
     95a:	3034      	adds	r0, #52	; 0x34
     95c:	003a      	movs	r2, r7
     95e:	0031      	movs	r1, r6
     960:	4b13      	ldr	r3, [pc, #76]	; (9b0 <usart_async_init+0x7c>)
     962:	4798      	blx	r3
     964:	2800      	cmp	r0, #0
     966:	d11b      	bne.n	9a0 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     968:	0020      	movs	r0, r4
     96a:	3008      	adds	r0, #8
     96c:	0029      	movs	r1, r5
     96e:	4b11      	ldr	r3, [pc, #68]	; (9b4 <usart_async_init+0x80>)
     970:	4798      	blx	r3
	if (init_status) {
     972:	2800      	cmp	r0, #0
     974:	d10b      	bne.n	98e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     976:	4b10      	ldr	r3, [pc, #64]	; (9b8 <usart_async_init+0x84>)
     978:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     97a:	4b10      	ldr	r3, [pc, #64]	; (9bc <usart_async_init+0x88>)
     97c:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     97e:	4b10      	ldr	r3, [pc, #64]	; (9c0 <usart_async_init+0x8c>)
     980:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     982:	4b10      	ldr	r3, [pc, #64]	; (9c4 <usart_async_init+0x90>)
     984:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     986:	4b10      	ldr	r3, [pc, #64]	; (9c8 <usart_async_init+0x94>)
     988:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     98a:	4b10      	ldr	r3, [pc, #64]	; (9cc <usart_async_init+0x98>)
     98c:	6163      	str	r3, [r4, #20]
}
     98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     990:	2000      	movs	r0, #0
     992:	e7dd      	b.n	950 <usart_async_init+0x1c>
     994:	2000      	movs	r0, #0
     996:	e7db      	b.n	950 <usart_async_init+0x1c>
     998:	2000      	movs	r0, #0
     99a:	e7d9      	b.n	950 <usart_async_init+0x1c>
     99c:	2001      	movs	r0, #1
     99e:	e7d7      	b.n	950 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     9a0:	200d      	movs	r0, #13
     9a2:	4240      	negs	r0, r0
     9a4:	e7f3      	b.n	98e <usart_async_init+0x5a>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	00002448 	.word	0x00002448
     9ac:	00000bfd 	.word	0x00000bfd
     9b0:	00000c95 	.word	0x00000c95
     9b4:	000011ad 	.word	0x000011ad
     9b8:	000008b5 	.word	0x000008b5
     9bc:	00000809 	.word	0x00000809
     9c0:	00000871 	.word	0x00000871
     9c4:	000007ed 	.word	0x000007ed
     9c8:	000007c9 	.word	0x000007c9
     9cc:	000007db 	.word	0x000007db

000009d0 <usart_async_enable>:
{
     9d0:	b510      	push	{r4, lr}
     9d2:	0004      	movs	r4, r0
	ASSERT(descr);
     9d4:	1e43      	subs	r3, r0, #1
     9d6:	4198      	sbcs	r0, r3
     9d8:	b2c0      	uxtb	r0, r0
     9da:	2261      	movs	r2, #97	; 0x61
     9dc:	4904      	ldr	r1, [pc, #16]	; (9f0 <usart_async_enable+0x20>)
     9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <usart_async_enable+0x24>)
     9e0:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     9e2:	0020      	movs	r0, r4
     9e4:	3008      	adds	r0, #8
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <usart_async_enable+0x28>)
     9e8:	4798      	blx	r3
}
     9ea:	2000      	movs	r0, #0
     9ec:	bd10      	pop	{r4, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	00002448 	.word	0x00002448
     9f4:	00000bfd 	.word	0x00000bfd
     9f8:	0000124b 	.word	0x0000124b

000009fc <usart_async_get_io_descriptor>:
{
     9fc:	b570      	push	{r4, r5, r6, lr}
     9fe:	0004      	movs	r4, r0
     a00:	000d      	movs	r5, r1
	ASSERT(descr && io);
     a02:	2800      	cmp	r0, #0
     a04:	d00b      	beq.n	a1e <usart_async_get_io_descriptor+0x22>
     a06:	2900      	cmp	r1, #0
     a08:	d007      	beq.n	a1a <usart_async_get_io_descriptor+0x1e>
     a0a:	2001      	movs	r0, #1
     a0c:	2277      	movs	r2, #119	; 0x77
     a0e:	4905      	ldr	r1, [pc, #20]	; (a24 <usart_async_get_io_descriptor+0x28>)
     a10:	4b05      	ldr	r3, [pc, #20]	; (a28 <usart_async_get_io_descriptor+0x2c>)
     a12:	4798      	blx	r3
	*io = &descr->io;
     a14:	602c      	str	r4, [r5, #0]
}
     a16:	2000      	movs	r0, #0
     a18:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     a1a:	2000      	movs	r0, #0
     a1c:	e7f6      	b.n	a0c <usart_async_get_io_descriptor+0x10>
     a1e:	2000      	movs	r0, #0
     a20:	e7f4      	b.n	a0c <usart_async_get_io_descriptor+0x10>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	00002448 	.word	0x00002448
     a28:	00000bfd 	.word	0x00000bfd

00000a2c <usart_async_register_callback>:
{
     a2c:	b570      	push	{r4, r5, r6, lr}
     a2e:	0005      	movs	r5, r0
     a30:	000e      	movs	r6, r1
     a32:	0014      	movs	r4, r2
	ASSERT(descr);
     a34:	1e43      	subs	r3, r0, #1
     a36:	4198      	sbcs	r0, r3
     a38:	b2c0      	uxtb	r0, r0
     a3a:	2283      	movs	r2, #131	; 0x83
     a3c:	4916      	ldr	r1, [pc, #88]	; (a98 <usart_async_register_callback+0x6c>)
     a3e:	4b17      	ldr	r3, [pc, #92]	; (a9c <usart_async_register_callback+0x70>)
     a40:	4798      	blx	r3
	switch (type) {
     a42:	2e01      	cmp	r6, #1
     a44:	d011      	beq.n	a6a <usart_async_register_callback+0x3e>
     a46:	2e00      	cmp	r6, #0
     a48:	d004      	beq.n	a54 <usart_async_register_callback+0x28>
     a4a:	2e02      	cmp	r6, #2
     a4c:	d018      	beq.n	a80 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     a4e:	200d      	movs	r0, #13
     a50:	4240      	negs	r0, r0
     a52:	e009      	b.n	a68 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     a54:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     a56:	1e62      	subs	r2, r4, #1
     a58:	4194      	sbcs	r4, r2
     a5a:	b2e2      	uxtb	r2, r4
     a5c:	0028      	movs	r0, r5
     a5e:	3008      	adds	r0, #8
     a60:	2101      	movs	r1, #1
     a62:	4b0f      	ldr	r3, [pc, #60]	; (aa0 <usart_async_register_callback+0x74>)
     a64:	4798      	blx	r3
	return ERR_NONE;
     a66:	2000      	movs	r0, #0
}
     a68:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     a6a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     a6c:	1e62      	subs	r2, r4, #1
     a6e:	4194      	sbcs	r4, r2
     a70:	b2e2      	uxtb	r2, r4
     a72:	0028      	movs	r0, r5
     a74:	3008      	adds	r0, #8
     a76:	2102      	movs	r1, #2
     a78:	4b09      	ldr	r3, [pc, #36]	; (aa0 <usart_async_register_callback+0x74>)
     a7a:	4798      	blx	r3
	return ERR_NONE;
     a7c:	2000      	movs	r0, #0
		break;
     a7e:	e7f3      	b.n	a68 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     a80:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     a82:	1e62      	subs	r2, r4, #1
     a84:	4194      	sbcs	r4, r2
     a86:	b2e2      	uxtb	r2, r4
     a88:	0028      	movs	r0, r5
     a8a:	3008      	adds	r0, #8
     a8c:	2103      	movs	r1, #3
     a8e:	4b04      	ldr	r3, [pc, #16]	; (aa0 <usart_async_register_callback+0x74>)
     a90:	4798      	blx	r3
	return ERR_NONE;
     a92:	2000      	movs	r0, #0
		break;
     a94:	e7e8      	b.n	a68 <usart_async_register_callback+0x3c>
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	00002448 	.word	0x00002448
     a9c:	00000bfd 	.word	0x00000bfd
     aa0:	000012a9 	.word	0x000012a9

00000aa4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aa6:	0005      	movs	r5, r0
     aa8:	000e      	movs	r6, r1
     aaa:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     aac:	2800      	cmp	r0, #0
     aae:	d023      	beq.n	af8 <usart_sync_write+0x54>
     ab0:	2900      	cmp	r1, #0
     ab2:	d023      	beq.n	afc <usart_sync_write+0x58>
     ab4:	2a00      	cmp	r2, #0
     ab6:	d123      	bne.n	b00 <usart_sync_write+0x5c>
     ab8:	2000      	movs	r0, #0
     aba:	22f1      	movs	r2, #241	; 0xf1
     abc:	4911      	ldr	r1, [pc, #68]	; (b04 <usart_sync_write+0x60>)
     abe:	4b12      	ldr	r3, [pc, #72]	; (b08 <usart_sync_write+0x64>)
     ac0:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     ac2:	002c      	movs	r4, r5
     ac4:	3408      	adds	r4, #8
     ac6:	0020      	movs	r0, r4
     ac8:	4b10      	ldr	r3, [pc, #64]	; (b0c <usart_sync_write+0x68>)
     aca:	4798      	blx	r3
     acc:	2800      	cmp	r0, #0
     ace:	d0f8      	beq.n	ac2 <usart_sync_write+0x1e>
     ad0:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     ad2:	5d71      	ldrb	r1, [r6, r5]
     ad4:	0020      	movs	r0, r4
     ad6:	4b0e      	ldr	r3, [pc, #56]	; (b10 <usart_sync_write+0x6c>)
     ad8:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     ada:	0020      	movs	r0, r4
     adc:	4b0b      	ldr	r3, [pc, #44]	; (b0c <usart_sync_write+0x68>)
     ade:	4798      	blx	r3
     ae0:	2800      	cmp	r0, #0
     ae2:	d0fa      	beq.n	ada <usart_sync_write+0x36>
			;
	} while (++offset < length);
     ae4:	3501      	adds	r5, #1
     ae6:	42bd      	cmp	r5, r7
     ae8:	d3f3      	bcc.n	ad2 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     aea:	0020      	movs	r0, r4
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <usart_sync_write+0x70>)
     aee:	4798      	blx	r3
     af0:	2800      	cmp	r0, #0
     af2:	d0fa      	beq.n	aea <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     af4:	0028      	movs	r0, r5
     af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     af8:	2000      	movs	r0, #0
     afa:	e7de      	b.n	aba <usart_sync_write+0x16>
     afc:	2000      	movs	r0, #0
     afe:	e7dc      	b.n	aba <usart_sync_write+0x16>
     b00:	2001      	movs	r0, #1
     b02:	e7da      	b.n	aba <usart_sync_write+0x16>
     b04:	00002468 	.word	0x00002468
     b08:	00000bfd 	.word	0x00000bfd
     b0c:	00001275 	.word	0x00001275
     b10:	0000125d 	.word	0x0000125d
     b14:	0000127f 	.word	0x0000127f

00000b18 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b1a:	46ce      	mov	lr, r9
     b1c:	4647      	mov	r7, r8
     b1e:	b580      	push	{r7, lr}
     b20:	1e05      	subs	r5, r0, #0
     b22:	4688      	mov	r8, r1
     b24:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     b26:	d01f      	beq.n	b68 <usart_sync_read+0x50>
     b28:	2900      	cmp	r1, #0
     b2a:	d01f      	beq.n	b6c <usart_sync_read+0x54>
     b2c:	2a00      	cmp	r2, #0
     b2e:	d11f      	bne.n	b70 <usart_sync_read+0x58>
     b30:	2000      	movs	r0, #0
     b32:	2286      	movs	r2, #134	; 0x86
     b34:	0052      	lsls	r2, r2, #1
     b36:	490f      	ldr	r1, [pc, #60]	; (b74 <usart_sync_read+0x5c>)
     b38:	4b0f      	ldr	r3, [pc, #60]	; (b78 <usart_sync_read+0x60>)
     b3a:	4798      	blx	r3
	uint32_t                      offset = 0;
     b3c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     b3e:	002c      	movs	r4, r5
     b40:	3408      	adds	r4, #8
     b42:	0020      	movs	r0, r4
     b44:	4b0d      	ldr	r3, [pc, #52]	; (b7c <usart_sync_read+0x64>)
     b46:	4798      	blx	r3
     b48:	2800      	cmp	r0, #0
     b4a:	d0f8      	beq.n	b3e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     b4c:	4643      	mov	r3, r8
     b4e:	199f      	adds	r7, r3, r6
     b50:	0020      	movs	r0, r4
     b52:	4b0b      	ldr	r3, [pc, #44]	; (b80 <usart_sync_read+0x68>)
     b54:	4798      	blx	r3
     b56:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     b58:	3601      	adds	r6, #1
     b5a:	454e      	cmp	r6, r9
     b5c:	d3ef      	bcc.n	b3e <usart_sync_read+0x26>

	return (int32_t)offset;
}
     b5e:	0030      	movs	r0, r6
     b60:	bc0c      	pop	{r2, r3}
     b62:	4690      	mov	r8, r2
     b64:	4699      	mov	r9, r3
     b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     b68:	2000      	movs	r0, #0
     b6a:	e7e2      	b.n	b32 <usart_sync_read+0x1a>
     b6c:	2000      	movs	r0, #0
     b6e:	e7e0      	b.n	b32 <usart_sync_read+0x1a>
     b70:	2001      	movs	r0, #1
     b72:	e7de      	b.n	b32 <usart_sync_read+0x1a>
     b74:	00002468 	.word	0x00002468
     b78:	00000bfd 	.word	0x00000bfd
     b7c:	0000128b 	.word	0x0000128b
     b80:	0000126d 	.word	0x0000126d

00000b84 <usart_sync_init>:
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	0004      	movs	r4, r0
     b88:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     b8a:	2800      	cmp	r0, #0
     b8c:	d014      	beq.n	bb8 <usart_sync_init+0x34>
     b8e:	2900      	cmp	r1, #0
     b90:	d010      	beq.n	bb4 <usart_sync_init+0x30>
     b92:	2001      	movs	r0, #1
     b94:	2234      	movs	r2, #52	; 0x34
     b96:	4909      	ldr	r1, [pc, #36]	; (bbc <usart_sync_init+0x38>)
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <usart_sync_init+0x3c>)
     b9a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     b9c:	0020      	movs	r0, r4
     b9e:	3008      	adds	r0, #8
     ba0:	0029      	movs	r1, r5
     ba2:	4b08      	ldr	r3, [pc, #32]	; (bc4 <usart_sync_init+0x40>)
     ba4:	4798      	blx	r3
	if (init_status) {
     ba6:	2800      	cmp	r0, #0
     ba8:	d103      	bne.n	bb2 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     baa:	4b07      	ldr	r3, [pc, #28]	; (bc8 <usart_sync_init+0x44>)
     bac:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     bae:	4b07      	ldr	r3, [pc, #28]	; (bcc <usart_sync_init+0x48>)
     bb0:	6023      	str	r3, [r4, #0]
}
     bb2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     bb4:	2000      	movs	r0, #0
     bb6:	e7ed      	b.n	b94 <usart_sync_init+0x10>
     bb8:	2000      	movs	r0, #0
     bba:	e7eb      	b.n	b94 <usart_sync_init+0x10>
     bbc:	00002468 	.word	0x00002468
     bc0:	00000bfd 	.word	0x00000bfd
     bc4:	00001181 	.word	0x00001181
     bc8:	00000b19 	.word	0x00000b19
     bcc:	00000aa5 	.word	0x00000aa5

00000bd0 <usart_sync_enable>:
{
     bd0:	b510      	push	{r4, lr}
     bd2:	0004      	movs	r4, r0
	ASSERT(descr);
     bd4:	1e43      	subs	r3, r0, #1
     bd6:	4198      	sbcs	r0, r3
     bd8:	b2c0      	uxtb	r0, r0
     bda:	2253      	movs	r2, #83	; 0x53
     bdc:	4904      	ldr	r1, [pc, #16]	; (bf0 <usart_sync_enable+0x20>)
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <usart_sync_enable+0x24>)
     be0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     be2:	0020      	movs	r0, r4
     be4:	3008      	adds	r0, #8
     be6:	4b04      	ldr	r3, [pc, #16]	; (bf8 <usart_sync_enable+0x28>)
     be8:	4798      	blx	r3
}
     bea:	2000      	movs	r0, #0
     bec:	bd10      	pop	{r4, pc}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	00002468 	.word	0x00002468
     bf4:	00000bfd 	.word	0x00000bfd
     bf8:	00001239 	.word	0x00001239

00000bfc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     bfc:	2800      	cmp	r0, #0
     bfe:	d100      	bne.n	c02 <assert+0x6>
		__asm("BKPT #0");
     c00:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     c02:	4770      	bx	lr

00000c04 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     c04:	6803      	ldr	r3, [r0, #0]
     c06:	2b00      	cmp	r3, #0
     c08:	d003      	beq.n	c12 <is_list_element+0xe>
		if (it == element) {
     c0a:	428b      	cmp	r3, r1
     c0c:	d003      	beq.n	c16 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	e7f9      	b.n	c06 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     c12:	2000      	movs	r0, #0
}
     c14:	4770      	bx	lr
			return true;
     c16:	2001      	movs	r0, #1
     c18:	e7fc      	b.n	c14 <is_list_element+0x10>
	...

00000c1c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     c1c:	b570      	push	{r4, r5, r6, lr}
     c1e:	0004      	movs	r4, r0
     c20:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     c22:	4b06      	ldr	r3, [pc, #24]	; (c3c <list_insert_as_head+0x20>)
     c24:	4798      	blx	r3
     c26:	2301      	movs	r3, #1
     c28:	4058      	eors	r0, r3
     c2a:	b2c0      	uxtb	r0, r0
     c2c:	2239      	movs	r2, #57	; 0x39
     c2e:	4904      	ldr	r1, [pc, #16]	; (c40 <list_insert_as_head+0x24>)
     c30:	4b04      	ldr	r3, [pc, #16]	; (c44 <list_insert_as_head+0x28>)
     c32:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     c34:	6823      	ldr	r3, [r4, #0]
     c36:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     c38:	6025      	str	r5, [r4, #0]
}
     c3a:	bd70      	pop	{r4, r5, r6, pc}
     c3c:	00000c05 	.word	0x00000c05
     c40:	00002484 	.word	0x00002484
     c44:	00000bfd 	.word	0x00000bfd

00000c48 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     c48:	6803      	ldr	r3, [r0, #0]
     c4a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     c4c:	6001      	str	r1, [r0, #0]
}
     c4e:	4770      	bx	lr

00000c50 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     c50:	6803      	ldr	r3, [r0, #0]
     c52:	2b00      	cmp	r3, #0
     c54:	d003      	beq.n	c5e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     c56:	681a      	ldr	r2, [r3, #0]
     c58:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     c5a:	0018      	movs	r0, r3
	}

	return NULL;
}
     c5c:	4770      	bx	lr
	return NULL;
     c5e:	2000      	movs	r0, #0
     c60:	e7fc      	b.n	c5c <list_remove_head+0xc>

00000c62 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
     c62:	2900      	cmp	r1, #0
     c64:	d012      	beq.n	c8c <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
     c66:	6803      	ldr	r3, [r0, #0]
     c68:	4299      	cmp	r1, r3
     c6a:	d104      	bne.n	c76 <list_delete_element+0x14>
		list->head = list->head->next;
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	6003      	str	r3, [r0, #0]
		return true;
     c70:	2001      	movs	r0, #1
     c72:	e00a      	b.n	c8a <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
     c74:	0013      	movs	r3, r2
		while (it && it->next != element) {
     c76:	2b00      	cmp	r3, #0
     c78:	d002      	beq.n	c80 <list_delete_element+0x1e>
     c7a:	681a      	ldr	r2, [r3, #0]
     c7c:	4291      	cmp	r1, r2
     c7e:	d1f9      	bne.n	c74 <list_delete_element+0x12>
		}
		if (it) {
     c80:	2b00      	cmp	r3, #0
     c82:	d005      	beq.n	c90 <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
     c84:	680a      	ldr	r2, [r1, #0]
     c86:	601a      	str	r2, [r3, #0]
			return true;
     c88:	2001      	movs	r0, #1
		}
	}

	return false;
}
     c8a:	4770      	bx	lr
		return false;
     c8c:	2000      	movs	r0, #0
     c8e:	e7fc      	b.n	c8a <list_delete_element+0x28>
	return false;
     c90:	2000      	movs	r0, #0
     c92:	e7fa      	b.n	c8a <list_delete_element+0x28>

00000c94 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     c94:	b570      	push	{r4, r5, r6, lr}
     c96:	0004      	movs	r4, r0
     c98:	000e      	movs	r6, r1
     c9a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     c9c:	2800      	cmp	r0, #0
     c9e:	d012      	beq.n	cc6 <ringbuffer_init+0x32>
     ca0:	2900      	cmp	r1, #0
     ca2:	d012      	beq.n	cca <ringbuffer_init+0x36>
     ca4:	2a00      	cmp	r2, #0
     ca6:	d112      	bne.n	cce <ringbuffer_init+0x3a>
     ca8:	2000      	movs	r0, #0
     caa:	2228      	movs	r2, #40	; 0x28
     cac:	490a      	ldr	r1, [pc, #40]	; (cd8 <ringbuffer_init+0x44>)
     cae:	4b0b      	ldr	r3, [pc, #44]	; (cdc <ringbuffer_init+0x48>)
     cb0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     cb2:	1e6b      	subs	r3, r5, #1
     cb4:	422b      	tst	r3, r5
     cb6:	d10c      	bne.n	cd2 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     cb8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     cba:	2300      	movs	r3, #0
     cbc:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     cbe:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     cc0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     cc2:	2000      	movs	r0, #0
}
     cc4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     cc6:	2000      	movs	r0, #0
     cc8:	e7ef      	b.n	caa <ringbuffer_init+0x16>
     cca:	2000      	movs	r0, #0
     ccc:	e7ed      	b.n	caa <ringbuffer_init+0x16>
     cce:	2001      	movs	r0, #1
     cd0:	e7eb      	b.n	caa <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     cd2:	200d      	movs	r0, #13
     cd4:	4240      	negs	r0, r0
     cd6:	e7f5      	b.n	cc4 <ringbuffer_init+0x30>
     cd8:	000024a4 	.word	0x000024a4
     cdc:	00000bfd 	.word	0x00000bfd

00000ce0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     ce0:	b570      	push	{r4, r5, r6, lr}
     ce2:	0004      	movs	r4, r0
     ce4:	000d      	movs	r5, r1
	ASSERT(rb && data);
     ce6:	2800      	cmp	r0, #0
     ce8:	d016      	beq.n	d18 <ringbuffer_get+0x38>
     cea:	2900      	cmp	r1, #0
     cec:	d012      	beq.n	d14 <ringbuffer_get+0x34>
     cee:	2001      	movs	r0, #1
     cf0:	2240      	movs	r2, #64	; 0x40
     cf2:	490c      	ldr	r1, [pc, #48]	; (d24 <ringbuffer_get+0x44>)
     cf4:	4b0c      	ldr	r3, [pc, #48]	; (d28 <ringbuffer_get+0x48>)
     cf6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     cf8:	68a3      	ldr	r3, [r4, #8]
     cfa:	68e2      	ldr	r2, [r4, #12]
     cfc:	429a      	cmp	r2, r3
     cfe:	d00d      	beq.n	d1c <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     d00:	6862      	ldr	r2, [r4, #4]
     d02:	4013      	ands	r3, r2
     d04:	6822      	ldr	r2, [r4, #0]
     d06:	5cd3      	ldrb	r3, [r2, r3]
     d08:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     d0a:	68a3      	ldr	r3, [r4, #8]
     d0c:	3301      	adds	r3, #1
     d0e:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     d10:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     d12:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     d14:	2000      	movs	r0, #0
     d16:	e7eb      	b.n	cf0 <ringbuffer_get+0x10>
     d18:	2000      	movs	r0, #0
     d1a:	e7e9      	b.n	cf0 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     d1c:	200a      	movs	r0, #10
     d1e:	4240      	negs	r0, r0
     d20:	e7f7      	b.n	d12 <ringbuffer_get+0x32>
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	000024a4 	.word	0x000024a4
     d28:	00000bfd 	.word	0x00000bfd

00000d2c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     d2c:	b570      	push	{r4, r5, r6, lr}
     d2e:	0004      	movs	r4, r0
     d30:	000d      	movs	r5, r1
	ASSERT(rb);
     d32:	1e43      	subs	r3, r0, #1
     d34:	4198      	sbcs	r0, r3
     d36:	b2c0      	uxtb	r0, r0
     d38:	2251      	movs	r2, #81	; 0x51
     d3a:	490a      	ldr	r1, [pc, #40]	; (d64 <ringbuffer_put+0x38>)
     d3c:	4b0a      	ldr	r3, [pc, #40]	; (d68 <ringbuffer_put+0x3c>)
     d3e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     d40:	6863      	ldr	r3, [r4, #4]
     d42:	68e2      	ldr	r2, [r4, #12]
     d44:	4013      	ands	r3, r2
     d46:	6822      	ldr	r2, [r4, #0]
     d48:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     d4a:	68e3      	ldr	r3, [r4, #12]
     d4c:	68a2      	ldr	r2, [r4, #8]
     d4e:	1a9a      	subs	r2, r3, r2
     d50:	6861      	ldr	r1, [r4, #4]
     d52:	428a      	cmp	r2, r1
     d54:	d901      	bls.n	d5a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     d56:	1a59      	subs	r1, r3, r1
     d58:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     d5a:	3301      	adds	r3, #1
     d5c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     d5e:	2000      	movs	r0, #0
     d60:	bd70      	pop	{r4, r5, r6, pc}
     d62:	46c0      	nop			; (mov r8, r8)
     d64:	000024a4 	.word	0x000024a4
     d68:	00000bfd 	.word	0x00000bfd

00000d6c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     d6c:	b510      	push	{r4, lr}
     d6e:	0004      	movs	r4, r0
	ASSERT(rb);
     d70:	1e43      	subs	r3, r0, #1
     d72:	4198      	sbcs	r0, r3
     d74:	b2c0      	uxtb	r0, r0
     d76:	2267      	movs	r2, #103	; 0x67
     d78:	4903      	ldr	r1, [pc, #12]	; (d88 <ringbuffer_num+0x1c>)
     d7a:	4b04      	ldr	r3, [pc, #16]	; (d8c <ringbuffer_num+0x20>)
     d7c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     d7e:	68e0      	ldr	r0, [r4, #12]
     d80:	68a3      	ldr	r3, [r4, #8]
     d82:	1ac0      	subs	r0, r0, r3
}
     d84:	bd10      	pop	{r4, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	000024a4 	.word	0x000024a4
     d8c:	00000bfd 	.word	0x00000bfd

00000d90 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     d90:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     d92:	4a06      	ldr	r2, [pc, #24]	; (dac <_sbrk+0x1c>)
     d94:	6812      	ldr	r2, [r2, #0]
     d96:	2a00      	cmp	r2, #0
     d98:	d004      	beq.n	da4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     d9a:	4a04      	ldr	r2, [pc, #16]	; (dac <_sbrk+0x1c>)
     d9c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     d9e:	18c3      	adds	r3, r0, r3
     da0:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     da2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     da4:	4902      	ldr	r1, [pc, #8]	; (db0 <_sbrk+0x20>)
     da6:	4a01      	ldr	r2, [pc, #4]	; (dac <_sbrk+0x1c>)
     da8:	6011      	str	r1, [r2, #0]
     daa:	e7f6      	b.n	d9a <_sbrk+0xa>
     dac:	200000ec 	.word	0x200000ec
     db0:	20002248 	.word	0x20002248

00000db4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     db4:	2001      	movs	r0, #1
     db6:	4240      	negs	r0, r0
     db8:	4770      	bx	lr

00000dba <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     dba:	2380      	movs	r3, #128	; 0x80
     dbc:	019b      	lsls	r3, r3, #6
     dbe:	604b      	str	r3, [r1, #4]

	return 0;
}
     dc0:	2000      	movs	r0, #0
     dc2:	4770      	bx	lr

00000dc4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     dc4:	2000      	movs	r0, #0
     dc6:	4770      	bx	lr

00000dc8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     dc8:	0103      	lsls	r3, r0, #4
     dca:	1a1b      	subs	r3, r3, r0
     dcc:	015a      	lsls	r2, r3, #5
     dce:	2064      	movs	r0, #100	; 0x64
     dd0:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     dd2:	4770      	bx	lr

00000dd4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     dd4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     dd6:	4a08      	ldr	r2, [pc, #32]	; (df8 <_init_chip+0x24>)
     dd8:	6853      	ldr	r3, [r2, #4]
     dda:	2106      	movs	r1, #6
     ddc:	430b      	orrs	r3, r1
     dde:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     de0:	4b06      	ldr	r3, [pc, #24]	; (dfc <_init_chip+0x28>)
     de2:	4798      	blx	r3
	_sysctrl_init_sources();
     de4:	4b06      	ldr	r3, [pc, #24]	; (e00 <_init_chip+0x2c>)
     de6:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     de8:	2008      	movs	r0, #8
     dea:	4c06      	ldr	r4, [pc, #24]	; (e04 <_init_chip+0x30>)
     dec:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     dee:	4b06      	ldr	r3, [pc, #24]	; (e08 <_init_chip+0x34>)
     df0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     df2:	20f7      	movs	r0, #247	; 0xf7
     df4:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     df6:	bd10      	pop	{r4, pc}
     df8:	41004000 	.word	0x41004000
     dfc:	00000e85 	.word	0x00000e85
     e00:	00001349 	.word	0x00001349
     e04:	00000e0d 	.word	0x00000e0d
     e08:	00001395 	.word	0x00001395

00000e0c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e0c:	07c3      	lsls	r3, r0, #31
     e0e:	d509      	bpl.n	e24 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     e10:	4b16      	ldr	r3, [pc, #88]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e12:	2280      	movs	r2, #128	; 0x80
     e14:	0052      	lsls	r2, r2, #1
     e16:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e18:	4a15      	ldr	r2, [pc, #84]	; (e70 <_gclk_init_generators_by_fref+0x64>)
     e1a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e1c:	4b13      	ldr	r3, [pc, #76]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e1e:	785b      	ldrb	r3, [r3, #1]
     e20:	09db      	lsrs	r3, r3, #7
     e22:	d1fb      	bne.n	e1c <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     e24:	0783      	lsls	r3, r0, #30
     e26:	d509      	bpl.n	e3c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     e28:	4b10      	ldr	r3, [pc, #64]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e2a:	2202      	movs	r2, #2
     e2c:	32ff      	adds	r2, #255	; 0xff
     e2e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e30:	4a10      	ldr	r2, [pc, #64]	; (e74 <_gclk_init_generators_by_fref+0x68>)
     e32:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e34:	4b0d      	ldr	r3, [pc, #52]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e36:	785b      	ldrb	r3, [r3, #1]
     e38:	09db      	lsrs	r3, r3, #7
     e3a:	d1fb      	bne.n	e34 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     e3c:	0743      	lsls	r3, r0, #29
     e3e:	d509      	bpl.n	e54 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     e40:	4b0a      	ldr	r3, [pc, #40]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e42:	2281      	movs	r2, #129	; 0x81
     e44:	0052      	lsls	r2, r2, #1
     e46:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e48:	4a0b      	ldr	r2, [pc, #44]	; (e78 <_gclk_init_generators_by_fref+0x6c>)
     e4a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e4c:	4b07      	ldr	r3, [pc, #28]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e4e:	785b      	ldrb	r3, [r3, #1]
     e50:	09db      	lsrs	r3, r3, #7
     e52:	d1fb      	bne.n	e4c <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     e54:	0703      	lsls	r3, r0, #28
     e56:	d508      	bpl.n	e6a <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
     e58:	4b04      	ldr	r3, [pc, #16]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e5a:	4a08      	ldr	r2, [pc, #32]	; (e7c <_gclk_init_generators_by_fref+0x70>)
     e5c:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e5e:	4a08      	ldr	r2, [pc, #32]	; (e80 <_gclk_init_generators_by_fref+0x74>)
     e60:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e62:	4b02      	ldr	r3, [pc, #8]	; (e6c <_gclk_init_generators_by_fref+0x60>)
     e64:	785b      	ldrb	r3, [r3, #1]
     e66:	09db      	lsrs	r3, r3, #7
     e68:	d1fb      	bne.n	e62 <_gclk_init_generators_by_fref+0x56>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     e6a:	4770      	bx	lr
     e6c:	40000c00 	.word	0x40000c00
     e70:	00010700 	.word	0x00010700
     e74:	00210301 	.word	0x00210301
     e78:	00210602 	.word	0x00210602
     e7c:	00007d03 	.word	0x00007d03
     e80:	00010603 	.word	0x00010603

00000e84 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     e84:	4b06      	ldr	r3, [pc, #24]	; (ea0 <_pm_init+0x1c>)
     e86:	7a1a      	ldrb	r2, [r3, #8]
     e88:	b2d2      	uxtb	r2, r2
     e8a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     e8c:	7a5a      	ldrb	r2, [r3, #9]
     e8e:	b2d2      	uxtb	r2, r2
     e90:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     e92:	7a9a      	ldrb	r2, [r3, #10]
     e94:	b2d2      	uxtb	r2, r2
     e96:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     e98:	7ada      	ldrb	r2, [r3, #11]
     e9a:	b2d2      	uxtb	r2, r2
     e9c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     e9e:	4770      	bx	lr
     ea0:	40000400 	.word	0x40000400

00000ea4 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     ea4:	b510      	push	{r4, lr}
     ea6:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     ea8:	68c3      	ldr	r3, [r0, #12]
     eaa:	7a1b      	ldrb	r3, [r3, #8]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     eac:	07db      	lsls	r3, r3, #31
     eae:	d506      	bpl.n	ebe <_rtc_timer_interrupt_handler+0x1a>
		if (dev->timer_cb.period_expired) {
     eb0:	6803      	ldr	r3, [r0, #0]
     eb2:	2b00      	cmp	r3, #0
     eb4:	d000      	beq.n	eb8 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     eb6:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     eb8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     eba:	2201      	movs	r2, #1
     ebc:	721a      	strb	r2, [r3, #8]
	}
}
     ebe:	bd10      	pop	{r4, pc}

00000ec0 <_timer_init>:
{
     ec0:	b570      	push	{r4, r5, r6, lr}
     ec2:	0004      	movs	r4, r0
     ec4:	000d      	movs	r5, r1
	ASSERT(dev);
     ec6:	1e43      	subs	r3, r0, #1
     ec8:	4198      	sbcs	r0, r3
     eca:	b2c0      	uxtb	r0, r0
     ecc:	2233      	movs	r2, #51	; 0x33
     ece:	4910      	ldr	r1, [pc, #64]	; (f10 <_timer_init+0x50>)
     ed0:	4b10      	ldr	r3, [pc, #64]	; (f14 <_timer_init+0x54>)
     ed2:	4798      	blx	r3
	dev->hw = hw;
     ed4:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     ed6:	2301      	movs	r3, #1
     ed8:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     eda:	7aab      	ldrb	r3, [r5, #10]
     edc:	09db      	lsrs	r3, r3, #7
     ede:	d1fc      	bne.n	eda <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
     ee0:	68e2      	ldr	r2, [r4, #12]
     ee2:	7a93      	ldrb	r3, [r2, #10]
     ee4:	09db      	lsrs	r3, r3, #7
     ee6:	d1fc      	bne.n	ee2 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     ee8:	3380      	adds	r3, #128	; 0x80
     eea:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     eec:	7a93      	ldrb	r3, [r2, #10]
     eee:	09db      	lsrs	r3, r3, #7
     ef0:	d1fc      	bne.n	eec <_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     ef2:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     ef4:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     ef6:	2320      	movs	r3, #32
     ef8:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     efa:	7a93      	ldrb	r3, [r2, #10]
     efc:	09db      	lsrs	r3, r3, #7
     efe:	d1fc      	bne.n	efa <_timer_init+0x3a>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     f00:	3301      	adds	r3, #1
     f02:	68e2      	ldr	r2, [r4, #12]
     f04:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
     f06:	4b04      	ldr	r3, [pc, #16]	; (f18 <_timer_init+0x58>)
     f08:	601c      	str	r4, [r3, #0]
}
     f0a:	2000      	movs	r0, #0
     f0c:	bd70      	pop	{r4, r5, r6, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	000024c8 	.word	0x000024c8
     f14:	00000bfd 	.word	0x00000bfd
     f18:	200000f0 	.word	0x200000f0

00000f1c <_timer_start>:
{
     f1c:	b510      	push	{r4, lr}
     f1e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     f20:	d020      	beq.n	f64 <_timer_start+0x48>
     f22:	68c3      	ldr	r3, [r0, #12]
     f24:	2b00      	cmp	r3, #0
     f26:	d01b      	beq.n	f60 <_timer_start+0x44>
     f28:	2001      	movs	r0, #1
     f2a:	226a      	movs	r2, #106	; 0x6a
     f2c:	490e      	ldr	r1, [pc, #56]	; (f68 <_timer_start+0x4c>)
     f2e:	4b0f      	ldr	r3, [pc, #60]	; (f6c <_timer_start+0x50>)
     f30:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f32:	2208      	movs	r2, #8
     f34:	4b0e      	ldr	r3, [pc, #56]	; (f70 <_timer_start+0x54>)
     f36:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
     f38:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     f3a:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
     f3c:	2300      	movs	r3, #0
     f3e:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f40:	7a93      	ldrb	r3, [r2, #10]
     f42:	09db      	lsrs	r3, r3, #7
     f44:	d1fc      	bne.n	f40 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
     f46:	68e2      	ldr	r2, [r4, #12]
     f48:	7a93      	ldrb	r3, [r2, #10]
     f4a:	09db      	lsrs	r3, r3, #7
     f4c:	d1fc      	bne.n	f48 <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     f4e:	8813      	ldrh	r3, [r2, #0]
     f50:	2102      	movs	r1, #2
     f52:	430b      	orrs	r3, r1
     f54:	b29b      	uxth	r3, r3
     f56:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f58:	7a93      	ldrb	r3, [r2, #10]
     f5a:	09db      	lsrs	r3, r3, #7
     f5c:	d1fc      	bne.n	f58 <_timer_start+0x3c>
}
     f5e:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     f60:	2000      	movs	r0, #0
     f62:	e7e2      	b.n	f2a <_timer_start+0xe>
     f64:	2000      	movs	r0, #0
     f66:	e7e0      	b.n	f2a <_timer_start+0xe>
     f68:	000024c8 	.word	0x000024c8
     f6c:	00000bfd 	.word	0x00000bfd
     f70:	e000e100 	.word	0xe000e100

00000f74 <_timer_is_started>:
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
     f74:	68c2      	ldr	r2, [r0, #12]
     f76:	7a93      	ldrb	r3, [r2, #10]
     f78:	09db      	lsrs	r3, r3, #7
     f7a:	d1fc      	bne.n	f76 <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     f7c:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
     f7e:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
     f80:	2001      	movs	r0, #1
     f82:	4018      	ands	r0, r3
}
     f84:	4770      	bx	lr

00000f86 <_timer_set_irq>:
}
     f86:	4770      	bx	lr

00000f88 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     f88:	2000      	movs	r0, #0
     f8a:	4770      	bx	lr

00000f8c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     f8c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     f8e:	4b02      	ldr	r3, [pc, #8]	; (f98 <RTC_Handler+0xc>)
     f90:	6818      	ldr	r0, [r3, #0]
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <RTC_Handler+0x10>)
     f94:	4798      	blx	r3
}
     f96:	bd10      	pop	{r4, pc}
     f98:	200000f0 	.word	0x200000f0
     f9c:	00000ea5 	.word	0x00000ea5

00000fa0 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     fa0:	4b02      	ldr	r3, [pc, #8]	; (fac <_sercom_get_hardware_index+0xc>)
     fa2:	469c      	mov	ip, r3
     fa4:	4460      	add	r0, ip
     fa6:	0a80      	lsrs	r0, r0, #10
     fa8:	b2c0      	uxtb	r0, r0
}
     faa:	4770      	bx	lr
     fac:	bdfff800 	.word	0xbdfff800

00000fb0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     fb0:	b510      	push	{r4, lr}
	void *hw = device->hw;
     fb2:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     fb4:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     fb6:	07db      	lsls	r3, r3, #31
     fb8:	d502      	bpl.n	fc0 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     fba:	7da3      	ldrb	r3, [r4, #22]
     fbc:	07db      	lsls	r3, r3, #31
     fbe:	d40f      	bmi.n	fe0 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     fc0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     fc2:	079b      	lsls	r3, r3, #30
     fc4:	d502      	bpl.n	fcc <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     fc6:	7da3      	ldrb	r3, [r4, #22]
     fc8:	079b      	lsls	r3, r3, #30
     fca:	d40e      	bmi.n	fea <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     fcc:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     fce:	075b      	lsls	r3, r3, #29
     fd0:	d515      	bpl.n	ffe <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     fd2:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     fd4:	2337      	movs	r3, #55	; 0x37
     fd6:	421a      	tst	r2, r3
     fd8:	d00c      	beq.n	ff4 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     fda:	3308      	adds	r3, #8
     fdc:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
     fde:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     fe0:	2301      	movs	r3, #1
     fe2:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     fe4:	6803      	ldr	r3, [r0, #0]
     fe6:	4798      	blx	r3
     fe8:	e7f9      	b.n	fde <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     fea:	2302      	movs	r3, #2
     fec:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     fee:	6883      	ldr	r3, [r0, #8]
     ff0:	4798      	blx	r3
     ff2:	e7f4      	b.n	fde <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     ff4:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     ff6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     ff8:	b2c9      	uxtb	r1, r1
     ffa:	4798      	blx	r3
     ffc:	e7ef      	b.n	fde <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     ffe:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1000:	09db      	lsrs	r3, r3, #7
    1002:	d0ec      	beq.n	fde <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1004:	2380      	movs	r3, #128	; 0x80
    1006:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    1008:	68c3      	ldr	r3, [r0, #12]
    100a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    100c:	8b63      	ldrh	r3, [r4, #26]
    100e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1010:	8363      	strh	r3, [r4, #26]
    1012:	e7e4      	b.n	fde <_sercom_usart_interrupt_handler+0x2e>

00001014 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    1014:	4b06      	ldr	r3, [pc, #24]	; (1030 <_sercom_init_irq_param+0x1c>)
    1016:	4298      	cmp	r0, r3
    1018:	d003      	beq.n	1022 <_sercom_init_irq_param+0xe>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
    101a:	4b06      	ldr	r3, [pc, #24]	; (1034 <_sercom_init_irq_param+0x20>)
    101c:	4298      	cmp	r0, r3
    101e:	d003      	beq.n	1028 <_sercom_init_irq_param+0x14>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}
}
    1020:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    1022:	4b05      	ldr	r3, [pc, #20]	; (1038 <_sercom_init_irq_param+0x24>)
    1024:	6019      	str	r1, [r3, #0]
    1026:	e7f8      	b.n	101a <_sercom_init_irq_param+0x6>
		_sercom4_dev = (struct _usart_async_device *)dev;
    1028:	4b03      	ldr	r3, [pc, #12]	; (1038 <_sercom_init_irq_param+0x24>)
    102a:	6059      	str	r1, [r3, #4]
}
    102c:	e7f8      	b.n	1020 <_sercom_init_irq_param+0xc>
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	42000800 	.word	0x42000800
    1034:	42001800 	.word	0x42001800
    1038:	200000f4 	.word	0x200000f4

0000103c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    103c:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    103e:	4b02      	ldr	r3, [pc, #8]	; (1048 <_sercom_get_irq_num+0xc>)
    1040:	4798      	blx	r3
    1042:	3009      	adds	r0, #9
    1044:	b2c0      	uxtb	r0, r0
}
    1046:	bd10      	pop	{r4, pc}
    1048:	00000fa1 	.word	0x00000fa1

0000104c <_get_sercom_index>:
{
    104c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    104e:	4b0c      	ldr	r3, [pc, #48]	; (1080 <_get_sercom_index+0x34>)
    1050:	4798      	blx	r3
    1052:	0001      	movs	r1, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1054:	2000      	movs	r0, #0
    1056:	2802      	cmp	r0, #2
    1058:	d809      	bhi.n	106e <_get_sercom_index+0x22>
		if (_usarts[i].number == sercom_offset) {
    105a:	0083      	lsls	r3, r0, #2
    105c:	181b      	adds	r3, r3, r0
    105e:	009a      	lsls	r2, r3, #2
    1060:	4b08      	ldr	r3, [pc, #32]	; (1084 <_get_sercom_index+0x38>)
    1062:	5cd3      	ldrb	r3, [r2, r3]
    1064:	4299      	cmp	r1, r3
    1066:	d009      	beq.n	107c <_get_sercom_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1068:	3001      	adds	r0, #1
    106a:	b2c0      	uxtb	r0, r0
    106c:	e7f3      	b.n	1056 <_get_sercom_index+0xa>
	ASSERT(false);
    106e:	2298      	movs	r2, #152	; 0x98
    1070:	0092      	lsls	r2, r2, #2
    1072:	4905      	ldr	r1, [pc, #20]	; (1088 <_get_sercom_index+0x3c>)
    1074:	2000      	movs	r0, #0
    1076:	4b05      	ldr	r3, [pc, #20]	; (108c <_get_sercom_index+0x40>)
    1078:	4798      	blx	r3
	return 0;
    107a:	2000      	movs	r0, #0
}
    107c:	bd10      	pop	{r4, pc}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	00000fa1 	.word	0x00000fa1
    1084:	000024e0 	.word	0x000024e0
    1088:	00002558 	.word	0x00002558
    108c:	00000bfd 	.word	0x00000bfd

00001090 <_usart_init>:
{
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    1094:	4b38      	ldr	r3, [pc, #224]	; (1178 <_usart_init+0xe8>)
    1096:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1098:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    109a:	07db      	lsls	r3, r3, #31
    109c:	d41d      	bmi.n	10da <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    109e:	0083      	lsls	r3, r0, #2
    10a0:	181b      	adds	r3, r3, r0
    10a2:	009a      	lsls	r2, r3, #2
    10a4:	4b35      	ldr	r3, [pc, #212]	; (117c <_usart_init+0xec>)
    10a6:	189b      	adds	r3, r3, r2
    10a8:	685a      	ldr	r2, [r3, #4]
    10aa:	231c      	movs	r3, #28
    10ac:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ae:	69e3      	ldr	r3, [r4, #28]
    10b0:	079b      	lsls	r3, r3, #30
    10b2:	d1fc      	bne.n	10ae <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    10b4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    10b6:	079b      	lsls	r3, r3, #30
    10b8:	d509      	bpl.n	10ce <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    10ba:	6823      	ldr	r3, [r4, #0]
    10bc:	2102      	movs	r1, #2
    10be:	438b      	bics	r3, r1
    10c0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10c2:	69e3      	ldr	r3, [r4, #28]
    10c4:	079b      	lsls	r3, r3, #30
    10c6:	d1fc      	bne.n	10c2 <_usart_init+0x32>
    10c8:	69e3      	ldr	r3, [r4, #28]
    10ca:	079b      	lsls	r3, r3, #30
    10cc:	d4fc      	bmi.n	10c8 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    10ce:	2301      	movs	r3, #1
    10d0:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10d4:	69e3      	ldr	r3, [r4, #28]
    10d6:	079b      	lsls	r3, r3, #30
    10d8:	d1fc      	bne.n	10d4 <_usart_init+0x44>
    10da:	69e3      	ldr	r3, [r4, #28]
    10dc:	07db      	lsls	r3, r3, #31
    10de:	d4fc      	bmi.n	10da <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    10e0:	0083      	lsls	r3, r0, #2
    10e2:	181b      	adds	r3, r3, r0
    10e4:	009a      	lsls	r2, r3, #2
    10e6:	4b25      	ldr	r3, [pc, #148]	; (117c <_usart_init+0xec>)
    10e8:	189b      	adds	r3, r3, r2
    10ea:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10ec:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ee:	69e3      	ldr	r3, [r4, #28]
    10f0:	079b      	lsls	r3, r3, #30
    10f2:	d1fc      	bne.n	10ee <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    10f4:	0083      	lsls	r3, r0, #2
    10f6:	181b      	adds	r3, r3, r0
    10f8:	009a      	lsls	r2, r3, #2
    10fa:	4b20      	ldr	r3, [pc, #128]	; (117c <_usart_init+0xec>)
    10fc:	189b      	adds	r3, r3, r2
    10fe:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1100:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1102:	69e3      	ldr	r3, [r4, #28]
    1104:	075b      	lsls	r3, r3, #29
    1106:	d1fc      	bne.n	1102 <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1108:	0083      	lsls	r3, r0, #2
    110a:	181b      	adds	r3, r3, r0
    110c:	009a      	lsls	r2, r3, #2
    110e:	4b1b      	ldr	r3, [pc, #108]	; (117c <_usart_init+0xec>)
    1110:	189b      	adds	r3, r3, r2
    1112:	685b      	ldr	r3, [r3, #4]
    1114:	049a      	lsls	r2, r3, #18
    1116:	d40b      	bmi.n	1130 <_usart_init+0xa0>
    1118:	22c0      	movs	r2, #192	; 0xc0
    111a:	01d2      	lsls	r2, r2, #7
    111c:	4213      	tst	r3, r2
    111e:	d107      	bne.n	1130 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1120:	0083      	lsls	r3, r0, #2
    1122:	181b      	adds	r3, r3, r0
    1124:	009a      	lsls	r2, r3, #2
    1126:	4b15      	ldr	r3, [pc, #84]	; (117c <_usart_init+0xec>)
    1128:	189b      	adds	r3, r3, r2
    112a:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    112c:	81a3      	strh	r3, [r4, #12]
    112e:	e015      	b.n	115c <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1130:	0083      	lsls	r3, r0, #2
    1132:	181b      	adds	r3, r3, r0
    1134:	009a      	lsls	r2, r3, #2
    1136:	4911      	ldr	r1, [pc, #68]	; (117c <_usart_init+0xec>)
    1138:	1889      	adds	r1, r1, r2
    113a:	898a      	ldrh	r2, [r1, #12]
    113c:	89a3      	ldrh	r3, [r4, #12]
    113e:	04d2      	lsls	r2, r2, #19
    1140:	0cd2      	lsrs	r2, r2, #19
    1142:	0b5b      	lsrs	r3, r3, #13
    1144:	035b      	lsls	r3, r3, #13
    1146:	4313      	orrs	r3, r2
    1148:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    114a:	7b8b      	ldrb	r3, [r1, #14]
    114c:	2207      	movs	r2, #7
    114e:	401a      	ands	r2, r3
    1150:	89a3      	ldrh	r3, [r4, #12]
    1152:	0352      	lsls	r2, r2, #13
    1154:	04db      	lsls	r3, r3, #19
    1156:	0cdb      	lsrs	r3, r3, #19
    1158:	4313      	orrs	r3, r2
    115a:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    115c:	4a07      	ldr	r2, [pc, #28]	; (117c <_usart_init+0xec>)
    115e:	0083      	lsls	r3, r0, #2
    1160:	181d      	adds	r5, r3, r0
    1162:	00a9      	lsls	r1, r5, #2
    1164:	000d      	movs	r5, r1
    1166:	1851      	adds	r1, r2, r1
    1168:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    116a:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    116c:	1952      	adds	r2, r2, r5
    116e:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1170:	2330      	movs	r3, #48	; 0x30
    1172:	54e2      	strb	r2, [r4, r3]
}
    1174:	2000      	movs	r0, #0
    1176:	bd70      	pop	{r4, r5, r6, pc}
    1178:	0000104d 	.word	0x0000104d
    117c:	000024e0 	.word	0x000024e0

00001180 <_usart_sync_init>:
{
    1180:	b570      	push	{r4, r5, r6, lr}
    1182:	0005      	movs	r5, r0
    1184:	000c      	movs	r4, r1
	ASSERT(device);
    1186:	1e43      	subs	r3, r0, #1
    1188:	4198      	sbcs	r0, r3
    118a:	b2c0      	uxtb	r0, r0
    118c:	22b8      	movs	r2, #184	; 0xb8
    118e:	4904      	ldr	r1, [pc, #16]	; (11a0 <_usart_sync_init+0x20>)
    1190:	4b04      	ldr	r3, [pc, #16]	; (11a4 <_usart_sync_init+0x24>)
    1192:	4798      	blx	r3
	device->hw = hw;
    1194:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1196:	0020      	movs	r0, r4
    1198:	4b03      	ldr	r3, [pc, #12]	; (11a8 <_usart_sync_init+0x28>)
    119a:	4798      	blx	r3
}
    119c:	bd70      	pop	{r4, r5, r6, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	00002558 	.word	0x00002558
    11a4:	00000bfd 	.word	0x00000bfd
    11a8:	00001091 	.word	0x00001091

000011ac <_usart_async_init>:
{
    11ac:	b570      	push	{r4, r5, r6, lr}
    11ae:	0006      	movs	r6, r0
    11b0:	000c      	movs	r4, r1
	ASSERT(device);
    11b2:	1e43      	subs	r3, r0, #1
    11b4:	4198      	sbcs	r0, r3
    11b6:	b2c0      	uxtb	r0, r0
    11b8:	22c6      	movs	r2, #198	; 0xc6
    11ba:	4919      	ldr	r1, [pc, #100]	; (1220 <_usart_async_init+0x74>)
    11bc:	4b19      	ldr	r3, [pc, #100]	; (1224 <_usart_async_init+0x78>)
    11be:	4798      	blx	r3
	init_status = _usart_init(hw);
    11c0:	0020      	movs	r0, r4
    11c2:	4b19      	ldr	r3, [pc, #100]	; (1228 <_usart_async_init+0x7c>)
    11c4:	4798      	blx	r3
    11c6:	1e05      	subs	r5, r0, #0
	if (init_status) {
    11c8:	d001      	beq.n	11ce <_usart_async_init+0x22>
}
    11ca:	0028      	movs	r0, r5
    11cc:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    11ce:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    11d0:	0031      	movs	r1, r6
    11d2:	0020      	movs	r0, r4
    11d4:	4b15      	ldr	r3, [pc, #84]	; (122c <_usart_async_init+0x80>)
    11d6:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    11d8:	0020      	movs	r0, r4
    11da:	4b15      	ldr	r3, [pc, #84]	; (1230 <_usart_async_init+0x84>)
    11dc:	4798      	blx	r3
    11de:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11e0:	2b00      	cmp	r3, #0
    11e2:	db0a      	blt.n	11fa <_usart_async_init+0x4e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11e4:	211f      	movs	r1, #31
    11e6:	4001      	ands	r1, r0
    11e8:	2201      	movs	r2, #1
    11ea:	408a      	lsls	r2, r1
    11ec:	2180      	movs	r1, #128	; 0x80
    11ee:	4c11      	ldr	r4, [pc, #68]	; (1234 <_usart_async_init+0x88>)
    11f0:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    11f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11f6:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11fa:	2b00      	cmp	r3, #0
    11fc:	db07      	blt.n	120e <_usart_async_init+0x62>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11fe:	211f      	movs	r1, #31
    1200:	4001      	ands	r1, r0
    1202:	2201      	movs	r2, #1
    1204:	408a      	lsls	r2, r1
    1206:	21c0      	movs	r1, #192	; 0xc0
    1208:	0049      	lsls	r1, r1, #1
    120a:	4c0a      	ldr	r4, [pc, #40]	; (1234 <_usart_async_init+0x88>)
    120c:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    120e:	2b00      	cmp	r3, #0
    1210:	dbdb      	blt.n	11ca <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1212:	231f      	movs	r3, #31
    1214:	4018      	ands	r0, r3
    1216:	3b1e      	subs	r3, #30
    1218:	4083      	lsls	r3, r0
    121a:	4a06      	ldr	r2, [pc, #24]	; (1234 <_usart_async_init+0x88>)
    121c:	6013      	str	r3, [r2, #0]
    121e:	e7d4      	b.n	11ca <_usart_async_init+0x1e>
    1220:	00002558 	.word	0x00002558
    1224:	00000bfd 	.word	0x00000bfd
    1228:	00001091 	.word	0x00001091
    122c:	00001015 	.word	0x00001015
    1230:	0000103d 	.word	0x0000103d
    1234:	e000e100 	.word	0xe000e100

00001238 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1238:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    123a:	6813      	ldr	r3, [r2, #0]
    123c:	2102      	movs	r1, #2
    123e:	430b      	orrs	r3, r1
    1240:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1242:	69d3      	ldr	r3, [r2, #28]
    1244:	079b      	lsls	r3, r3, #30
    1246:	d1fc      	bne.n	1242 <_usart_sync_enable+0xa>
}
    1248:	4770      	bx	lr

0000124a <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    124a:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    124c:	6813      	ldr	r3, [r2, #0]
    124e:	2102      	movs	r1, #2
    1250:	430b      	orrs	r3, r1
    1252:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1254:	69d3      	ldr	r3, [r2, #28]
    1256:	079b      	lsls	r3, r3, #30
    1258:	d1fc      	bne.n	1254 <_usart_async_enable+0xa>
}
    125a:	4770      	bx	lr

0000125c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    125c:	6803      	ldr	r3, [r0, #0]
    125e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1260:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1262:	4770      	bx	lr

00001264 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1264:	6983      	ldr	r3, [r0, #24]
    1266:	b289      	uxth	r1, r1
    1268:	8519      	strh	r1, [r3, #40]	; 0x28
}
    126a:	4770      	bx	lr

0000126c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    126c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    126e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1270:	b2c0      	uxtb	r0, r0
}
    1272:	4770      	bx	lr

00001274 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1274:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1276:	7e18      	ldrb	r0, [r3, #24]
    1278:	2301      	movs	r3, #1
    127a:	4018      	ands	r0, r3
}
    127c:	4770      	bx	lr

0000127e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    127e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1280:	7e1b      	ldrb	r3, [r3, #24]
    1282:	085b      	lsrs	r3, r3, #1
    1284:	2001      	movs	r0, #1
    1286:	4018      	ands	r0, r3
}
    1288:	4770      	bx	lr

0000128a <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    128a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    128c:	7e1b      	ldrb	r3, [r3, #24]
    128e:	089b      	lsrs	r3, r3, #2
    1290:	2001      	movs	r0, #1
    1292:	4018      	ands	r0, r3
}
    1294:	4770      	bx	lr

00001296 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1296:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1298:	2201      	movs	r2, #1
    129a:	759a      	strb	r2, [r3, #22]
}
    129c:	4770      	bx	lr

0000129e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    129e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    12a0:	2202      	movs	r2, #2
    12a2:	759a      	strb	r2, [r3, #22]
}
    12a4:	4770      	bx	lr
	...

000012a8 <_usart_async_set_irq_state>:
{
    12a8:	b570      	push	{r4, r5, r6, lr}
    12aa:	0004      	movs	r4, r0
    12ac:	000d      	movs	r5, r1
    12ae:	0016      	movs	r6, r2
	ASSERT(device);
    12b0:	1e43      	subs	r3, r0, #1
    12b2:	4198      	sbcs	r0, r3
    12b4:	b2c0      	uxtb	r0, r0
    12b6:	2288      	movs	r2, #136	; 0x88
    12b8:	0092      	lsls	r2, r2, #2
    12ba:	4917      	ldr	r1, [pc, #92]	; (1318 <_usart_async_set_irq_state+0x70>)
    12bc:	4b17      	ldr	r3, [pc, #92]	; (131c <_usart_async_set_irq_state+0x74>)
    12be:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    12c0:	2d00      	cmp	r5, #0
    12c2:	d00b      	beq.n	12dc <_usart_async_set_irq_state+0x34>
    12c4:	2d02      	cmp	r5, #2
    12c6:	d009      	beq.n	12dc <_usart_async_set_irq_state+0x34>
	} else if (USART_ASYNC_RX_DONE == type) {
    12c8:	2d01      	cmp	r5, #1
    12ca:	d018      	beq.n	12fe <_usart_async_set_irq_state+0x56>
	} else if (USART_ASYNC_ERROR == type) {
    12cc:	2d03      	cmp	r5, #3
    12ce:	d10f      	bne.n	12f0 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    12d0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12d2:	2e00      	cmp	r6, #0
    12d4:	d01c      	beq.n	1310 <_usart_async_set_irq_state+0x68>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    12d6:	2280      	movs	r2, #128	; 0x80
    12d8:	759a      	strb	r2, [r3, #22]
}
    12da:	e009      	b.n	12f0 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    12dc:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12de:	2e00      	cmp	r6, #0
    12e0:	d107      	bne.n	12f2 <_usart_async_set_irq_state+0x4a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    12e2:	2201      	movs	r2, #1
    12e4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    12e6:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12e8:	2e00      	cmp	r6, #0
    12ea:	d105      	bne.n	12f8 <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    12ec:	2202      	movs	r2, #2
    12ee:	751a      	strb	r2, [r3, #20]
}
    12f0:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    12f2:	2201      	movs	r2, #1
    12f4:	759a      	strb	r2, [r3, #22]
    12f6:	e7f6      	b.n	12e6 <_usart_async_set_irq_state+0x3e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    12f8:	2202      	movs	r2, #2
    12fa:	759a      	strb	r2, [r3, #22]
    12fc:	e7f8      	b.n	12f0 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    12fe:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    1300:	2e00      	cmp	r6, #0
    1302:	d102      	bne.n	130a <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1304:	2204      	movs	r2, #4
    1306:	751a      	strb	r2, [r3, #20]
    1308:	e7f2      	b.n	12f0 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    130a:	2204      	movs	r2, #4
    130c:	759a      	strb	r2, [r3, #22]
    130e:	e7ef      	b.n	12f0 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1310:	2280      	movs	r2, #128	; 0x80
    1312:	751a      	strb	r2, [r3, #20]
    1314:	e7ec      	b.n	12f0 <_usart_async_set_irq_state+0x48>
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	00002558 	.word	0x00002558
    131c:	00000bfd 	.word	0x00000bfd

00001320 <SERCOM0_Handler>:

	return NULL;
}

void SERCOM0_Handler(void)
{
    1320:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    1322:	4b02      	ldr	r3, [pc, #8]	; (132c <SERCOM0_Handler+0xc>)
    1324:	6818      	ldr	r0, [r3, #0]
    1326:	4b02      	ldr	r3, [pc, #8]	; (1330 <SERCOM0_Handler+0x10>)
    1328:	4798      	blx	r3
}
    132a:	bd10      	pop	{r4, pc}
    132c:	200000f4 	.word	0x200000f4
    1330:	00000fb1 	.word	0x00000fb1

00001334 <SERCOM4_Handler>:

void SERCOM4_Handler(void)
{
    1334:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1336:	4b02      	ldr	r3, [pc, #8]	; (1340 <SERCOM4_Handler+0xc>)
    1338:	6858      	ldr	r0, [r3, #4]
    133a:	4b02      	ldr	r3, [pc, #8]	; (1344 <SERCOM4_Handler+0x10>)
    133c:	4798      	blx	r3
}
    133e:	bd10      	pop	{r4, pc}
    1340:	200000f4 	.word	0x200000f4
    1344:	00000fb1 	.word	0x00000fb1

00001348 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1348:	4b10      	ldr	r3, [pc, #64]	; (138c <_sysctrl_init_sources+0x44>)
    134a:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    134c:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    134e:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1350:	0f92      	lsrs	r2, r2, #30
    1352:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1354:	0409      	lsls	r1, r1, #16
    1356:	480e      	ldr	r0, [pc, #56]	; (1390 <_sysctrl_init_sources+0x48>)
    1358:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    135a:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    135c:	21a1      	movs	r1, #161	; 0xa1
    135e:	0049      	lsls	r1, r1, #1
    1360:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1362:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1364:	699a      	ldr	r2, [r3, #24]
    1366:	3941      	subs	r1, #65	; 0x41
    1368:	39ff      	subs	r1, #255	; 0xff
    136a:	430a      	orrs	r2, r1
    136c:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    136e:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1370:	311d      	adds	r1, #29
    1372:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1374:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1376:	4b05      	ldr	r3, [pc, #20]	; (138c <_sysctrl_init_sources+0x44>)
    1378:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    137a:	071b      	lsls	r3, r3, #28
    137c:	d5fb      	bpl.n	1376 <_sysctrl_init_sources+0x2e>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    137e:	4a03      	ldr	r2, [pc, #12]	; (138c <_sysctrl_init_sources+0x44>)
    1380:	6a13      	ldr	r3, [r2, #32]
    1382:	2180      	movs	r1, #128	; 0x80
    1384:	430b      	orrs	r3, r1
    1386:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1388:	4770      	bx	lr
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	40000800 	.word	0x40000800
    1390:	0fff0000 	.word	0x0fff0000

00001394 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    1394:	2286      	movs	r2, #134	; 0x86
    1396:	01d2      	lsls	r2, r2, #7
    1398:	4b1c      	ldr	r3, [pc, #112]	; (140c <_sysctrl_init_referenced_generators+0x78>)
    139a:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    139c:	2202      	movs	r2, #2
    139e:	4b1c      	ldr	r3, [pc, #112]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    13a0:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    13a2:	4b1b      	ldr	r3, [pc, #108]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    13a4:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    13a6:	06db      	lsls	r3, r3, #27
    13a8:	d5fb      	bpl.n	13a2 <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    13aa:	4a1a      	ldr	r2, [pc, #104]	; (1414 <_sysctrl_init_referenced_generators+0x80>)
    13ac:	4b18      	ldr	r3, [pc, #96]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    13ae:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13b0:	4b19      	ldr	r3, [pc, #100]	; (1418 <_sysctrl_init_referenced_generators+0x84>)
    13b2:	681b      	ldr	r3, [r3, #0]
    13b4:	0e9b      	lsrs	r3, r3, #26
    13b6:	2b3f      	cmp	r3, #63	; 0x3f
    13b8:	d020      	beq.n	13fc <_sysctrl_init_referenced_generators+0x68>
    13ba:	029b      	lsls	r3, r3, #10
    13bc:	2280      	movs	r2, #128	; 0x80
    13be:	0092      	lsls	r2, r2, #2
    13c0:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    13c2:	4a13      	ldr	r2, [pc, #76]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    13c4:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    13c6:	2306      	movs	r3, #6
    13c8:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    13ca:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    13cc:	075b      	lsls	r3, r3, #29
    13ce:	d518      	bpl.n	1402 <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    13d0:	4b0f      	ldr	r3, [pc, #60]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    13d2:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    13d4:	23d0      	movs	r3, #208	; 0xd0
    13d6:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    13d8:	2bd0      	cmp	r3, #208	; 0xd0
    13da:	d1f9      	bne.n	13d0 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    13dc:	4a0c      	ldr	r2, [pc, #48]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    13de:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    13e0:	2180      	movs	r1, #128	; 0x80
    13e2:	430b      	orrs	r3, r1
    13e4:	b29b      	uxth	r3, r3
    13e6:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    13e8:	4b08      	ldr	r3, [pc, #32]	; (140c <_sysctrl_init_referenced_generators+0x78>)
    13ea:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    13ec:	09db      	lsrs	r3, r3, #7
    13ee:	d1fb      	bne.n	13e8 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    13f0:	4a07      	ldr	r2, [pc, #28]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    13f2:	6993      	ldr	r3, [r2, #24]
    13f4:	2102      	movs	r1, #2
    13f6:	438b      	bics	r3, r1
    13f8:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    13fa:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13fc:	23fc      	movs	r3, #252	; 0xfc
    13fe:	01db      	lsls	r3, r3, #7
    1400:	e7df      	b.n	13c2 <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1402:	4b03      	ldr	r3, [pc, #12]	; (1410 <_sysctrl_init_referenced_generators+0x7c>)
    1404:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1406:	06db      	lsls	r3, r3, #27
    1408:	d5fb      	bpl.n	1402 <_sysctrl_init_referenced_generators+0x6e>
    140a:	e7e7      	b.n	13dc <_sysctrl_init_referenced_generators+0x48>
    140c:	40000c00 	.word	0x40000c00
    1410:	40000800 	.word	0x40000800
    1414:	280a05dc 	.word	0x280a05dc
    1418:	00806024 	.word	0x00806024

0000141c <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    141c:	4b02      	ldr	r3, [pc, #8]	; (1428 <_system_time_init+0xc>)
    141e:	4a03      	ldr	r2, [pc, #12]	; (142c <_system_time_init+0x10>)
    1420:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1422:	2205      	movs	r2, #5
    1424:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1426:	4770      	bx	lr
    1428:	e000e010 	.word	0xe000e010
    142c:	00ffffff 	.word	0x00ffffff

00001430 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1430:	b510      	push	{r4, lr}
	_system_time_init(hw);
    1432:	4b01      	ldr	r3, [pc, #4]	; (1438 <_delay_init+0x8>)
    1434:	4798      	blx	r3
}
    1436:	bd10      	pop	{r4, pc}
    1438:	0000141d 	.word	0x0000141d

0000143c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    143c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    143e:	e00b      	b.n	1458 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    1440:	4b0b      	ldr	r3, [pc, #44]	; (1470 <_delay_cycles+0x34>)
    1442:	480c      	ldr	r0, [pc, #48]	; (1474 <_delay_cycles+0x38>)
    1444:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    1446:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1448:	4b09      	ldr	r3, [pc, #36]	; (1470 <_delay_cycles+0x34>)
    144a:	681b      	ldr	r3, [r3, #0]
    144c:	03db      	lsls	r3, r3, #15
    144e:	d5fb      	bpl.n	1448 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    1450:	4b09      	ldr	r3, [pc, #36]	; (1478 <_delay_cycles+0x3c>)
    1452:	469c      	mov	ip, r3
    1454:	4461      	add	r1, ip
	while (n--) {
    1456:	0010      	movs	r0, r2
    1458:	1e42      	subs	r2, r0, #1
    145a:	b2d2      	uxtb	r2, r2
    145c:	2800      	cmp	r0, #0
    145e:	d1ef      	bne.n	1440 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1460:	4b03      	ldr	r3, [pc, #12]	; (1470 <_delay_cycles+0x34>)
    1462:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1464:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1466:	4b02      	ldr	r3, [pc, #8]	; (1470 <_delay_cycles+0x34>)
    1468:	681b      	ldr	r3, [r3, #0]
    146a:	03db      	lsls	r3, r3, #15
    146c:	d5fb      	bpl.n	1466 <_delay_cycles+0x2a>
		;
}
    146e:	4770      	bx	lr
    1470:	e000e010 	.word	0xe000e010
    1474:	00ffffff 	.word	0x00ffffff
    1478:	ff000001 	.word	0xff000001

0000147c <main>:
#include <atmel_start.h>
#include <TuyaMCU/wifi.h>
#include <Usart_test.h>

int main(void)
{
    147c:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    147e:	4b07      	ldr	r3, [pc, #28]	; (149c <main+0x20>)
    1480:	4798      	blx	r3
	//wifi_protocol_init();
	uart_init();
    1482:	4b07      	ldr	r3, [pc, #28]	; (14a0 <main+0x24>)
    1484:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
		//wifi_uart_service();
		Uart_PutChar('a');
    1486:	2061      	movs	r0, #97	; 0x61
    1488:	4c06      	ldr	r4, [pc, #24]	; (14a4 <main+0x28>)
    148a:	47a0      	blx	r4
		Uart_PutChar('\n');
    148c:	200a      	movs	r0, #10
    148e:	47a0      	blx	r4
		delay_ms(1000);
    1490:	20fa      	movs	r0, #250	; 0xfa
    1492:	0080      	lsls	r0, r0, #2
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <main+0x2c>)
    1496:	4798      	blx	r3
    1498:	e7f5      	b.n	1486 <main+0xa>
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	00000115 	.word	0x00000115
    14a0:	000016bd 	.word	0x000016bd
    14a4:	000016f5 	.word	0x000016f5
    14a8:	000004a5 	.word	0x000004a5

000014ac <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
    14ac:	b510      	push	{r4, lr}
	usart_async_enable(&USART);
    14ae:	4802      	ldr	r0, [pc, #8]	; (14b8 <datastreamer_init+0xc>)
    14b0:	4b02      	ldr	r3, [pc, #8]	; (14bc <datastreamer_init+0x10>)
    14b2:	4798      	blx	r3
}
    14b4:	bd10      	pop	{r4, pc}
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	200001b4 	.word	0x200001b4
    14bc:	000009d1 	.word	0x000009d1

000014c0 <touch_sensors_config>:
Output : none
Notes  :
============================================================================*/
/* Touch sensors config - assign nodes to buttons / wheels / sliders / surfaces / water level / etc */
static touch_ret_t touch_sensors_config(void)
{
    14c0:	b570      	push	{r4, r5, r6, lr}
	uint16_t    sensor_nodes;
	touch_ret_t touch_ret = TOUCH_SUCCESS;

	/* Init acquisition module */
	qtm_ptc_init_acquisition_module(&qtlib_acq_set1);
    14c2:	4813      	ldr	r0, [pc, #76]	; (1510 <touch_sensors_config+0x50>)
    14c4:	4b13      	ldr	r3, [pc, #76]	; (1514 <touch_sensors_config+0x54>)
    14c6:	4798      	blx	r3

	/* Init pointers to DMA sequence memory */
	qtm_ptc_qtlib_assign_signal_memory(&touch_acq_signals_raw[0]);
    14c8:	4813      	ldr	r0, [pc, #76]	; (1518 <touch_sensors_config+0x58>)
    14ca:	4b14      	ldr	r3, [pc, #80]	; (151c <touch_sensors_config+0x5c>)
    14cc:	4798      	blx	r3

	/* Initialize sensor nodes */
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    14ce:	2400      	movs	r4, #0
    14d0:	e00a      	b.n	14e8 <touch_sensors_config+0x28>
		/* Enable each node for measurement and mark for calibration */
		qtm_enable_sensor_node(&qtlib_acq_set1, sensor_nodes);
    14d2:	4d0f      	ldr	r5, [pc, #60]	; (1510 <touch_sensors_config+0x50>)
    14d4:	0021      	movs	r1, r4
    14d6:	0028      	movs	r0, r5
    14d8:	4b11      	ldr	r3, [pc, #68]	; (1520 <touch_sensors_config+0x60>)
    14da:	4798      	blx	r3
		qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_nodes);
    14dc:	0021      	movs	r1, r4
    14de:	0028      	movs	r0, r5
    14e0:	4b10      	ldr	r3, [pc, #64]	; (1524 <touch_sensors_config+0x64>)
    14e2:	4798      	blx	r3
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    14e4:	3401      	adds	r4, #1
    14e6:	b2a4      	uxth	r4, r4
    14e8:	2c01      	cmp	r4, #1
    14ea:	d9f2      	bls.n	14d2 <touch_sensors_config+0x12>
    14ec:	2400      	movs	r4, #0
    14ee:	e00b      	b.n	1508 <touch_sensors_config+0x48>
	}

	/* Enable sensor keys and assign nodes */
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
		qtm_init_sensor_key(&qtlib_key_set1, sensor_nodes, &ptc_qtlib_node_stat1[sensor_nodes]);
    14f0:	0063      	lsls	r3, r4, #1
    14f2:	191b      	adds	r3, r3, r4
    14f4:	005a      	lsls	r2, r3, #1
    14f6:	4b0c      	ldr	r3, [pc, #48]	; (1528 <touch_sensors_config+0x68>)
    14f8:	18d2      	adds	r2, r2, r3
    14fa:	b2e1      	uxtb	r1, r4
    14fc:	4804      	ldr	r0, [pc, #16]	; (1510 <touch_sensors_config+0x50>)
    14fe:	300c      	adds	r0, #12
    1500:	4b0a      	ldr	r3, [pc, #40]	; (152c <touch_sensors_config+0x6c>)
    1502:	4798      	blx	r3
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    1504:	3401      	adds	r4, #1
    1506:	b2a4      	uxth	r4, r4
    1508:	2c01      	cmp	r4, #1
    150a:	d9f1      	bls.n	14f0 <touch_sensors_config+0x30>
	}

	return (touch_ret);
}
    150c:	2000      	movs	r0, #0
    150e:	bd70      	pop	{r4, r5, r6, pc}
    1510:	20000000 	.word	0x20000000
    1514:	00001989 	.word	0x00001989
    1518:	20000218 	.word	0x20000218
    151c:	00001ab5 	.word	0x00001ab5
    1520:	00001ac9 	.word	0x00001ac9
    1524:	00001ae9 	.word	0x00001ae9
    1528:	2000020c 	.word	0x2000020c
    152c:	00001749 	.word	0x00001749

00001530 <touch_timer_handler>:
Input  : none
Output : none
Notes  :
============================================================================*/
void touch_timer_handler(void)
{
    1530:	b510      	push	{r4, lr}
	/* Count complete - Measure touch sensors */
	time_to_measure_touch_flag = 1u;
    1532:	2201      	movs	r2, #1
    1534:	4b02      	ldr	r3, [pc, #8]	; (1540 <touch_timer_handler+0x10>)
    1536:	709a      	strb	r2, [r3, #2]
	qtm_update_qtlib_timer(DEF_TOUCH_MEASUREMENT_PERIOD_MS);
    1538:	2014      	movs	r0, #20
    153a:	4b02      	ldr	r3, [pc, #8]	; (1544 <touch_timer_handler+0x14>)
    153c:	4798      	blx	r3
}
    153e:	bd10      	pop	{r4, pc}
    1540:	200000fc 	.word	0x200000fc
    1544:	00001739 	.word	0x00001739

00001548 <Timer_task_cb>:

void Timer_task_cb(const struct timer_task *const timer_task)
{
    1548:	b510      	push	{r4, lr}
	touch_timer_handler();
    154a:	4b01      	ldr	r3, [pc, #4]	; (1550 <Timer_task_cb+0x8>)
    154c:	4798      	blx	r3
}
    154e:	bd10      	pop	{r4, pc}
    1550:	00001531 	.word	0x00001531

00001554 <touch_timer_config>:

void touch_timer_config(void)
{
    1554:	b570      	push	{r4, r5, r6, lr}
	static struct timer_task Timer_task;
	static uint8_t           timer_task_added = 0;

	if (timer_task_added) {
    1556:	4b0e      	ldr	r3, [pc, #56]	; (1590 <touch_timer_config+0x3c>)
    1558:	791b      	ldrb	r3, [r3, #4]
    155a:	2b00      	cmp	r3, #0
    155c:	d111      	bne.n	1582 <touch_timer_config+0x2e>
		timer_remove_task(&Timer, &Timer_task);
	}
#if (KRONO_GESTURE_ENABLE == 1u)
	Timer_task.interval = 1;
#else
	Timer_task.interval = DEF_TOUCH_MEASUREMENT_PERIOD_MS;
    155e:	4c0c      	ldr	r4, [pc, #48]	; (1590 <touch_timer_config+0x3c>)
    1560:	2314      	movs	r3, #20
    1562:	6123      	str	r3, [r4, #16]
#endif
	Timer_task.cb   = Timer_task_cb;
    1564:	4b0b      	ldr	r3, [pc, #44]	; (1594 <touch_timer_config+0x40>)
    1566:	6163      	str	r3, [r4, #20]
	Timer_task.mode = TIMER_TASK_REPEAT;
    1568:	2601      	movs	r6, #1
    156a:	7626      	strb	r6, [r4, #24]

	timer_add_task(&Timer, &Timer_task);
    156c:	0021      	movs	r1, r4
    156e:	3108      	adds	r1, #8
    1570:	4d09      	ldr	r5, [pc, #36]	; (1598 <touch_timer_config+0x44>)
    1572:	0028      	movs	r0, r5
    1574:	4b09      	ldr	r3, [pc, #36]	; (159c <touch_timer_config+0x48>)
    1576:	4798      	blx	r3
	timer_task_added = 1;
    1578:	7126      	strb	r6, [r4, #4]
	timer_start(&Timer);
    157a:	0028      	movs	r0, r5
    157c:	4b08      	ldr	r3, [pc, #32]	; (15a0 <touch_timer_config+0x4c>)
    157e:	4798      	blx	r3
}
    1580:	bd70      	pop	{r4, r5, r6, pc}
		timer_remove_task(&Timer, &Timer_task);
    1582:	4903      	ldr	r1, [pc, #12]	; (1590 <touch_timer_config+0x3c>)
    1584:	3108      	adds	r1, #8
    1586:	4804      	ldr	r0, [pc, #16]	; (1598 <touch_timer_config+0x44>)
    1588:	4b06      	ldr	r3, [pc, #24]	; (15a4 <touch_timer_config+0x50>)
    158a:	4798      	blx	r3
    158c:	e7e7      	b.n	155e <touch_timer_config+0xa>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	200000fc 	.word	0x200000fc
    1594:	00001549 	.word	0x00001549
    1598:	20000198 	.word	0x20000198
    159c:	00000671 	.word	0x00000671
    15a0:	00000635 	.word	0x00000635
    15a4:	00000721 	.word	0x00000721

000015a8 <touch_init>:
{
    15a8:	b510      	push	{r4, lr}
	touch_timer_config();
    15aa:	4b03      	ldr	r3, [pc, #12]	; (15b8 <touch_init+0x10>)
    15ac:	4798      	blx	r3
	touch_sensors_config();
    15ae:	4b03      	ldr	r3, [pc, #12]	; (15bc <touch_init+0x14>)
    15b0:	4798      	blx	r3
	datastreamer_init();
    15b2:	4b03      	ldr	r3, [pc, #12]	; (15c0 <touch_init+0x18>)
    15b4:	4798      	blx	r3
}
    15b6:	bd10      	pop	{r4, pc}
    15b8:	00001555 	.word	0x00001555
    15bc:	000014c1 	.word	0x000014c1
    15c0:	000014ad 	.word	0x000014ad

000015c4 <PTC_Handler>:
Input  : none
Output : none
Notes  : none
============================================================================*/
void PTC_Handler(void)
{
    15c4:	b510      	push	{r4, lr}
	qtm_ptc_clear_interrupt();
    15c6:	4b02      	ldr	r3, [pc, #8]	; (15d0 <PTC_Handler+0xc>)
    15c8:	4798      	blx	r3
	qtm_samd21_ptc_handler_eoc();
    15ca:	4b02      	ldr	r3, [pc, #8]	; (15d4 <PTC_Handler+0x10>)
    15cc:	4798      	blx	r3
}
    15ce:	bd10      	pop	{r4, pc}
    15d0:	00001b39 	.word	0x00001b39
    15d4:	00001b5d 	.word	0x00001b5d

000015d8 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    15d8:	b510      	push	{r4, lr}
    15da:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    15dc:	2800      	cmp	r0, #0
    15de:	d109      	bne.n	15f4 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    15e0:	0011      	movs	r1, r2
    15e2:	0018      	movs	r0, r3
    15e4:	4b05      	ldr	r3, [pc, #20]	; (15fc <_read+0x24>)
    15e6:	4798      	blx	r3
	if (n < 0) {
    15e8:	2800      	cmp	r0, #0
    15ea:	db00      	blt.n	15ee <_read+0x16>
		return -1;
	}

	return n;
}
    15ec:	bd10      	pop	{r4, pc}
		return -1;
    15ee:	2001      	movs	r0, #1
    15f0:	4240      	negs	r0, r0
    15f2:	e7fb      	b.n	15ec <_read+0x14>
		return -1;
    15f4:	2001      	movs	r0, #1
    15f6:	4240      	negs	r0, r0
    15f8:	e7f8      	b.n	15ec <_read+0x14>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00001655 	.word	0x00001655

00001600 <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    1600:	b510      	push	{r4, lr}
    1602:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1604:	3801      	subs	r0, #1
    1606:	2802      	cmp	r0, #2
    1608:	d809      	bhi.n	161e <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    160a:	0011      	movs	r1, r2
    160c:	0018      	movs	r0, r3
    160e:	4b05      	ldr	r3, [pc, #20]	; (1624 <_write+0x24>)
    1610:	4798      	blx	r3
	if (n < 0) {
    1612:	2800      	cmp	r0, #0
    1614:	db00      	blt.n	1618 <_write+0x18>
		return -1;
	}

	return n;
}
    1616:	bd10      	pop	{r4, pc}
		return -1;
    1618:	2001      	movs	r0, #1
    161a:	4240      	negs	r0, r0
    161c:	e7fb      	b.n	1616 <_write+0x16>
		return -1;
    161e:	2001      	movs	r0, #1
    1620:	4240      	negs	r0, r0
    1622:	e7f8      	b.n	1616 <_write+0x16>
    1624:	00001679 	.word	0x00001679

00001628 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1628:	b570      	push	{r4, r5, r6, lr}
    162a:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    162c:	4d06      	ldr	r5, [pc, #24]	; (1648 <stdio_io_init+0x20>)
    162e:	682b      	ldr	r3, [r5, #0]
    1630:	6898      	ldr	r0, [r3, #8]
    1632:	2100      	movs	r1, #0
    1634:	4c05      	ldr	r4, [pc, #20]	; (164c <stdio_io_init+0x24>)
    1636:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1638:	682b      	ldr	r3, [r5, #0]
    163a:	6858      	ldr	r0, [r3, #4]
    163c:	2100      	movs	r1, #0
    163e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1640:	4b03      	ldr	r3, [pc, #12]	; (1650 <stdio_io_init+0x28>)
    1642:	601e      	str	r6, [r3, #0]
}
    1644:	bd70      	pop	{r4, r5, r6, pc}
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	20000048 	.word	0x20000048
    164c:	00001c61 	.word	0x00001c61
    1650:	20000118 	.word	0x20000118

00001654 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1654:	b510      	push	{r4, lr}
    1656:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1658:	4b05      	ldr	r3, [pc, #20]	; (1670 <stdio_io_read+0x1c>)
    165a:	6818      	ldr	r0, [r3, #0]
    165c:	2800      	cmp	r0, #0
    165e:	d004      	beq.n	166a <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1660:	b28a      	uxth	r2, r1
    1662:	0021      	movs	r1, r4
    1664:	4b03      	ldr	r3, [pc, #12]	; (1674 <stdio_io_read+0x20>)
    1666:	4798      	blx	r3
}
    1668:	bd10      	pop	{r4, pc}
		return 0;
    166a:	2000      	movs	r0, #0
    166c:	e7fc      	b.n	1668 <stdio_io_read+0x14>
    166e:	46c0      	nop			; (mov r8, r8)
    1670:	20000118 	.word	0x20000118
    1674:	000004fd 	.word	0x000004fd

00001678 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1678:	b510      	push	{r4, lr}
    167a:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    167c:	4b05      	ldr	r3, [pc, #20]	; (1694 <stdio_io_write+0x1c>)
    167e:	6818      	ldr	r0, [r3, #0]
    1680:	2800      	cmp	r0, #0
    1682:	d004      	beq.n	168e <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1684:	b28a      	uxth	r2, r1
    1686:	0021      	movs	r1, r4
    1688:	4b03      	ldr	r3, [pc, #12]	; (1698 <stdio_io_write+0x20>)
    168a:	4798      	blx	r3
}
    168c:	bd10      	pop	{r4, pc}
		return 0;
    168e:	2000      	movs	r0, #0
    1690:	e7fc      	b.n	168c <stdio_io_write+0x14>
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	20000118 	.word	0x20000118
    1698:	000004c5 	.word	0x000004c5

0000169c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    169c:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    169e:	4c04      	ldr	r4, [pc, #16]	; (16b0 <stdio_redirect_init+0x14>)
    16a0:	0020      	movs	r0, r4
    16a2:	4b04      	ldr	r3, [pc, #16]	; (16b4 <stdio_redirect_init+0x18>)
    16a4:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    16a6:	0020      	movs	r0, r4
    16a8:	4b03      	ldr	r3, [pc, #12]	; (16b8 <stdio_redirect_init+0x1c>)
    16aa:	4798      	blx	r3
}
    16ac:	bd10      	pop	{r4, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	2000018c 	.word	0x2000018c
    16b4:	00000bd1 	.word	0x00000bd1
    16b8:	00001629 	.word	0x00001629

000016bc <uart_init>:
	//uart_receive_input((unsigned char)ch);
	Uart_PutChar((unsigned char)ch);
	
}
void uart_init()
{
    16bc:	b510      	push	{r4, lr}
    16be:	b082      	sub	sp, #8
	struct io_descriptor *io;
	//	Setup RX callback
	usart_async_register_callback(&SERIAL, USART_ASYNC_RXC_CB, serial_rx_callback);
    16c0:	4c07      	ldr	r4, [pc, #28]	; (16e0 <uart_init+0x24>)
    16c2:	4a08      	ldr	r2, [pc, #32]	; (16e4 <uart_init+0x28>)
    16c4:	2100      	movs	r1, #0
    16c6:	0020      	movs	r0, r4
    16c8:	4b07      	ldr	r3, [pc, #28]	; (16e8 <uart_init+0x2c>)
    16ca:	4798      	blx	r3
	// 	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb);
	//	Setup USART
	usart_async_get_io_descriptor(&SERIAL, &io);
    16cc:	a901      	add	r1, sp, #4
    16ce:	0020      	movs	r0, r4
    16d0:	4b06      	ldr	r3, [pc, #24]	; (16ec <uart_init+0x30>)
    16d2:	4798      	blx	r3
	usart_async_enable(&SERIAL);
    16d4:	0020      	movs	r0, r4
    16d6:	4b06      	ldr	r3, [pc, #24]	; (16f0 <uart_init+0x34>)
    16d8:	4798      	blx	r3
}
    16da:	b002      	add	sp, #8
    16dc:	bd10      	pop	{r4, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	2000013c 	.word	0x2000013c
    16e4:	00001711 	.word	0x00001711
    16e8:	00000a2d 	.word	0x00000a2d
    16ec:	000009fd 	.word	0x000009fd
    16f0:	000009d1 	.word	0x000009d1

000016f4 <Uart_PutChar>:
void Uart_PutChar(unsigned char value){
    16f4:	b500      	push	{lr}
    16f6:	b083      	sub	sp, #12
		char val[] = { value };
    16f8:	a901      	add	r1, sp, #4
    16fa:	7008      	strb	r0, [r1, #0]
		io_write(&SERIAL.io, (uint8_t *)val,1);
    16fc:	2201      	movs	r2, #1
    16fe:	4802      	ldr	r0, [pc, #8]	; (1708 <Uart_PutChar+0x14>)
    1700:	4b02      	ldr	r3, [pc, #8]	; (170c <Uart_PutChar+0x18>)
    1702:	4798      	blx	r3
    1704:	b003      	add	sp, #12
    1706:	bd00      	pop	{pc}
    1708:	2000013c 	.word	0x2000013c
    170c:	000004c5 	.word	0x000004c5

00001710 <serial_rx_callback>:
{
    1710:	b510      	push	{r4, lr}
    1712:	b082      	sub	sp, #8
	count = io_read(&SERIAL.io,&ch,1);
    1714:	466b      	mov	r3, sp
    1716:	1ddc      	adds	r4, r3, #7
    1718:	2201      	movs	r2, #1
    171a:	0021      	movs	r1, r4
    171c:	4803      	ldr	r0, [pc, #12]	; (172c <serial_rx_callback+0x1c>)
    171e:	4b04      	ldr	r3, [pc, #16]	; (1730 <serial_rx_callback+0x20>)
    1720:	4798      	blx	r3
	Uart_PutChar((unsigned char)ch);
    1722:	7820      	ldrb	r0, [r4, #0]
    1724:	4b03      	ldr	r3, [pc, #12]	; (1734 <serial_rx_callback+0x24>)
    1726:	4798      	blx	r3
}
    1728:	b002      	add	sp, #8
    172a:	bd10      	pop	{r4, pc}
    172c:	2000013c 	.word	0x2000013c
    1730:	000004fd 	.word	0x000004fd
    1734:	000016f5 	.word	0x000016f5

00001738 <qtm_update_qtlib_timer>:
    1738:	4a02      	ldr	r2, [pc, #8]	; (1744 <qtm_update_qtlib_timer+0xc>)
    173a:	8813      	ldrh	r3, [r2, #0]
    173c:	18c0      	adds	r0, r0, r3
    173e:	8010      	strh	r0, [r2, #0]
    1740:	4770      	bx	lr
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	2000011c 	.word	0x2000011c

00001748 <qtm_init_sensor_key>:
    1748:	b510      	push	{r4, lr}
    174a:	230b      	movs	r3, #11
    174c:	2800      	cmp	r0, #0
    174e:	d00b      	beq.n	1768 <qtm_init_sensor_key+0x20>
    1750:	2a00      	cmp	r2, #0
    1752:	d009      	beq.n	1768 <qtm_init_sensor_key+0x20>
    1754:	3301      	adds	r3, #1
    1756:	000c      	movs	r4, r1
    1758:	435c      	muls	r4, r3
    175a:	6881      	ldr	r1, [r0, #8]
    175c:	3b0b      	subs	r3, #11
    175e:	550b      	strb	r3, [r1, r4]
    1760:	6883      	ldr	r3, [r0, #8]
    1762:	1919      	adds	r1, r3, r4
    1764:	2300      	movs	r3, #0
    1766:	604a      	str	r2, [r1, #4]
    1768:	0018      	movs	r0, r3
    176a:	bc10      	pop	{r4}
    176c:	bc02      	pop	{r1}
    176e:	4708      	bx	r1

00001770 <sync_config>:
    1770:	217f      	movs	r1, #127	; 0x7f
    1772:	4a04      	ldr	r2, [pc, #16]	; (1784 <sync_config+0x14>)
    1774:	7853      	ldrb	r3, [r2, #1]
    1776:	438b      	bics	r3, r1
    1778:	b2db      	uxtb	r3, r3
    177a:	2b00      	cmp	r3, #0
    177c:	d001      	beq.n	1782 <sync_config+0x12>
    177e:	7853      	ldrb	r3, [r2, #1]
    1780:	e7f9      	b.n	1776 <sync_config+0x6>
    1782:	4770      	bx	lr
    1784:	42004c00 	.word	0x42004c00

00001788 <select_next_channel_to_measure>:
    1788:	b5f0      	push	{r4, r5, r6, r7, lr}
    178a:	2406      	movs	r4, #6
    178c:	2501      	movs	r5, #1
    178e:	490c      	ldr	r1, [pc, #48]	; (17c0 <select_next_channel_to_measure+0x38>)
    1790:	4a0c      	ldr	r2, [pc, #48]	; (17c4 <select_next_channel_to_measure+0x3c>)
    1792:	6809      	ldr	r1, [r1, #0]
    1794:	8813      	ldrh	r3, [r2, #0]
    1796:	6808      	ldr	r0, [r1, #0]
    1798:	8800      	ldrh	r0, [r0, #0]
    179a:	4283      	cmp	r3, r0
    179c:	d20b      	bcs.n	17b6 <select_next_channel_to_measure+0x2e>
    179e:	0026      	movs	r6, r4
    17a0:	435e      	muls	r6, r3
    17a2:	688f      	ldr	r7, [r1, #8]
    17a4:	5df6      	ldrb	r6, [r6, r7]
    17a6:	422e      	tst	r6, r5
    17a8:	d102      	bne.n	17b0 <select_next_channel_to_measure+0x28>
    17aa:	3301      	adds	r3, #1
    17ac:	b29b      	uxth	r3, r3
    17ae:	e7f4      	b.n	179a <select_next_channel_to_measure+0x12>
    17b0:	8013      	strh	r3, [r2, #0]
    17b2:	2000      	movs	r0, #0
    17b4:	e002      	b.n	17bc <select_next_channel_to_measure+0x34>
    17b6:	2300      	movs	r3, #0
    17b8:	2001      	movs	r0, #1
    17ba:	8013      	strh	r3, [r2, #0]
    17bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	20000238 	.word	0x20000238
    17c4:	20000120 	.word	0x20000120

000017c8 <qtm_measure_node>:
    17c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ca:	4c66      	ldr	r4, [pc, #408]	; (1964 <qtm_measure_node+0x19c>)
    17cc:	b087      	sub	sp, #28
    17ce:	0007      	movs	r7, r0
    17d0:	47a0      	blx	r4
    17d2:	2102      	movs	r1, #2
    17d4:	4b64      	ldr	r3, [pc, #400]	; (1968 <qtm_measure_node+0x1a0>)
    17d6:	4d65      	ldr	r5, [pc, #404]	; (196c <qtm_measure_node+0x1a4>)
    17d8:	781a      	ldrb	r2, [r3, #0]
    17da:	0026      	movs	r6, r4
    17dc:	438a      	bics	r2, r1
    17de:	701a      	strb	r2, [r3, #0]
    17e0:	00fa      	lsls	r2, r7, #3
    17e2:	9203      	str	r2, [sp, #12]
    17e4:	682a      	ldr	r2, [r5, #0]
    17e6:	00f9      	lsls	r1, r7, #3
    17e8:	6852      	ldr	r2, [r2, #4]
    17ea:	001c      	movs	r4, r3
    17ec:	1852      	adds	r2, r2, r1
    17ee:	7892      	ldrb	r2, [r2, #2]
    17f0:	4b5f      	ldr	r3, [pc, #380]	; (1970 <qtm_measure_node+0x1a8>)
    17f2:	0751      	lsls	r1, r2, #29
    17f4:	d401      	bmi.n	17fa <qtm_measure_node+0x32>
    17f6:	6919      	ldr	r1, [r3, #16]
    17f8:	e01d      	b.n	1836 <qtm_measure_node+0x6e>
    17fa:	0711      	lsls	r1, r2, #28
    17fc:	d405      	bmi.n	180a <qtm_measure_node+0x42>
    17fe:	2080      	movs	r0, #128	; 0x80
    1800:	6919      	ldr	r1, [r3, #16]
    1802:	4a5c      	ldr	r2, [pc, #368]	; (1974 <qtm_measure_node+0x1ac>)
    1804:	0140      	lsls	r0, r0, #5
    1806:	4011      	ands	r1, r2
    1808:	e006      	b.n	1818 <qtm_measure_node+0x50>
    180a:	06d1      	lsls	r1, r2, #27
    180c:	d409      	bmi.n	1822 <qtm_measure_node+0x5a>
    180e:	2080      	movs	r0, #128	; 0x80
    1810:	6919      	ldr	r1, [r3, #16]
    1812:	4a58      	ldr	r2, [pc, #352]	; (1974 <qtm_measure_node+0x1ac>)
    1814:	0180      	lsls	r0, r0, #6
    1816:	4011      	ands	r1, r2
    1818:	4301      	orrs	r1, r0
    181a:	6119      	str	r1, [r3, #16]
    181c:	6959      	ldr	r1, [r3, #20]
    181e:	400a      	ands	r2, r1
    1820:	e007      	b.n	1832 <qtm_measure_node+0x6a>
    1822:	6919      	ldr	r1, [r3, #16]
    1824:	0692      	lsls	r2, r2, #26
    1826:	d406      	bmi.n	1836 <qtm_measure_node+0x6e>
    1828:	20c0      	movs	r0, #192	; 0xc0
    182a:	0180      	lsls	r0, r0, #6
    182c:	4301      	orrs	r1, r0
    182e:	6119      	str	r1, [r3, #16]
    1830:	695a      	ldr	r2, [r3, #20]
    1832:	4302      	orrs	r2, r0
    1834:	e004      	b.n	1840 <qtm_measure_node+0x78>
    1836:	4a4f      	ldr	r2, [pc, #316]	; (1974 <qtm_measure_node+0x1ac>)
    1838:	4011      	ands	r1, r2
    183a:	6119      	str	r1, [r3, #16]
    183c:	6959      	ldr	r1, [r3, #20]
    183e:	400a      	ands	r2, r1
    1840:	615a      	str	r2, [r3, #20]
    1842:	47b0      	blx	r6
    1844:	682b      	ldr	r3, [r5, #0]
    1846:	00fa      	lsls	r2, r7, #3
    1848:	685b      	ldr	r3, [r3, #4]
    184a:	189b      	adds	r3, r3, r2
    184c:	885b      	ldrh	r3, [r3, #2]
    184e:	8223      	strh	r3, [r4, #16]
    1850:	47b0      	blx	r6
    1852:	682b      	ldr	r3, [r5, #0]
    1854:	00fa      	lsls	r2, r7, #3
    1856:	685b      	ldr	r3, [r3, #4]
    1858:	5a9b      	ldrh	r3, [r3, r2]
    185a:	8263      	strh	r3, [r4, #18]
    185c:	47b0      	blx	r6
    185e:	2306      	movs	r3, #6
    1860:	682a      	ldr	r2, [r5, #0]
    1862:	435f      	muls	r7, r3
    1864:	6893      	ldr	r3, [r2, #8]
    1866:	19db      	adds	r3, r3, r7
    1868:	889b      	ldrh	r3, [r3, #4]
    186a:	8323      	strh	r3, [r4, #24]
    186c:	6893      	ldr	r3, [r2, #8]
    186e:	19db      	adds	r3, r3, r7
    1870:	7819      	ldrb	r1, [r3, #0]
    1872:	0789      	lsls	r1, r1, #30
    1874:	d501      	bpl.n	187a <qtm_measure_node+0xb2>
    1876:	2105      	movs	r1, #5
    1878:	7019      	strb	r1, [r3, #0]
    187a:	6893      	ldr	r3, [r2, #8]
    187c:	5ddf      	ldrb	r7, [r3, r7]
    187e:	47b0      	blx	r6
    1880:	06ff      	lsls	r7, r7, #27
    1882:	0f7f      	lsrs	r7, r7, #29
    1884:	233f      	movs	r3, #63	; 0x3f
    1886:	2f00      	cmp	r7, #0
    1888:	d108      	bne.n	189c <qtm_measure_node+0xd4>
    188a:	682b      	ldr	r3, [r5, #0]
    188c:	9a03      	ldr	r2, [sp, #12]
    188e:	685b      	ldr	r3, [r3, #4]
    1890:	189b      	adds	r3, r3, r2
    1892:	795b      	ldrb	r3, [r3, #5]
    1894:	4a38      	ldr	r2, [pc, #224]	; (1978 <qtm_measure_node+0x1b0>)
    1896:	091b      	lsrs	r3, r3, #4
    1898:	18d3      	adds	r3, r2, r3
    189a:	7a1b      	ldrb	r3, [r3, #8]
    189c:	76a3      	strb	r3, [r4, #26]
    189e:	47b0      	blx	r6
    18a0:	682b      	ldr	r3, [r5, #0]
    18a2:	9a03      	ldr	r2, [sp, #12]
    18a4:	685b      	ldr	r3, [r3, #4]
    18a6:	4f30      	ldr	r7, [pc, #192]	; (1968 <qtm_measure_node+0x1a0>)
    18a8:	189b      	adds	r3, r3, r2
    18aa:	791b      	ldrb	r3, [r3, #4]
    18ac:	091b      	lsrs	r3, r3, #4
    18ae:	76e3      	strb	r3, [r4, #27]
    18b0:	47b0      	blx	r6
    18b2:	2103      	movs	r1, #3
    18b4:	682b      	ldr	r3, [r5, #0]
    18b6:	9a03      	ldr	r2, [sp, #12]
    18b8:	685b      	ldr	r3, [r3, #4]
    18ba:	189b      	adds	r3, r3, r2
    18bc:	791a      	ldrb	r2, [r3, #4]
    18be:	7923      	ldrb	r3, [r4, #4]
    18c0:	400a      	ands	r2, r1
    18c2:	438b      	bics	r3, r1
    18c4:	4313      	orrs	r3, r2
    18c6:	7123      	strb	r3, [r4, #4]
    18c8:	47b0      	blx	r6
    18ca:	2107      	movs	r1, #7
    18cc:	682b      	ldr	r3, [r5, #0]
    18ce:	2502      	movs	r5, #2
    18d0:	9a03      	ldr	r2, [sp, #12]
    18d2:	685b      	ldr	r3, [r3, #4]
    18d4:	189b      	adds	r3, r3, r2
    18d6:	799a      	ldrb	r2, [r3, #6]
    18d8:	7b63      	ldrb	r3, [r4, #13]
    18da:	400a      	ands	r2, r1
    18dc:	438b      	bics	r3, r1
    18de:	4313      	orrs	r3, r2
    18e0:	7363      	strb	r3, [r4, #13]
    18e2:	47b0      	blx	r6
    18e4:	7823      	ldrb	r3, [r4, #0]
    18e6:	432b      	orrs	r3, r5
    18e8:	7023      	strb	r3, [r4, #0]
    18ea:	4b24      	ldr	r3, [pc, #144]	; (197c <qtm_measure_node+0x1b4>)
    18ec:	685b      	ldr	r3, [r3, #4]
    18ee:	9303      	str	r3, [sp, #12]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d02e      	beq.n	1952 <qtm_measure_node+0x18a>
    18f4:	2401      	movs	r4, #1
    18f6:	47b0      	blx	r6
    18f8:	7b3b      	ldrb	r3, [r7, #12]
    18fa:	071b      	lsls	r3, r3, #28
    18fc:	0f1b      	lsrs	r3, r3, #28
    18fe:	9304      	str	r3, [sp, #16]
    1900:	47b0      	blx	r6
    1902:	793b      	ldrb	r3, [r7, #4]
    1904:	079b      	lsls	r3, r3, #30
    1906:	0f9b      	lsrs	r3, r3, #30
    1908:	9305      	str	r3, [sp, #20]
    190a:	47b0      	blx	r6
    190c:	783b      	ldrb	r3, [r7, #0]
    190e:	43ab      	bics	r3, r5
    1910:	703b      	strb	r3, [r7, #0]
    1912:	47b0      	blx	r6
    1914:	797b      	ldrb	r3, [r7, #5]
    1916:	431c      	orrs	r4, r3
    1918:	47b0      	blx	r6
    191a:	2108      	movs	r1, #8
    191c:	432c      	orrs	r4, r5
    191e:	4b18      	ldr	r3, [pc, #96]	; (1980 <qtm_measure_node+0x1b8>)
    1920:	b2e4      	uxtb	r4, r4
    1922:	717c      	strb	r4, [r7, #5]
    1924:	681a      	ldr	r2, [r3, #0]
    1926:	7813      	ldrb	r3, [r2, #0]
    1928:	430b      	orrs	r3, r1
    192a:	7013      	strb	r3, [r2, #0]
    192c:	47b0      	blx	r6
    192e:	7b7c      	ldrb	r4, [r7, #13]
    1930:	47b0      	blx	r6
    1932:	2207      	movs	r2, #7
    1934:	7b7b      	ldrb	r3, [r7, #13]
    1936:	b2e4      	uxtb	r4, r4
    1938:	4393      	bics	r3, r2
    193a:	737b      	strb	r3, [r7, #13]
    193c:	9a05      	ldr	r2, [sp, #20]
    193e:	4b11      	ldr	r3, [pc, #68]	; (1984 <qtm_measure_node+0x1bc>)
    1940:	9400      	str	r4, [sp, #0]
    1942:	9904      	ldr	r1, [sp, #16]
    1944:	2000      	movs	r0, #0
    1946:	9c03      	ldr	r4, [sp, #12]
    1948:	47a0      	blx	r4
    194a:	47b0      	blx	r6
    194c:	783b      	ldrb	r3, [r7, #0]
    194e:	431d      	orrs	r5, r3
    1950:	703d      	strb	r5, [r7, #0]
    1952:	47b0      	blx	r6
    1954:	2280      	movs	r2, #128	; 0x80
    1956:	7b7b      	ldrb	r3, [r7, #13]
    1958:	4252      	negs	r2, r2
    195a:	4313      	orrs	r3, r2
    195c:	737b      	strb	r3, [r7, #13]
    195e:	b007      	add	sp, #28
    1960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	00001771 	.word	0x00001771
    1968:	42004c00 	.word	0x42004c00
    196c:	20000238 	.word	0x20000238
    1970:	42004400 	.word	0x42004400
    1974:	ffffcfff 	.word	0xffffcfff
    1978:	00002574 	.word	0x00002574
    197c:	20000120 	.word	0x20000120
    1980:	20000234 	.word	0x20000234
    1984:	42004c0d 	.word	0x42004c0d

00001988 <qtm_ptc_init_acquisition_module>:
    1988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    198a:	2480      	movs	r4, #128	; 0x80
    198c:	493f      	ldr	r1, [pc, #252]	; (1a8c <qtm_ptc_init_acquisition_module+0x104>)
    198e:	4b40      	ldr	r3, [pc, #256]	; (1a90 <qtm_ptc_init_acquisition_module+0x108>)
    1990:	690a      	ldr	r2, [r1, #16]
    1992:	00e4      	lsls	r4, r4, #3
    1994:	401a      	ands	r2, r3
    1996:	4322      	orrs	r2, r4
    1998:	610a      	str	r2, [r1, #16]
    199a:	694a      	ldr	r2, [r1, #20]
    199c:	260b      	movs	r6, #11
    199e:	4013      	ands	r3, r2
    19a0:	4323      	orrs	r3, r4
    19a2:	614b      	str	r3, [r1, #20]
    19a4:	2800      	cmp	r0, #0
    19a6:	d06e      	beq.n	1a86 <qtm_ptc_init_acquisition_module+0xfe>
    19a8:	6803      	ldr	r3, [r0, #0]
    19aa:	8819      	ldrh	r1, [r3, #0]
    19ac:	2300      	movs	r3, #0
    19ae:	9300      	str	r3, [sp, #0]
    19b0:	9301      	str	r3, [sp, #4]
    19b2:	b29a      	uxth	r2, r3
    19b4:	4291      	cmp	r1, r2
    19b6:	d90c      	bls.n	19d2 <qtm_ptc_init_acquisition_module+0x4a>
    19b8:	6844      	ldr	r4, [r0, #4]
    19ba:	00da      	lsls	r2, r3, #3
    19bc:	18a2      	adds	r2, r4, r2
    19be:	8814      	ldrh	r4, [r2, #0]
    19c0:	9d01      	ldr	r5, [sp, #4]
    19c2:	3301      	adds	r3, #1
    19c4:	4325      	orrs	r5, r4
    19c6:	9501      	str	r5, [sp, #4]
    19c8:	8852      	ldrh	r2, [r2, #2]
    19ca:	9c00      	ldr	r4, [sp, #0]
    19cc:	4314      	orrs	r4, r2
    19ce:	9400      	str	r4, [sp, #0]
    19d0:	e7ef      	b.n	19b2 <qtm_ptc_init_acquisition_module+0x2a>
    19d2:	9b00      	ldr	r3, [sp, #0]
    19d4:	2602      	movs	r6, #2
    19d6:	2b00      	cmp	r3, #0
    19d8:	d055      	beq.n	1a86 <qtm_ptc_init_acquisition_module+0xfe>
    19da:	9b01      	ldr	r3, [sp, #4]
    19dc:	9a00      	ldr	r2, [sp, #0]
    19de:	041b      	lsls	r3, r3, #16
    19e0:	431a      	orrs	r2, r3
    19e2:	4694      	mov	ip, r2
    19e4:	2000      	movs	r0, #0
    19e6:	2101      	movs	r1, #1
    19e8:	240f      	movs	r4, #15
    19ea:	4f2a      	ldr	r7, [pc, #168]	; (1a94 <qtm_ptc_init_acquisition_module+0x10c>)
    19ec:	370e      	adds	r7, #14
    19ee:	4663      	mov	r3, ip
    19f0:	40c3      	lsrs	r3, r0
    19f2:	420b      	tst	r3, r1
    19f4:	d025      	beq.n	1a42 <qtm_ptc_init_acquisition_module+0xba>
    19f6:	5dc3      	ldrb	r3, [r0, r7]
    19f8:	2b1f      	cmp	r3, #31
    19fa:	d80e      	bhi.n	1a1a <qtm_ptc_init_acquisition_module+0x92>
    19fc:	4d26      	ldr	r5, [pc, #152]	; (1a98 <qtm_ptc_init_acquisition_module+0x110>)
    19fe:	085a      	lsrs	r2, r3, #1
    1a00:	1952      	adds	r2, r2, r5
    1a02:	7815      	ldrb	r5, [r2, #0]
    1a04:	420b      	tst	r3, r1
    1a06:	d003      	beq.n	1a10 <qtm_ptc_init_acquisition_module+0x88>
    1a08:	2610      	movs	r6, #16
    1a0a:	4025      	ands	r5, r4
    1a0c:	4335      	orrs	r5, r6
    1a0e:	e001      	b.n	1a14 <qtm_ptc_init_acquisition_module+0x8c>
    1a10:	43a5      	bics	r5, r4
    1a12:	430d      	orrs	r5, r1
    1a14:	7015      	strb	r5, [r2, #0]
    1a16:	4a21      	ldr	r2, [pc, #132]	; (1a9c <qtm_ptc_init_acquisition_module+0x114>)
    1a18:	e00f      	b.n	1a3a <qtm_ptc_init_acquisition_module+0xb2>
    1a1a:	3b20      	subs	r3, #32
    1a1c:	4d20      	ldr	r5, [pc, #128]	; (1aa0 <qtm_ptc_init_acquisition_module+0x118>)
    1a1e:	b2db      	uxtb	r3, r3
    1a20:	085a      	lsrs	r2, r3, #1
    1a22:	1952      	adds	r2, r2, r5
    1a24:	7815      	ldrb	r5, [r2, #0]
    1a26:	420b      	tst	r3, r1
    1a28:	d003      	beq.n	1a32 <qtm_ptc_init_acquisition_module+0xaa>
    1a2a:	2610      	movs	r6, #16
    1a2c:	4025      	ands	r5, r4
    1a2e:	4335      	orrs	r5, r6
    1a30:	e001      	b.n	1a36 <qtm_ptc_init_acquisition_module+0xae>
    1a32:	43a5      	bics	r5, r4
    1a34:	430d      	orrs	r5, r1
    1a36:	7015      	strb	r5, [r2, #0]
    1a38:	4a1a      	ldr	r2, [pc, #104]	; (1aa4 <qtm_ptc_init_acquisition_module+0x11c>)
    1a3a:	189b      	adds	r3, r3, r2
    1a3c:	781a      	ldrb	r2, [r3, #0]
    1a3e:	430a      	orrs	r2, r1
    1a40:	701a      	strb	r2, [r3, #0]
    1a42:	3001      	adds	r0, #1
    1a44:	2820      	cmp	r0, #32
    1a46:	d1d2      	bne.n	19ee <qtm_ptc_init_acquisition_module+0x66>
    1a48:	4d17      	ldr	r5, [pc, #92]	; (1aa8 <qtm_ptc_init_acquisition_module+0x120>)
    1a4a:	47a8      	blx	r5
    1a4c:	2300      	movs	r3, #0
    1a4e:	4c17      	ldr	r4, [pc, #92]	; (1aac <qtm_ptc_init_acquisition_module+0x124>)
    1a50:	4f17      	ldr	r7, [pc, #92]	; (1ab0 <qtm_ptc_init_acquisition_module+0x128>)
    1a52:	7023      	strb	r3, [r4, #0]
    1a54:	7a3e      	ldrb	r6, [r7, #8]
    1a56:	2e00      	cmp	r6, #0
    1a58:	d10a      	bne.n	1a70 <qtm_ptc_init_acquisition_module+0xe8>
    1a5a:	47a8      	blx	r5
    1a5c:	466b      	mov	r3, sp
    1a5e:	889b      	ldrh	r3, [r3, #4]
    1a60:	82e3      	strh	r3, [r4, #22]
    1a62:	47a8      	blx	r5
    1a64:	466b      	mov	r3, sp
    1a66:	881b      	ldrh	r3, [r3, #0]
    1a68:	82a3      	strh	r3, [r4, #20]
    1a6a:	2301      	movs	r3, #1
    1a6c:	723b      	strb	r3, [r7, #8]
    1a6e:	e00a      	b.n	1a86 <qtm_ptc_init_acquisition_module+0xfe>
    1a70:	2600      	movs	r6, #0
    1a72:	47a8      	blx	r5
    1a74:	8ae3      	ldrh	r3, [r4, #22]
    1a76:	9a01      	ldr	r2, [sp, #4]
    1a78:	431a      	orrs	r2, r3
    1a7a:	82e2      	strh	r2, [r4, #22]
    1a7c:	47a8      	blx	r5
    1a7e:	8aa3      	ldrh	r3, [r4, #20]
    1a80:	9a00      	ldr	r2, [sp, #0]
    1a82:	431a      	orrs	r2, r3
    1a84:	82a2      	strh	r2, [r4, #20]
    1a86:	0030      	movs	r0, r6
    1a88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	42004400 	.word	0x42004400
    1a90:	fffff8ff 	.word	0xfffff8ff
    1a94:	00002574 	.word	0x00002574
    1a98:	41004430 	.word	0x41004430
    1a9c:	41004440 	.word	0x41004440
    1aa0:	410044b0 	.word	0x410044b0
    1aa4:	410044c0 	.word	0x410044c0
    1aa8:	00001771 	.word	0x00001771
    1aac:	42004c00 	.word	0x42004c00
    1ab0:	20000120 	.word	0x20000120

00001ab4 <qtm_ptc_qtlib_assign_signal_memory>:
    1ab4:	230b      	movs	r3, #11
    1ab6:	2800      	cmp	r0, #0
    1ab8:	d002      	beq.n	1ac0 <qtm_ptc_qtlib_assign_signal_memory+0xc>
    1aba:	4b02      	ldr	r3, [pc, #8]	; (1ac4 <qtm_ptc_qtlib_assign_signal_memory+0x10>)
    1abc:	6018      	str	r0, [r3, #0]
    1abe:	2300      	movs	r3, #0
    1ac0:	0018      	movs	r0, r3
    1ac2:	4770      	bx	lr
    1ac4:	2000023c 	.word	0x2000023c

00001ac8 <qtm_enable_sensor_node>:
    1ac8:	230b      	movs	r3, #11
    1aca:	2800      	cmp	r0, #0
    1acc:	d00a      	beq.n	1ae4 <qtm_enable_sensor_node+0x1c>
    1ace:	6803      	ldr	r3, [r0, #0]
    1ad0:	881a      	ldrh	r2, [r3, #0]
    1ad2:	2302      	movs	r3, #2
    1ad4:	428a      	cmp	r2, r1
    1ad6:	d305      	bcc.n	1ae4 <qtm_enable_sensor_node+0x1c>
    1ad8:	3304      	adds	r3, #4
    1ada:	4359      	muls	r1, r3
    1adc:	6882      	ldr	r2, [r0, #8]
    1ade:	3b05      	subs	r3, #5
    1ae0:	548b      	strb	r3, [r1, r2]
    1ae2:	2300      	movs	r3, #0
    1ae4:	0018      	movs	r0, r3
    1ae6:	4770      	bx	lr

00001ae8 <qtm_calibrate_sensor_node>:
    1ae8:	0002      	movs	r2, r0
    1aea:	b510      	push	{r4, lr}
    1aec:	200b      	movs	r0, #11
    1aee:	2a00      	cmp	r2, #0
    1af0:	d01f      	beq.n	1b32 <qtm_calibrate_sensor_node+0x4a>
    1af2:	6813      	ldr	r3, [r2, #0]
    1af4:	3809      	subs	r0, #9
    1af6:	881c      	ldrh	r4, [r3, #0]
    1af8:	428c      	cmp	r4, r1
    1afa:	d31a      	bcc.n	1b32 <qtm_calibrate_sensor_node+0x4a>
    1afc:	789b      	ldrb	r3, [r3, #2]
    1afe:	6892      	ldr	r2, [r2, #8]
    1b00:	2b40      	cmp	r3, #64	; 0x40
    1b02:	d105      	bne.n	1b10 <qtm_calibrate_sensor_node+0x28>
    1b04:	208d      	movs	r0, #141	; 0x8d
    1b06:	3b3a      	subs	r3, #58	; 0x3a
    1b08:	434b      	muls	r3, r1
    1b0a:	0080      	lsls	r0, r0, #2
    1b0c:	18d3      	adds	r3, r2, r3
    1b0e:	e007      	b.n	1b20 <qtm_calibrate_sensor_node+0x38>
    1b10:	3b80      	subs	r3, #128	; 0x80
    1b12:	b2db      	uxtb	r3, r3
    1b14:	2b01      	cmp	r3, #1
    1b16:	d805      	bhi.n	1b24 <qtm_calibrate_sensor_node+0x3c>
    1b18:	2306      	movs	r3, #6
    1b1a:	434b      	muls	r3, r1
    1b1c:	4805      	ldr	r0, [pc, #20]	; (1b34 <qtm_calibrate_sensor_node+0x4c>)
    1b1e:	18d3      	adds	r3, r2, r3
    1b20:	8098      	strh	r0, [r3, #4]
    1b22:	2000      	movs	r0, #0
    1b24:	2306      	movs	r3, #6
    1b26:	4359      	muls	r1, r3
    1b28:	1851      	adds	r1, r2, r1
    1b2a:	2202      	movs	r2, #2
    1b2c:	780b      	ldrb	r3, [r1, #0]
    1b2e:	4313      	orrs	r3, r2
    1b30:	700b      	strb	r3, [r1, #0]
    1b32:	bd10      	pop	{r4, pc}
    1b34:	00000567 	.word	0x00000567

00001b38 <qtm_ptc_clear_interrupt>:
    1b38:	2002      	movs	r0, #2
    1b3a:	4b07      	ldr	r3, [pc, #28]	; (1b58 <qtm_ptc_clear_interrupt+0x20>)
    1b3c:	7a9a      	ldrb	r2, [r3, #10]
    1b3e:	b2d2      	uxtb	r2, r2
    1b40:	4202      	tst	r2, r0
    1b42:	d002      	beq.n	1b4a <qtm_ptc_clear_interrupt+0x12>
    1b44:	7a99      	ldrb	r1, [r3, #10]
    1b46:	4301      	orrs	r1, r0
    1b48:	7299      	strb	r1, [r3, #10]
    1b4a:	2101      	movs	r1, #1
    1b4c:	420a      	tst	r2, r1
    1b4e:	d002      	beq.n	1b56 <qtm_ptc_clear_interrupt+0x1e>
    1b50:	7a9a      	ldrb	r2, [r3, #10]
    1b52:	430a      	orrs	r2, r1
    1b54:	729a      	strb	r2, [r3, #10]
    1b56:	4770      	bx	lr
    1b58:	42004c00 	.word	0x42004c00

00001b5c <qtm_samd21_ptc_handler_eoc>:
    1b5c:	b570      	push	{r4, r5, r6, lr}
    1b5e:	4b21      	ldr	r3, [pc, #132]	; (1be4 <qtm_samd21_ptc_handler_eoc+0x88>)
    1b60:	4798      	blx	r3
    1b62:	2202      	movs	r2, #2
    1b64:	4c20      	ldr	r4, [pc, #128]	; (1be8 <qtm_samd21_ptc_handler_eoc+0x8c>)
    1b66:	7823      	ldrb	r3, [r4, #0]
    1b68:	4393      	bics	r3, r2
    1b6a:	7023      	strb	r3, [r4, #0]
    1b6c:	4b1f      	ldr	r3, [pc, #124]	; (1bec <qtm_samd21_ptc_handler_eoc+0x90>)
    1b6e:	4798      	blx	r3
    1b70:	8ba1      	ldrh	r1, [r4, #28]
    1b72:	8ba0      	ldrh	r0, [r4, #28]
    1b74:	4c1e      	ldr	r4, [pc, #120]	; (1bf0 <qtm_samd21_ptc_handler_eoc+0x94>)
    1b76:	4a1f      	ldr	r2, [pc, #124]	; (1bf4 <qtm_samd21_ptc_handler_eoc+0x98>)
    1b78:	8823      	ldrh	r3, [r4, #0]
    1b7a:	6812      	ldr	r2, [r2, #0]
    1b7c:	005b      	lsls	r3, r3, #1
    1b7e:	52d0      	strh	r0, [r2, r3]
    1b80:	4b1d      	ldr	r3, [pc, #116]	; (1bf8 <qtm_samd21_ptc_handler_eoc+0x9c>)
    1b82:	b289      	uxth	r1, r1
    1b84:	781b      	ldrb	r3, [r3, #0]
    1b86:	0025      	movs	r5, r4
    1b88:	2b01      	cmp	r3, #1
    1b8a:	d002      	beq.n	1b92 <qtm_samd21_ptc_handler_eoc+0x36>
    1b8c:	2b02      	cmp	r3, #2
    1b8e:	d00f      	beq.n	1bb0 <qtm_samd21_ptc_handler_eoc+0x54>
    1b90:	e027      	b.n	1be2 <qtm_samd21_ptc_handler_eoc+0x86>
    1b92:	8823      	ldrh	r3, [r4, #0]
    1b94:	3301      	adds	r3, #1
    1b96:	8023      	strh	r3, [r4, #0]
    1b98:	4b18      	ldr	r3, [pc, #96]	; (1bfc <qtm_samd21_ptc_handler_eoc+0xa0>)
    1b9a:	4798      	blx	r3
    1b9c:	2800      	cmp	r0, #0
    1b9e:	d105      	bne.n	1bac <qtm_samd21_ptc_handler_eoc+0x50>
    1ba0:	4b17      	ldr	r3, [pc, #92]	; (1c00 <qtm_samd21_ptc_handler_eoc+0xa4>)
    1ba2:	8820      	ldrh	r0, [r4, #0]
    1ba4:	4798      	blx	r3
    1ba6:	2304      	movs	r3, #4
    1ba8:	7223      	strb	r3, [r4, #8]
    1baa:	e01a      	b.n	1be2 <qtm_samd21_ptc_handler_eoc+0x86>
    1bac:	68e3      	ldr	r3, [r4, #12]
    1bae:	e017      	b.n	1be0 <qtm_samd21_ptc_handler_eoc+0x84>
    1bb0:	4b14      	ldr	r3, [pc, #80]	; (1c04 <qtm_samd21_ptc_handler_eoc+0xa8>)
    1bb2:	681e      	ldr	r6, [r3, #0]
    1bb4:	8823      	ldrh	r3, [r4, #0]
    1bb6:	6872      	ldr	r2, [r6, #4]
    1bb8:	00dc      	lsls	r4, r3, #3
    1bba:	1914      	adds	r4, r2, r4
    1bbc:	220f      	movs	r2, #15
    1bbe:	7960      	ldrb	r0, [r4, #5]
    1bc0:	4010      	ands	r0, r2
    1bc2:	79a2      	ldrb	r2, [r4, #6]
    1bc4:	2400      	movs	r4, #0
    1bc6:	4290      	cmp	r0, r2
    1bc8:	d201      	bcs.n	1bce <qtm_samd21_ptc_handler_eoc+0x72>
    1bca:	1a12      	subs	r2, r2, r0
    1bcc:	b2d4      	uxtb	r4, r2
    1bce:	2206      	movs	r2, #6
    1bd0:	40e1      	lsrs	r1, r4
    1bd2:	4353      	muls	r3, r2
    1bd4:	68b0      	ldr	r0, [r6, #8]
    1bd6:	18c3      	adds	r3, r0, r3
    1bd8:	8059      	strh	r1, [r3, #2]
    1bda:	2302      	movs	r3, #2
    1bdc:	722b      	strb	r3, [r5, #8]
    1bde:	692b      	ldr	r3, [r5, #16]
    1be0:	4798      	blx	r3
    1be2:	bd70      	pop	{r4, r5, r6, pc}
    1be4:	00001771 	.word	0x00001771
    1be8:	42004c00 	.word	0x42004c00
    1bec:	00001b39 	.word	0x00001b39
    1bf0:	20000120 	.word	0x20000120
    1bf4:	2000023c 	.word	0x2000023c
    1bf8:	20000046 	.word	0x20000046
    1bfc:	00001789 	.word	0x00001789
    1c00:	000017c9 	.word	0x000017c9
    1c04:	20000238 	.word	0x20000238

00001c08 <__libc_init_array>:
    1c08:	b570      	push	{r4, r5, r6, lr}
    1c0a:	2600      	movs	r6, #0
    1c0c:	4d0c      	ldr	r5, [pc, #48]	; (1c40 <__libc_init_array+0x38>)
    1c0e:	4c0d      	ldr	r4, [pc, #52]	; (1c44 <__libc_init_array+0x3c>)
    1c10:	1b64      	subs	r4, r4, r5
    1c12:	10a4      	asrs	r4, r4, #2
    1c14:	42a6      	cmp	r6, r4
    1c16:	d109      	bne.n	1c2c <__libc_init_array+0x24>
    1c18:	2600      	movs	r6, #0
    1c1a:	f000 fcf5 	bl	2608 <_init>
    1c1e:	4d0a      	ldr	r5, [pc, #40]	; (1c48 <__libc_init_array+0x40>)
    1c20:	4c0a      	ldr	r4, [pc, #40]	; (1c4c <__libc_init_array+0x44>)
    1c22:	1b64      	subs	r4, r4, r5
    1c24:	10a4      	asrs	r4, r4, #2
    1c26:	42a6      	cmp	r6, r4
    1c28:	d105      	bne.n	1c36 <__libc_init_array+0x2e>
    1c2a:	bd70      	pop	{r4, r5, r6, pc}
    1c2c:	00b3      	lsls	r3, r6, #2
    1c2e:	58eb      	ldr	r3, [r5, r3]
    1c30:	4798      	blx	r3
    1c32:	3601      	adds	r6, #1
    1c34:	e7ee      	b.n	1c14 <__libc_init_array+0xc>
    1c36:	00b3      	lsls	r3, r6, #2
    1c38:	58eb      	ldr	r3, [r5, r3]
    1c3a:	4798      	blx	r3
    1c3c:	3601      	adds	r6, #1
    1c3e:	e7f2      	b.n	1c26 <__libc_init_array+0x1e>
    1c40:	00002614 	.word	0x00002614
    1c44:	00002614 	.word	0x00002614
    1c48:	00002614 	.word	0x00002614
    1c4c:	00002618 	.word	0x00002618

00001c50 <memset>:
    1c50:	0003      	movs	r3, r0
    1c52:	1882      	adds	r2, r0, r2
    1c54:	4293      	cmp	r3, r2
    1c56:	d100      	bne.n	1c5a <memset+0xa>
    1c58:	4770      	bx	lr
    1c5a:	7019      	strb	r1, [r3, #0]
    1c5c:	3301      	adds	r3, #1
    1c5e:	e7f9      	b.n	1c54 <memset+0x4>

00001c60 <setbuf>:
    1c60:	424a      	negs	r2, r1
    1c62:	414a      	adcs	r2, r1
    1c64:	2380      	movs	r3, #128	; 0x80
    1c66:	b510      	push	{r4, lr}
    1c68:	0052      	lsls	r2, r2, #1
    1c6a:	00db      	lsls	r3, r3, #3
    1c6c:	f000 f802 	bl	1c74 <setvbuf>
    1c70:	bd10      	pop	{r4, pc}
	...

00001c74 <setvbuf>:
    1c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c76:	001d      	movs	r5, r3
    1c78:	4b4f      	ldr	r3, [pc, #316]	; (1db8 <setvbuf+0x144>)
    1c7a:	b085      	sub	sp, #20
    1c7c:	681e      	ldr	r6, [r3, #0]
    1c7e:	0004      	movs	r4, r0
    1c80:	000f      	movs	r7, r1
    1c82:	9200      	str	r2, [sp, #0]
    1c84:	2e00      	cmp	r6, #0
    1c86:	d005      	beq.n	1c94 <setvbuf+0x20>
    1c88:	69b3      	ldr	r3, [r6, #24]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d102      	bne.n	1c94 <setvbuf+0x20>
    1c8e:	0030      	movs	r0, r6
    1c90:	f000 f994 	bl	1fbc <__sinit>
    1c94:	4b49      	ldr	r3, [pc, #292]	; (1dbc <setvbuf+0x148>)
    1c96:	429c      	cmp	r4, r3
    1c98:	d150      	bne.n	1d3c <setvbuf+0xc8>
    1c9a:	6874      	ldr	r4, [r6, #4]
    1c9c:	9b00      	ldr	r3, [sp, #0]
    1c9e:	2b02      	cmp	r3, #2
    1ca0:	d005      	beq.n	1cae <setvbuf+0x3a>
    1ca2:	2b01      	cmp	r3, #1
    1ca4:	d900      	bls.n	1ca8 <setvbuf+0x34>
    1ca6:	e084      	b.n	1db2 <setvbuf+0x13e>
    1ca8:	2d00      	cmp	r5, #0
    1caa:	da00      	bge.n	1cae <setvbuf+0x3a>
    1cac:	e081      	b.n	1db2 <setvbuf+0x13e>
    1cae:	0021      	movs	r1, r4
    1cb0:	0030      	movs	r0, r6
    1cb2:	f000 f915 	bl	1ee0 <_fflush_r>
    1cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1cb8:	2900      	cmp	r1, #0
    1cba:	d008      	beq.n	1cce <setvbuf+0x5a>
    1cbc:	0023      	movs	r3, r4
    1cbe:	3344      	adds	r3, #68	; 0x44
    1cc0:	4299      	cmp	r1, r3
    1cc2:	d002      	beq.n	1cca <setvbuf+0x56>
    1cc4:	0030      	movs	r0, r6
    1cc6:	f000 fa41 	bl	214c <_free_r>
    1cca:	2300      	movs	r3, #0
    1ccc:	6363      	str	r3, [r4, #52]	; 0x34
    1cce:	2300      	movs	r3, #0
    1cd0:	61a3      	str	r3, [r4, #24]
    1cd2:	6063      	str	r3, [r4, #4]
    1cd4:	89a3      	ldrh	r3, [r4, #12]
    1cd6:	061b      	lsls	r3, r3, #24
    1cd8:	d503      	bpl.n	1ce2 <setvbuf+0x6e>
    1cda:	6921      	ldr	r1, [r4, #16]
    1cdc:	0030      	movs	r0, r6
    1cde:	f000 fa35 	bl	214c <_free_r>
    1ce2:	89a3      	ldrh	r3, [r4, #12]
    1ce4:	4a36      	ldr	r2, [pc, #216]	; (1dc0 <setvbuf+0x14c>)
    1ce6:	4013      	ands	r3, r2
    1ce8:	81a3      	strh	r3, [r4, #12]
    1cea:	9b00      	ldr	r3, [sp, #0]
    1cec:	2b02      	cmp	r3, #2
    1cee:	d05a      	beq.n	1da6 <setvbuf+0x132>
    1cf0:	ab03      	add	r3, sp, #12
    1cf2:	aa02      	add	r2, sp, #8
    1cf4:	0021      	movs	r1, r4
    1cf6:	0030      	movs	r0, r6
    1cf8:	f000 f9f6 	bl	20e8 <__swhatbuf_r>
    1cfc:	89a3      	ldrh	r3, [r4, #12]
    1cfe:	4318      	orrs	r0, r3
    1d00:	81a0      	strh	r0, [r4, #12]
    1d02:	2d00      	cmp	r5, #0
    1d04:	d124      	bne.n	1d50 <setvbuf+0xdc>
    1d06:	9d02      	ldr	r5, [sp, #8]
    1d08:	0028      	movs	r0, r5
    1d0a:	f000 fa15 	bl	2138 <malloc>
    1d0e:	9501      	str	r5, [sp, #4]
    1d10:	1e07      	subs	r7, r0, #0
    1d12:	d142      	bne.n	1d9a <setvbuf+0x126>
    1d14:	9b02      	ldr	r3, [sp, #8]
    1d16:	9301      	str	r3, [sp, #4]
    1d18:	42ab      	cmp	r3, r5
    1d1a:	d139      	bne.n	1d90 <setvbuf+0x11c>
    1d1c:	2001      	movs	r0, #1
    1d1e:	4240      	negs	r0, r0
    1d20:	2302      	movs	r3, #2
    1d22:	89a2      	ldrh	r2, [r4, #12]
    1d24:	4313      	orrs	r3, r2
    1d26:	81a3      	strh	r3, [r4, #12]
    1d28:	2300      	movs	r3, #0
    1d2a:	60a3      	str	r3, [r4, #8]
    1d2c:	0023      	movs	r3, r4
    1d2e:	3347      	adds	r3, #71	; 0x47
    1d30:	6023      	str	r3, [r4, #0]
    1d32:	6123      	str	r3, [r4, #16]
    1d34:	2301      	movs	r3, #1
    1d36:	6163      	str	r3, [r4, #20]
    1d38:	b005      	add	sp, #20
    1d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d3c:	4b21      	ldr	r3, [pc, #132]	; (1dc4 <setvbuf+0x150>)
    1d3e:	429c      	cmp	r4, r3
    1d40:	d101      	bne.n	1d46 <setvbuf+0xd2>
    1d42:	68b4      	ldr	r4, [r6, #8]
    1d44:	e7aa      	b.n	1c9c <setvbuf+0x28>
    1d46:	4b20      	ldr	r3, [pc, #128]	; (1dc8 <setvbuf+0x154>)
    1d48:	429c      	cmp	r4, r3
    1d4a:	d1a7      	bne.n	1c9c <setvbuf+0x28>
    1d4c:	68f4      	ldr	r4, [r6, #12]
    1d4e:	e7a5      	b.n	1c9c <setvbuf+0x28>
    1d50:	2f00      	cmp	r7, #0
    1d52:	d0d9      	beq.n	1d08 <setvbuf+0x94>
    1d54:	69b3      	ldr	r3, [r6, #24]
    1d56:	2b00      	cmp	r3, #0
    1d58:	d102      	bne.n	1d60 <setvbuf+0xec>
    1d5a:	0030      	movs	r0, r6
    1d5c:	f000 f92e 	bl	1fbc <__sinit>
    1d60:	9b00      	ldr	r3, [sp, #0]
    1d62:	2b01      	cmp	r3, #1
    1d64:	d103      	bne.n	1d6e <setvbuf+0xfa>
    1d66:	89a3      	ldrh	r3, [r4, #12]
    1d68:	9a00      	ldr	r2, [sp, #0]
    1d6a:	431a      	orrs	r2, r3
    1d6c:	81a2      	strh	r2, [r4, #12]
    1d6e:	2008      	movs	r0, #8
    1d70:	89a3      	ldrh	r3, [r4, #12]
    1d72:	6027      	str	r7, [r4, #0]
    1d74:	6127      	str	r7, [r4, #16]
    1d76:	6165      	str	r5, [r4, #20]
    1d78:	4018      	ands	r0, r3
    1d7a:	d018      	beq.n	1dae <setvbuf+0x13a>
    1d7c:	2001      	movs	r0, #1
    1d7e:	4018      	ands	r0, r3
    1d80:	2300      	movs	r3, #0
    1d82:	4298      	cmp	r0, r3
    1d84:	d011      	beq.n	1daa <setvbuf+0x136>
    1d86:	426d      	negs	r5, r5
    1d88:	60a3      	str	r3, [r4, #8]
    1d8a:	61a5      	str	r5, [r4, #24]
    1d8c:	0018      	movs	r0, r3
    1d8e:	e7d3      	b.n	1d38 <setvbuf+0xc4>
    1d90:	9801      	ldr	r0, [sp, #4]
    1d92:	f000 f9d1 	bl	2138 <malloc>
    1d96:	1e07      	subs	r7, r0, #0
    1d98:	d0c0      	beq.n	1d1c <setvbuf+0xa8>
    1d9a:	2380      	movs	r3, #128	; 0x80
    1d9c:	89a2      	ldrh	r2, [r4, #12]
    1d9e:	9d01      	ldr	r5, [sp, #4]
    1da0:	4313      	orrs	r3, r2
    1da2:	81a3      	strh	r3, [r4, #12]
    1da4:	e7d6      	b.n	1d54 <setvbuf+0xe0>
    1da6:	2000      	movs	r0, #0
    1da8:	e7ba      	b.n	1d20 <setvbuf+0xac>
    1daa:	60a5      	str	r5, [r4, #8]
    1dac:	e7c4      	b.n	1d38 <setvbuf+0xc4>
    1dae:	60a0      	str	r0, [r4, #8]
    1db0:	e7c2      	b.n	1d38 <setvbuf+0xc4>
    1db2:	2001      	movs	r0, #1
    1db4:	4240      	negs	r0, r0
    1db6:	e7bf      	b.n	1d38 <setvbuf+0xc4>
    1db8:	20000048 	.word	0x20000048
    1dbc:	000025c8 	.word	0x000025c8
    1dc0:	fffff35c 	.word	0xfffff35c
    1dc4:	000025e8 	.word	0x000025e8
    1dc8:	000025a8 	.word	0x000025a8

00001dcc <__sflush_r>:
    1dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dce:	898a      	ldrh	r2, [r1, #12]
    1dd0:	0005      	movs	r5, r0
    1dd2:	000c      	movs	r4, r1
    1dd4:	0713      	lsls	r3, r2, #28
    1dd6:	d460      	bmi.n	1e9a <__sflush_r+0xce>
    1dd8:	684b      	ldr	r3, [r1, #4]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	dc04      	bgt.n	1de8 <__sflush_r+0x1c>
    1dde:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1de0:	2b00      	cmp	r3, #0
    1de2:	dc01      	bgt.n	1de8 <__sflush_r+0x1c>
    1de4:	2000      	movs	r0, #0
    1de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1de8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1dea:	2f00      	cmp	r7, #0
    1dec:	d0fa      	beq.n	1de4 <__sflush_r+0x18>
    1dee:	2300      	movs	r3, #0
    1df0:	682e      	ldr	r6, [r5, #0]
    1df2:	602b      	str	r3, [r5, #0]
    1df4:	2380      	movs	r3, #128	; 0x80
    1df6:	015b      	lsls	r3, r3, #5
    1df8:	401a      	ands	r2, r3
    1dfa:	d034      	beq.n	1e66 <__sflush_r+0x9a>
    1dfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1dfe:	89a3      	ldrh	r3, [r4, #12]
    1e00:	075b      	lsls	r3, r3, #29
    1e02:	d506      	bpl.n	1e12 <__sflush_r+0x46>
    1e04:	6863      	ldr	r3, [r4, #4]
    1e06:	1ac0      	subs	r0, r0, r3
    1e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d001      	beq.n	1e12 <__sflush_r+0x46>
    1e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1e10:	1ac0      	subs	r0, r0, r3
    1e12:	0002      	movs	r2, r0
    1e14:	6a21      	ldr	r1, [r4, #32]
    1e16:	2300      	movs	r3, #0
    1e18:	0028      	movs	r0, r5
    1e1a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1e1c:	47b8      	blx	r7
    1e1e:	89a1      	ldrh	r1, [r4, #12]
    1e20:	1c43      	adds	r3, r0, #1
    1e22:	d106      	bne.n	1e32 <__sflush_r+0x66>
    1e24:	682b      	ldr	r3, [r5, #0]
    1e26:	2b1d      	cmp	r3, #29
    1e28:	d831      	bhi.n	1e8e <__sflush_r+0xc2>
    1e2a:	4a2c      	ldr	r2, [pc, #176]	; (1edc <__sflush_r+0x110>)
    1e2c:	40da      	lsrs	r2, r3
    1e2e:	07d3      	lsls	r3, r2, #31
    1e30:	d52d      	bpl.n	1e8e <__sflush_r+0xc2>
    1e32:	2300      	movs	r3, #0
    1e34:	6063      	str	r3, [r4, #4]
    1e36:	6923      	ldr	r3, [r4, #16]
    1e38:	6023      	str	r3, [r4, #0]
    1e3a:	04cb      	lsls	r3, r1, #19
    1e3c:	d505      	bpl.n	1e4a <__sflush_r+0x7e>
    1e3e:	1c43      	adds	r3, r0, #1
    1e40:	d102      	bne.n	1e48 <__sflush_r+0x7c>
    1e42:	682b      	ldr	r3, [r5, #0]
    1e44:	2b00      	cmp	r3, #0
    1e46:	d100      	bne.n	1e4a <__sflush_r+0x7e>
    1e48:	6560      	str	r0, [r4, #84]	; 0x54
    1e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1e4c:	602e      	str	r6, [r5, #0]
    1e4e:	2900      	cmp	r1, #0
    1e50:	d0c8      	beq.n	1de4 <__sflush_r+0x18>
    1e52:	0023      	movs	r3, r4
    1e54:	3344      	adds	r3, #68	; 0x44
    1e56:	4299      	cmp	r1, r3
    1e58:	d002      	beq.n	1e60 <__sflush_r+0x94>
    1e5a:	0028      	movs	r0, r5
    1e5c:	f000 f976 	bl	214c <_free_r>
    1e60:	2000      	movs	r0, #0
    1e62:	6360      	str	r0, [r4, #52]	; 0x34
    1e64:	e7bf      	b.n	1de6 <__sflush_r+0x1a>
    1e66:	2301      	movs	r3, #1
    1e68:	6a21      	ldr	r1, [r4, #32]
    1e6a:	0028      	movs	r0, r5
    1e6c:	47b8      	blx	r7
    1e6e:	1c43      	adds	r3, r0, #1
    1e70:	d1c5      	bne.n	1dfe <__sflush_r+0x32>
    1e72:	682b      	ldr	r3, [r5, #0]
    1e74:	2b00      	cmp	r3, #0
    1e76:	d0c2      	beq.n	1dfe <__sflush_r+0x32>
    1e78:	2b1d      	cmp	r3, #29
    1e7a:	d001      	beq.n	1e80 <__sflush_r+0xb4>
    1e7c:	2b16      	cmp	r3, #22
    1e7e:	d101      	bne.n	1e84 <__sflush_r+0xb8>
    1e80:	602e      	str	r6, [r5, #0]
    1e82:	e7af      	b.n	1de4 <__sflush_r+0x18>
    1e84:	2340      	movs	r3, #64	; 0x40
    1e86:	89a2      	ldrh	r2, [r4, #12]
    1e88:	4313      	orrs	r3, r2
    1e8a:	81a3      	strh	r3, [r4, #12]
    1e8c:	e7ab      	b.n	1de6 <__sflush_r+0x1a>
    1e8e:	2340      	movs	r3, #64	; 0x40
    1e90:	430b      	orrs	r3, r1
    1e92:	2001      	movs	r0, #1
    1e94:	81a3      	strh	r3, [r4, #12]
    1e96:	4240      	negs	r0, r0
    1e98:	e7a5      	b.n	1de6 <__sflush_r+0x1a>
    1e9a:	690f      	ldr	r7, [r1, #16]
    1e9c:	2f00      	cmp	r7, #0
    1e9e:	d0a1      	beq.n	1de4 <__sflush_r+0x18>
    1ea0:	680b      	ldr	r3, [r1, #0]
    1ea2:	600f      	str	r7, [r1, #0]
    1ea4:	1bdb      	subs	r3, r3, r7
    1ea6:	9301      	str	r3, [sp, #4]
    1ea8:	2300      	movs	r3, #0
    1eaa:	0792      	lsls	r2, r2, #30
    1eac:	d100      	bne.n	1eb0 <__sflush_r+0xe4>
    1eae:	694b      	ldr	r3, [r1, #20]
    1eb0:	60a3      	str	r3, [r4, #8]
    1eb2:	9b01      	ldr	r3, [sp, #4]
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	dc00      	bgt.n	1eba <__sflush_r+0xee>
    1eb8:	e794      	b.n	1de4 <__sflush_r+0x18>
    1eba:	9b01      	ldr	r3, [sp, #4]
    1ebc:	003a      	movs	r2, r7
    1ebe:	6a21      	ldr	r1, [r4, #32]
    1ec0:	0028      	movs	r0, r5
    1ec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1ec4:	47b0      	blx	r6
    1ec6:	2800      	cmp	r0, #0
    1ec8:	dc03      	bgt.n	1ed2 <__sflush_r+0x106>
    1eca:	2340      	movs	r3, #64	; 0x40
    1ecc:	89a2      	ldrh	r2, [r4, #12]
    1ece:	4313      	orrs	r3, r2
    1ed0:	e7df      	b.n	1e92 <__sflush_r+0xc6>
    1ed2:	9b01      	ldr	r3, [sp, #4]
    1ed4:	183f      	adds	r7, r7, r0
    1ed6:	1a1b      	subs	r3, r3, r0
    1ed8:	9301      	str	r3, [sp, #4]
    1eda:	e7ea      	b.n	1eb2 <__sflush_r+0xe6>
    1edc:	20400001 	.word	0x20400001

00001ee0 <_fflush_r>:
    1ee0:	690b      	ldr	r3, [r1, #16]
    1ee2:	b570      	push	{r4, r5, r6, lr}
    1ee4:	0005      	movs	r5, r0
    1ee6:	000c      	movs	r4, r1
    1ee8:	2b00      	cmp	r3, #0
    1eea:	d101      	bne.n	1ef0 <_fflush_r+0x10>
    1eec:	2000      	movs	r0, #0
    1eee:	bd70      	pop	{r4, r5, r6, pc}
    1ef0:	2800      	cmp	r0, #0
    1ef2:	d004      	beq.n	1efe <_fflush_r+0x1e>
    1ef4:	6983      	ldr	r3, [r0, #24]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d101      	bne.n	1efe <_fflush_r+0x1e>
    1efa:	f000 f85f 	bl	1fbc <__sinit>
    1efe:	4b0b      	ldr	r3, [pc, #44]	; (1f2c <_fflush_r+0x4c>)
    1f00:	429c      	cmp	r4, r3
    1f02:	d109      	bne.n	1f18 <_fflush_r+0x38>
    1f04:	686c      	ldr	r4, [r5, #4]
    1f06:	220c      	movs	r2, #12
    1f08:	5ea3      	ldrsh	r3, [r4, r2]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d0ee      	beq.n	1eec <_fflush_r+0xc>
    1f0e:	0021      	movs	r1, r4
    1f10:	0028      	movs	r0, r5
    1f12:	f7ff ff5b 	bl	1dcc <__sflush_r>
    1f16:	e7ea      	b.n	1eee <_fflush_r+0xe>
    1f18:	4b05      	ldr	r3, [pc, #20]	; (1f30 <_fflush_r+0x50>)
    1f1a:	429c      	cmp	r4, r3
    1f1c:	d101      	bne.n	1f22 <_fflush_r+0x42>
    1f1e:	68ac      	ldr	r4, [r5, #8]
    1f20:	e7f1      	b.n	1f06 <_fflush_r+0x26>
    1f22:	4b04      	ldr	r3, [pc, #16]	; (1f34 <_fflush_r+0x54>)
    1f24:	429c      	cmp	r4, r3
    1f26:	d1ee      	bne.n	1f06 <_fflush_r+0x26>
    1f28:	68ec      	ldr	r4, [r5, #12]
    1f2a:	e7ec      	b.n	1f06 <_fflush_r+0x26>
    1f2c:	000025c8 	.word	0x000025c8
    1f30:	000025e8 	.word	0x000025e8
    1f34:	000025a8 	.word	0x000025a8

00001f38 <_cleanup_r>:
    1f38:	b510      	push	{r4, lr}
    1f3a:	4902      	ldr	r1, [pc, #8]	; (1f44 <_cleanup_r+0xc>)
    1f3c:	f000 f8b2 	bl	20a4 <_fwalk_reent>
    1f40:	bd10      	pop	{r4, pc}
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	00001ee1 	.word	0x00001ee1

00001f48 <std.isra.0>:
    1f48:	2300      	movs	r3, #0
    1f4a:	b510      	push	{r4, lr}
    1f4c:	0004      	movs	r4, r0
    1f4e:	6003      	str	r3, [r0, #0]
    1f50:	6043      	str	r3, [r0, #4]
    1f52:	6083      	str	r3, [r0, #8]
    1f54:	8181      	strh	r1, [r0, #12]
    1f56:	6643      	str	r3, [r0, #100]	; 0x64
    1f58:	81c2      	strh	r2, [r0, #14]
    1f5a:	6103      	str	r3, [r0, #16]
    1f5c:	6143      	str	r3, [r0, #20]
    1f5e:	6183      	str	r3, [r0, #24]
    1f60:	0019      	movs	r1, r3
    1f62:	2208      	movs	r2, #8
    1f64:	305c      	adds	r0, #92	; 0x5c
    1f66:	f7ff fe73 	bl	1c50 <memset>
    1f6a:	4b05      	ldr	r3, [pc, #20]	; (1f80 <std.isra.0+0x38>)
    1f6c:	6224      	str	r4, [r4, #32]
    1f6e:	6263      	str	r3, [r4, #36]	; 0x24
    1f70:	4b04      	ldr	r3, [pc, #16]	; (1f84 <std.isra.0+0x3c>)
    1f72:	62a3      	str	r3, [r4, #40]	; 0x28
    1f74:	4b04      	ldr	r3, [pc, #16]	; (1f88 <std.isra.0+0x40>)
    1f76:	62e3      	str	r3, [r4, #44]	; 0x2c
    1f78:	4b04      	ldr	r3, [pc, #16]	; (1f8c <std.isra.0+0x44>)
    1f7a:	6323      	str	r3, [r4, #48]	; 0x30
    1f7c:	bd10      	pop	{r4, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	000022c1 	.word	0x000022c1
    1f84:	000022e9 	.word	0x000022e9
    1f88:	00002321 	.word	0x00002321
    1f8c:	0000234d 	.word	0x0000234d

00001f90 <__sfmoreglue>:
    1f90:	b570      	push	{r4, r5, r6, lr}
    1f92:	2568      	movs	r5, #104	; 0x68
    1f94:	1e4a      	subs	r2, r1, #1
    1f96:	4355      	muls	r5, r2
    1f98:	000e      	movs	r6, r1
    1f9a:	0029      	movs	r1, r5
    1f9c:	3174      	adds	r1, #116	; 0x74
    1f9e:	f000 f91f 	bl	21e0 <_malloc_r>
    1fa2:	1e04      	subs	r4, r0, #0
    1fa4:	d008      	beq.n	1fb8 <__sfmoreglue+0x28>
    1fa6:	2100      	movs	r1, #0
    1fa8:	002a      	movs	r2, r5
    1faa:	6001      	str	r1, [r0, #0]
    1fac:	6046      	str	r6, [r0, #4]
    1fae:	300c      	adds	r0, #12
    1fb0:	60a0      	str	r0, [r4, #8]
    1fb2:	3268      	adds	r2, #104	; 0x68
    1fb4:	f7ff fe4c 	bl	1c50 <memset>
    1fb8:	0020      	movs	r0, r4
    1fba:	bd70      	pop	{r4, r5, r6, pc}

00001fbc <__sinit>:
    1fbc:	6983      	ldr	r3, [r0, #24]
    1fbe:	b513      	push	{r0, r1, r4, lr}
    1fc0:	0004      	movs	r4, r0
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d128      	bne.n	2018 <STACK_SIZE+0x18>
    1fc6:	6483      	str	r3, [r0, #72]	; 0x48
    1fc8:	64c3      	str	r3, [r0, #76]	; 0x4c
    1fca:	6503      	str	r3, [r0, #80]	; 0x50
    1fcc:	4b13      	ldr	r3, [pc, #76]	; (201c <STACK_SIZE+0x1c>)
    1fce:	4a14      	ldr	r2, [pc, #80]	; (2020 <STACK_SIZE+0x20>)
    1fd0:	681b      	ldr	r3, [r3, #0]
    1fd2:	6282      	str	r2, [r0, #40]	; 0x28
    1fd4:	9301      	str	r3, [sp, #4]
    1fd6:	4298      	cmp	r0, r3
    1fd8:	d101      	bne.n	1fde <__sinit+0x22>
    1fda:	2301      	movs	r3, #1
    1fdc:	6183      	str	r3, [r0, #24]
    1fde:	0020      	movs	r0, r4
    1fe0:	f000 f820 	bl	2024 <__sfp>
    1fe4:	6060      	str	r0, [r4, #4]
    1fe6:	0020      	movs	r0, r4
    1fe8:	f000 f81c 	bl	2024 <__sfp>
    1fec:	60a0      	str	r0, [r4, #8]
    1fee:	0020      	movs	r0, r4
    1ff0:	f000 f818 	bl	2024 <__sfp>
    1ff4:	2200      	movs	r2, #0
    1ff6:	60e0      	str	r0, [r4, #12]
    1ff8:	2104      	movs	r1, #4
    1ffa:	6860      	ldr	r0, [r4, #4]
    1ffc:	f7ff ffa4 	bl	1f48 <std.isra.0>
    2000:	2201      	movs	r2, #1
    2002:	2109      	movs	r1, #9
    2004:	68a0      	ldr	r0, [r4, #8]
    2006:	f7ff ff9f 	bl	1f48 <std.isra.0>
    200a:	2202      	movs	r2, #2
    200c:	2112      	movs	r1, #18
    200e:	68e0      	ldr	r0, [r4, #12]
    2010:	f7ff ff9a 	bl	1f48 <std.isra.0>
    2014:	2301      	movs	r3, #1
    2016:	61a3      	str	r3, [r4, #24]
    2018:	bd13      	pop	{r0, r1, r4, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	000025a4 	.word	0x000025a4
    2020:	00001f39 	.word	0x00001f39

00002024 <__sfp>:
    2024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2026:	4b1e      	ldr	r3, [pc, #120]	; (20a0 <__sfp+0x7c>)
    2028:	0007      	movs	r7, r0
    202a:	681e      	ldr	r6, [r3, #0]
    202c:	69b3      	ldr	r3, [r6, #24]
    202e:	2b00      	cmp	r3, #0
    2030:	d102      	bne.n	2038 <__sfp+0x14>
    2032:	0030      	movs	r0, r6
    2034:	f7ff ffc2 	bl	1fbc <__sinit>
    2038:	3648      	adds	r6, #72	; 0x48
    203a:	68b4      	ldr	r4, [r6, #8]
    203c:	6873      	ldr	r3, [r6, #4]
    203e:	3b01      	subs	r3, #1
    2040:	d504      	bpl.n	204c <__sfp+0x28>
    2042:	6833      	ldr	r3, [r6, #0]
    2044:	2b00      	cmp	r3, #0
    2046:	d007      	beq.n	2058 <__sfp+0x34>
    2048:	6836      	ldr	r6, [r6, #0]
    204a:	e7f6      	b.n	203a <__sfp+0x16>
    204c:	220c      	movs	r2, #12
    204e:	5ea5      	ldrsh	r5, [r4, r2]
    2050:	2d00      	cmp	r5, #0
    2052:	d00d      	beq.n	2070 <__sfp+0x4c>
    2054:	3468      	adds	r4, #104	; 0x68
    2056:	e7f2      	b.n	203e <__sfp+0x1a>
    2058:	2104      	movs	r1, #4
    205a:	0038      	movs	r0, r7
    205c:	f7ff ff98 	bl	1f90 <__sfmoreglue>
    2060:	6030      	str	r0, [r6, #0]
    2062:	2800      	cmp	r0, #0
    2064:	d1f0      	bne.n	2048 <__sfp+0x24>
    2066:	230c      	movs	r3, #12
    2068:	0004      	movs	r4, r0
    206a:	603b      	str	r3, [r7, #0]
    206c:	0020      	movs	r0, r4
    206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2070:	2301      	movs	r3, #1
    2072:	0020      	movs	r0, r4
    2074:	425b      	negs	r3, r3
    2076:	81e3      	strh	r3, [r4, #14]
    2078:	3302      	adds	r3, #2
    207a:	81a3      	strh	r3, [r4, #12]
    207c:	6665      	str	r5, [r4, #100]	; 0x64
    207e:	6025      	str	r5, [r4, #0]
    2080:	60a5      	str	r5, [r4, #8]
    2082:	6065      	str	r5, [r4, #4]
    2084:	6125      	str	r5, [r4, #16]
    2086:	6165      	str	r5, [r4, #20]
    2088:	61a5      	str	r5, [r4, #24]
    208a:	2208      	movs	r2, #8
    208c:	0029      	movs	r1, r5
    208e:	305c      	adds	r0, #92	; 0x5c
    2090:	f7ff fdde 	bl	1c50 <memset>
    2094:	6365      	str	r5, [r4, #52]	; 0x34
    2096:	63a5      	str	r5, [r4, #56]	; 0x38
    2098:	64a5      	str	r5, [r4, #72]	; 0x48
    209a:	64e5      	str	r5, [r4, #76]	; 0x4c
    209c:	e7e6      	b.n	206c <__sfp+0x48>
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	000025a4 	.word	0x000025a4

000020a4 <_fwalk_reent>:
    20a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20a6:	0004      	movs	r4, r0
    20a8:	0007      	movs	r7, r0
    20aa:	2600      	movs	r6, #0
    20ac:	9101      	str	r1, [sp, #4]
    20ae:	3448      	adds	r4, #72	; 0x48
    20b0:	2c00      	cmp	r4, #0
    20b2:	d101      	bne.n	20b8 <_fwalk_reent+0x14>
    20b4:	0030      	movs	r0, r6
    20b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    20b8:	6863      	ldr	r3, [r4, #4]
    20ba:	68a5      	ldr	r5, [r4, #8]
    20bc:	9300      	str	r3, [sp, #0]
    20be:	9b00      	ldr	r3, [sp, #0]
    20c0:	3b01      	subs	r3, #1
    20c2:	9300      	str	r3, [sp, #0]
    20c4:	d501      	bpl.n	20ca <_fwalk_reent+0x26>
    20c6:	6824      	ldr	r4, [r4, #0]
    20c8:	e7f2      	b.n	20b0 <_fwalk_reent+0xc>
    20ca:	89ab      	ldrh	r3, [r5, #12]
    20cc:	2b01      	cmp	r3, #1
    20ce:	d908      	bls.n	20e2 <_fwalk_reent+0x3e>
    20d0:	220e      	movs	r2, #14
    20d2:	5eab      	ldrsh	r3, [r5, r2]
    20d4:	3301      	adds	r3, #1
    20d6:	d004      	beq.n	20e2 <_fwalk_reent+0x3e>
    20d8:	0029      	movs	r1, r5
    20da:	0038      	movs	r0, r7
    20dc:	9b01      	ldr	r3, [sp, #4]
    20de:	4798      	blx	r3
    20e0:	4306      	orrs	r6, r0
    20e2:	3568      	adds	r5, #104	; 0x68
    20e4:	e7eb      	b.n	20be <_fwalk_reent+0x1a>
	...

000020e8 <__swhatbuf_r>:
    20e8:	b570      	push	{r4, r5, r6, lr}
    20ea:	000e      	movs	r6, r1
    20ec:	001d      	movs	r5, r3
    20ee:	230e      	movs	r3, #14
    20f0:	5ec9      	ldrsh	r1, [r1, r3]
    20f2:	b090      	sub	sp, #64	; 0x40
    20f4:	0014      	movs	r4, r2
    20f6:	2900      	cmp	r1, #0
    20f8:	da07      	bge.n	210a <__swhatbuf_r+0x22>
    20fa:	2300      	movs	r3, #0
    20fc:	602b      	str	r3, [r5, #0]
    20fe:	89b3      	ldrh	r3, [r6, #12]
    2100:	061b      	lsls	r3, r3, #24
    2102:	d411      	bmi.n	2128 <__swhatbuf_r+0x40>
    2104:	2380      	movs	r3, #128	; 0x80
    2106:	00db      	lsls	r3, r3, #3
    2108:	e00f      	b.n	212a <__swhatbuf_r+0x42>
    210a:	aa01      	add	r2, sp, #4
    210c:	f000 f94a 	bl	23a4 <_fstat_r>
    2110:	2800      	cmp	r0, #0
    2112:	dbf2      	blt.n	20fa <__swhatbuf_r+0x12>
    2114:	22f0      	movs	r2, #240	; 0xf0
    2116:	9b02      	ldr	r3, [sp, #8]
    2118:	0212      	lsls	r2, r2, #8
    211a:	4013      	ands	r3, r2
    211c:	4a05      	ldr	r2, [pc, #20]	; (2134 <__swhatbuf_r+0x4c>)
    211e:	189b      	adds	r3, r3, r2
    2120:	425a      	negs	r2, r3
    2122:	4153      	adcs	r3, r2
    2124:	602b      	str	r3, [r5, #0]
    2126:	e7ed      	b.n	2104 <__swhatbuf_r+0x1c>
    2128:	2340      	movs	r3, #64	; 0x40
    212a:	2000      	movs	r0, #0
    212c:	6023      	str	r3, [r4, #0]
    212e:	b010      	add	sp, #64	; 0x40
    2130:	bd70      	pop	{r4, r5, r6, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	ffffe000 	.word	0xffffe000

00002138 <malloc>:
    2138:	b510      	push	{r4, lr}
    213a:	4b03      	ldr	r3, [pc, #12]	; (2148 <malloc+0x10>)
    213c:	0001      	movs	r1, r0
    213e:	6818      	ldr	r0, [r3, #0]
    2140:	f000 f84e 	bl	21e0 <_malloc_r>
    2144:	bd10      	pop	{r4, pc}
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	20000048 	.word	0x20000048

0000214c <_free_r>:
    214c:	b570      	push	{r4, r5, r6, lr}
    214e:	0005      	movs	r5, r0
    2150:	2900      	cmp	r1, #0
    2152:	d010      	beq.n	2176 <_free_r+0x2a>
    2154:	1f0c      	subs	r4, r1, #4
    2156:	6823      	ldr	r3, [r4, #0]
    2158:	2b00      	cmp	r3, #0
    215a:	da00      	bge.n	215e <_free_r+0x12>
    215c:	18e4      	adds	r4, r4, r3
    215e:	0028      	movs	r0, r5
    2160:	f000 f946 	bl	23f0 <__malloc_lock>
    2164:	4a1d      	ldr	r2, [pc, #116]	; (21dc <_free_r+0x90>)
    2166:	6813      	ldr	r3, [r2, #0]
    2168:	2b00      	cmp	r3, #0
    216a:	d105      	bne.n	2178 <_free_r+0x2c>
    216c:	6063      	str	r3, [r4, #4]
    216e:	6014      	str	r4, [r2, #0]
    2170:	0028      	movs	r0, r5
    2172:	f000 f93e 	bl	23f2 <__malloc_unlock>
    2176:	bd70      	pop	{r4, r5, r6, pc}
    2178:	42a3      	cmp	r3, r4
    217a:	d909      	bls.n	2190 <_free_r+0x44>
    217c:	6821      	ldr	r1, [r4, #0]
    217e:	1860      	adds	r0, r4, r1
    2180:	4283      	cmp	r3, r0
    2182:	d1f3      	bne.n	216c <_free_r+0x20>
    2184:	6818      	ldr	r0, [r3, #0]
    2186:	685b      	ldr	r3, [r3, #4]
    2188:	1841      	adds	r1, r0, r1
    218a:	6021      	str	r1, [r4, #0]
    218c:	e7ee      	b.n	216c <_free_r+0x20>
    218e:	0013      	movs	r3, r2
    2190:	685a      	ldr	r2, [r3, #4]
    2192:	2a00      	cmp	r2, #0
    2194:	d001      	beq.n	219a <_free_r+0x4e>
    2196:	42a2      	cmp	r2, r4
    2198:	d9f9      	bls.n	218e <_free_r+0x42>
    219a:	6819      	ldr	r1, [r3, #0]
    219c:	1858      	adds	r0, r3, r1
    219e:	42a0      	cmp	r0, r4
    21a0:	d10b      	bne.n	21ba <_free_r+0x6e>
    21a2:	6820      	ldr	r0, [r4, #0]
    21a4:	1809      	adds	r1, r1, r0
    21a6:	1858      	adds	r0, r3, r1
    21a8:	6019      	str	r1, [r3, #0]
    21aa:	4282      	cmp	r2, r0
    21ac:	d1e0      	bne.n	2170 <_free_r+0x24>
    21ae:	6810      	ldr	r0, [r2, #0]
    21b0:	6852      	ldr	r2, [r2, #4]
    21b2:	1841      	adds	r1, r0, r1
    21b4:	6019      	str	r1, [r3, #0]
    21b6:	605a      	str	r2, [r3, #4]
    21b8:	e7da      	b.n	2170 <_free_r+0x24>
    21ba:	42a0      	cmp	r0, r4
    21bc:	d902      	bls.n	21c4 <_free_r+0x78>
    21be:	230c      	movs	r3, #12
    21c0:	602b      	str	r3, [r5, #0]
    21c2:	e7d5      	b.n	2170 <_free_r+0x24>
    21c4:	6821      	ldr	r1, [r4, #0]
    21c6:	1860      	adds	r0, r4, r1
    21c8:	4282      	cmp	r2, r0
    21ca:	d103      	bne.n	21d4 <_free_r+0x88>
    21cc:	6810      	ldr	r0, [r2, #0]
    21ce:	6852      	ldr	r2, [r2, #4]
    21d0:	1841      	adds	r1, r0, r1
    21d2:	6021      	str	r1, [r4, #0]
    21d4:	6062      	str	r2, [r4, #4]
    21d6:	605c      	str	r4, [r3, #4]
    21d8:	e7ca      	b.n	2170 <_free_r+0x24>
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	20000134 	.word	0x20000134

000021e0 <_malloc_r>:
    21e0:	2303      	movs	r3, #3
    21e2:	b570      	push	{r4, r5, r6, lr}
    21e4:	1ccd      	adds	r5, r1, #3
    21e6:	439d      	bics	r5, r3
    21e8:	3508      	adds	r5, #8
    21ea:	0006      	movs	r6, r0
    21ec:	2d0c      	cmp	r5, #12
    21ee:	d21e      	bcs.n	222e <_malloc_r+0x4e>
    21f0:	250c      	movs	r5, #12
    21f2:	42a9      	cmp	r1, r5
    21f4:	d81d      	bhi.n	2232 <_malloc_r+0x52>
    21f6:	0030      	movs	r0, r6
    21f8:	f000 f8fa 	bl	23f0 <__malloc_lock>
    21fc:	4a25      	ldr	r2, [pc, #148]	; (2294 <_malloc_r+0xb4>)
    21fe:	6814      	ldr	r4, [r2, #0]
    2200:	0021      	movs	r1, r4
    2202:	2900      	cmp	r1, #0
    2204:	d119      	bne.n	223a <_malloc_r+0x5a>
    2206:	4c24      	ldr	r4, [pc, #144]	; (2298 <_malloc_r+0xb8>)
    2208:	6823      	ldr	r3, [r4, #0]
    220a:	2b00      	cmp	r3, #0
    220c:	d103      	bne.n	2216 <_malloc_r+0x36>
    220e:	0030      	movs	r0, r6
    2210:	f000 f844 	bl	229c <_sbrk_r>
    2214:	6020      	str	r0, [r4, #0]
    2216:	0029      	movs	r1, r5
    2218:	0030      	movs	r0, r6
    221a:	f000 f83f 	bl	229c <_sbrk_r>
    221e:	1c43      	adds	r3, r0, #1
    2220:	d12c      	bne.n	227c <_malloc_r+0x9c>
    2222:	230c      	movs	r3, #12
    2224:	0030      	movs	r0, r6
    2226:	6033      	str	r3, [r6, #0]
    2228:	f000 f8e3 	bl	23f2 <__malloc_unlock>
    222c:	e003      	b.n	2236 <_malloc_r+0x56>
    222e:	2d00      	cmp	r5, #0
    2230:	dadf      	bge.n	21f2 <_malloc_r+0x12>
    2232:	230c      	movs	r3, #12
    2234:	6033      	str	r3, [r6, #0]
    2236:	2000      	movs	r0, #0
    2238:	bd70      	pop	{r4, r5, r6, pc}
    223a:	680b      	ldr	r3, [r1, #0]
    223c:	1b5b      	subs	r3, r3, r5
    223e:	d41a      	bmi.n	2276 <_malloc_r+0x96>
    2240:	2b0b      	cmp	r3, #11
    2242:	d903      	bls.n	224c <_malloc_r+0x6c>
    2244:	600b      	str	r3, [r1, #0]
    2246:	18cc      	adds	r4, r1, r3
    2248:	6025      	str	r5, [r4, #0]
    224a:	e003      	b.n	2254 <_malloc_r+0x74>
    224c:	428c      	cmp	r4, r1
    224e:	d10e      	bne.n	226e <_malloc_r+0x8e>
    2250:	6863      	ldr	r3, [r4, #4]
    2252:	6013      	str	r3, [r2, #0]
    2254:	0030      	movs	r0, r6
    2256:	f000 f8cc 	bl	23f2 <__malloc_unlock>
    225a:	0020      	movs	r0, r4
    225c:	2207      	movs	r2, #7
    225e:	300b      	adds	r0, #11
    2260:	1d23      	adds	r3, r4, #4
    2262:	4390      	bics	r0, r2
    2264:	1ac3      	subs	r3, r0, r3
    2266:	d0e7      	beq.n	2238 <_malloc_r+0x58>
    2268:	425a      	negs	r2, r3
    226a:	50e2      	str	r2, [r4, r3]
    226c:	e7e4      	b.n	2238 <_malloc_r+0x58>
    226e:	684b      	ldr	r3, [r1, #4]
    2270:	6063      	str	r3, [r4, #4]
    2272:	000c      	movs	r4, r1
    2274:	e7ee      	b.n	2254 <_malloc_r+0x74>
    2276:	000c      	movs	r4, r1
    2278:	6849      	ldr	r1, [r1, #4]
    227a:	e7c2      	b.n	2202 <_malloc_r+0x22>
    227c:	2303      	movs	r3, #3
    227e:	1cc4      	adds	r4, r0, #3
    2280:	439c      	bics	r4, r3
    2282:	42a0      	cmp	r0, r4
    2284:	d0e0      	beq.n	2248 <_malloc_r+0x68>
    2286:	1a21      	subs	r1, r4, r0
    2288:	0030      	movs	r0, r6
    228a:	f000 f807 	bl	229c <_sbrk_r>
    228e:	1c43      	adds	r3, r0, #1
    2290:	d1da      	bne.n	2248 <_malloc_r+0x68>
    2292:	e7c6      	b.n	2222 <_malloc_r+0x42>
    2294:	20000134 	.word	0x20000134
    2298:	20000138 	.word	0x20000138

0000229c <_sbrk_r>:
    229c:	2300      	movs	r3, #0
    229e:	b570      	push	{r4, r5, r6, lr}
    22a0:	4c06      	ldr	r4, [pc, #24]	; (22bc <_sbrk_r+0x20>)
    22a2:	0005      	movs	r5, r0
    22a4:	0008      	movs	r0, r1
    22a6:	6023      	str	r3, [r4, #0]
    22a8:	f7fe fd72 	bl	d90 <_sbrk>
    22ac:	1c43      	adds	r3, r0, #1
    22ae:	d103      	bne.n	22b8 <_sbrk_r+0x1c>
    22b0:	6823      	ldr	r3, [r4, #0]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d000      	beq.n	22b8 <_sbrk_r+0x1c>
    22b6:	602b      	str	r3, [r5, #0]
    22b8:	bd70      	pop	{r4, r5, r6, pc}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	20000240 	.word	0x20000240

000022c0 <__sread>:
    22c0:	b570      	push	{r4, r5, r6, lr}
    22c2:	000c      	movs	r4, r1
    22c4:	250e      	movs	r5, #14
    22c6:	5f49      	ldrsh	r1, [r1, r5]
    22c8:	f000 f894 	bl	23f4 <_read_r>
    22cc:	2800      	cmp	r0, #0
    22ce:	db03      	blt.n	22d8 <__sread+0x18>
    22d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    22d2:	181b      	adds	r3, r3, r0
    22d4:	6563      	str	r3, [r4, #84]	; 0x54
    22d6:	bd70      	pop	{r4, r5, r6, pc}
    22d8:	89a3      	ldrh	r3, [r4, #12]
    22da:	4a02      	ldr	r2, [pc, #8]	; (22e4 <__sread+0x24>)
    22dc:	4013      	ands	r3, r2
    22de:	81a3      	strh	r3, [r4, #12]
    22e0:	e7f9      	b.n	22d6 <__sread+0x16>
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	ffffefff 	.word	0xffffefff

000022e8 <__swrite>:
    22e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ea:	001f      	movs	r7, r3
    22ec:	898b      	ldrh	r3, [r1, #12]
    22ee:	0005      	movs	r5, r0
    22f0:	000c      	movs	r4, r1
    22f2:	0016      	movs	r6, r2
    22f4:	05db      	lsls	r3, r3, #23
    22f6:	d505      	bpl.n	2304 <__swrite+0x1c>
    22f8:	230e      	movs	r3, #14
    22fa:	5ec9      	ldrsh	r1, [r1, r3]
    22fc:	2200      	movs	r2, #0
    22fe:	2302      	movs	r3, #2
    2300:	f000 f862 	bl	23c8 <_lseek_r>
    2304:	89a3      	ldrh	r3, [r4, #12]
    2306:	4a05      	ldr	r2, [pc, #20]	; (231c <__swrite+0x34>)
    2308:	0028      	movs	r0, r5
    230a:	4013      	ands	r3, r2
    230c:	81a3      	strh	r3, [r4, #12]
    230e:	0032      	movs	r2, r6
    2310:	230e      	movs	r3, #14
    2312:	5ee1      	ldrsh	r1, [r4, r3]
    2314:	003b      	movs	r3, r7
    2316:	f000 f81f 	bl	2358 <_write_r>
    231a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    231c:	ffffefff 	.word	0xffffefff

00002320 <__sseek>:
    2320:	b570      	push	{r4, r5, r6, lr}
    2322:	000c      	movs	r4, r1
    2324:	250e      	movs	r5, #14
    2326:	5f49      	ldrsh	r1, [r1, r5]
    2328:	f000 f84e 	bl	23c8 <_lseek_r>
    232c:	89a3      	ldrh	r3, [r4, #12]
    232e:	1c42      	adds	r2, r0, #1
    2330:	d103      	bne.n	233a <__sseek+0x1a>
    2332:	4a05      	ldr	r2, [pc, #20]	; (2348 <__sseek+0x28>)
    2334:	4013      	ands	r3, r2
    2336:	81a3      	strh	r3, [r4, #12]
    2338:	bd70      	pop	{r4, r5, r6, pc}
    233a:	2280      	movs	r2, #128	; 0x80
    233c:	0152      	lsls	r2, r2, #5
    233e:	4313      	orrs	r3, r2
    2340:	81a3      	strh	r3, [r4, #12]
    2342:	6560      	str	r0, [r4, #84]	; 0x54
    2344:	e7f8      	b.n	2338 <__sseek+0x18>
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	ffffefff 	.word	0xffffefff

0000234c <__sclose>:
    234c:	b510      	push	{r4, lr}
    234e:	230e      	movs	r3, #14
    2350:	5ec9      	ldrsh	r1, [r1, r3]
    2352:	f000 f815 	bl	2380 <_close_r>
    2356:	bd10      	pop	{r4, pc}

00002358 <_write_r>:
    2358:	b570      	push	{r4, r5, r6, lr}
    235a:	0005      	movs	r5, r0
    235c:	0008      	movs	r0, r1
    235e:	0011      	movs	r1, r2
    2360:	2200      	movs	r2, #0
    2362:	4c06      	ldr	r4, [pc, #24]	; (237c <_write_r+0x24>)
    2364:	6022      	str	r2, [r4, #0]
    2366:	001a      	movs	r2, r3
    2368:	f7ff f94a 	bl	1600 <_write>
    236c:	1c43      	adds	r3, r0, #1
    236e:	d103      	bne.n	2378 <_write_r+0x20>
    2370:	6823      	ldr	r3, [r4, #0]
    2372:	2b00      	cmp	r3, #0
    2374:	d000      	beq.n	2378 <_write_r+0x20>
    2376:	602b      	str	r3, [r5, #0]
    2378:	bd70      	pop	{r4, r5, r6, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	20000240 	.word	0x20000240

00002380 <_close_r>:
    2380:	2300      	movs	r3, #0
    2382:	b570      	push	{r4, r5, r6, lr}
    2384:	4c06      	ldr	r4, [pc, #24]	; (23a0 <_close_r+0x20>)
    2386:	0005      	movs	r5, r0
    2388:	0008      	movs	r0, r1
    238a:	6023      	str	r3, [r4, #0]
    238c:	f7fe fd12 	bl	db4 <_close>
    2390:	1c43      	adds	r3, r0, #1
    2392:	d103      	bne.n	239c <_close_r+0x1c>
    2394:	6823      	ldr	r3, [r4, #0]
    2396:	2b00      	cmp	r3, #0
    2398:	d000      	beq.n	239c <_close_r+0x1c>
    239a:	602b      	str	r3, [r5, #0]
    239c:	bd70      	pop	{r4, r5, r6, pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	20000240 	.word	0x20000240

000023a4 <_fstat_r>:
    23a4:	2300      	movs	r3, #0
    23a6:	b570      	push	{r4, r5, r6, lr}
    23a8:	4c06      	ldr	r4, [pc, #24]	; (23c4 <_fstat_r+0x20>)
    23aa:	0005      	movs	r5, r0
    23ac:	0008      	movs	r0, r1
    23ae:	0011      	movs	r1, r2
    23b0:	6023      	str	r3, [r4, #0]
    23b2:	f7fe fd02 	bl	dba <_fstat>
    23b6:	1c43      	adds	r3, r0, #1
    23b8:	d103      	bne.n	23c2 <_fstat_r+0x1e>
    23ba:	6823      	ldr	r3, [r4, #0]
    23bc:	2b00      	cmp	r3, #0
    23be:	d000      	beq.n	23c2 <_fstat_r+0x1e>
    23c0:	602b      	str	r3, [r5, #0]
    23c2:	bd70      	pop	{r4, r5, r6, pc}
    23c4:	20000240 	.word	0x20000240

000023c8 <_lseek_r>:
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	0005      	movs	r5, r0
    23cc:	0008      	movs	r0, r1
    23ce:	0011      	movs	r1, r2
    23d0:	2200      	movs	r2, #0
    23d2:	4c06      	ldr	r4, [pc, #24]	; (23ec <_lseek_r+0x24>)
    23d4:	6022      	str	r2, [r4, #0]
    23d6:	001a      	movs	r2, r3
    23d8:	f7fe fcf4 	bl	dc4 <_lseek>
    23dc:	1c43      	adds	r3, r0, #1
    23de:	d103      	bne.n	23e8 <_lseek_r+0x20>
    23e0:	6823      	ldr	r3, [r4, #0]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d000      	beq.n	23e8 <_lseek_r+0x20>
    23e6:	602b      	str	r3, [r5, #0]
    23e8:	bd70      	pop	{r4, r5, r6, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	20000240 	.word	0x20000240

000023f0 <__malloc_lock>:
    23f0:	4770      	bx	lr

000023f2 <__malloc_unlock>:
    23f2:	4770      	bx	lr

000023f4 <_read_r>:
    23f4:	b570      	push	{r4, r5, r6, lr}
    23f6:	0005      	movs	r5, r0
    23f8:	0008      	movs	r0, r1
    23fa:	0011      	movs	r1, r2
    23fc:	2200      	movs	r2, #0
    23fe:	4c06      	ldr	r4, [pc, #24]	; (2418 <_read_r+0x24>)
    2400:	6022      	str	r2, [r4, #0]
    2402:	001a      	movs	r2, r3
    2404:	f7ff f8e8 	bl	15d8 <_read>
    2408:	1c43      	adds	r3, r0, #1
    240a:	d103      	bne.n	2414 <_read_r+0x20>
    240c:	6823      	ldr	r3, [r4, #0]
    240e:	2b00      	cmp	r3, #0
    2410:	d000      	beq.n	2414 <_read_r+0x20>
    2412:	602b      	str	r3, [r5, #0]
    2414:	bd70      	pop	{r4, r5, r6, pc}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	20000240 	.word	0x20000240
    241c:	682f2e2e 	.word	0x682f2e2e
    2420:	732f6c61 	.word	0x732f6c61
    2424:	682f6372 	.word	0x682f6372
    2428:	695f6c61 	.word	0x695f6c61
    242c:	00632e6f 	.word	0x00632e6f
    2430:	682f2e2e 	.word	0x682f2e2e
    2434:	732f6c61 	.word	0x732f6c61
    2438:	682f6372 	.word	0x682f6372
    243c:	745f6c61 	.word	0x745f6c61
    2440:	72656d69 	.word	0x72656d69
    2444:	0000632e 	.word	0x0000632e
    2448:	682f2e2e 	.word	0x682f2e2e
    244c:	732f6c61 	.word	0x732f6c61
    2450:	682f6372 	.word	0x682f6372
    2454:	755f6c61 	.word	0x755f6c61
    2458:	74726173 	.word	0x74726173
    245c:	7973615f 	.word	0x7973615f
    2460:	632e636e 	.word	0x632e636e
    2464:	00000000 	.word	0x00000000
    2468:	682f2e2e 	.word	0x682f2e2e
    246c:	732f6c61 	.word	0x732f6c61
    2470:	682f6372 	.word	0x682f6372
    2474:	755f6c61 	.word	0x755f6c61
    2478:	74726173 	.word	0x74726173
    247c:	6e79735f 	.word	0x6e79735f
    2480:	00632e63 	.word	0x00632e63
    2484:	682f2e2e 	.word	0x682f2e2e
    2488:	752f6c61 	.word	0x752f6c61
    248c:	736c6974 	.word	0x736c6974
    2490:	6372732f 	.word	0x6372732f
    2494:	6974752f 	.word	0x6974752f
    2498:	6c5f736c 	.word	0x6c5f736c
    249c:	2e747369 	.word	0x2e747369
    24a0:	00000063 	.word	0x00000063
    24a4:	682f2e2e 	.word	0x682f2e2e
    24a8:	752f6c61 	.word	0x752f6c61
    24ac:	736c6974 	.word	0x736c6974
    24b0:	6372732f 	.word	0x6372732f
    24b4:	6974752f 	.word	0x6974752f
    24b8:	725f736c 	.word	0x725f736c
    24bc:	62676e69 	.word	0x62676e69
    24c0:	65666675 	.word	0x65666675
    24c4:	00632e72 	.word	0x00632e72
    24c8:	682f2e2e 	.word	0x682f2e2e
    24cc:	722f6c70 	.word	0x722f6c70
    24d0:	682f6374 	.word	0x682f6374
    24d4:	725f6c70 	.word	0x725f6c70
    24d8:	632e6374 	.word	0x632e6374
    24dc:	00000000 	.word	0x00000000

000024e0 <_usarts>:
    24e0:	00000000 40100004 00030000 00008a09     .......@........
    24f0:	00000000 00000001 40100004 00030000     ...........@....
    2500:	0000ff2e 00000000 00000004 40100004     ...............@
    2510:	00030000 0000ff2e 00000000              ............

0000251c <_i2cms>:
	...

00002534 <_i2css>:
	...

00002544 <sercomspi_regs>:
	...
    2558:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2568:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00002574 <multipliers_tau_calc>:
    2574:	00130007 00900035                       ....5...

0000257c <gain_setting_int_cap>:
    257c:	050b1c3f 03020103                                ?.....

00002582 <PTC_XY_PINS>:
    2582:	05040302 21200706 25242322 29282726     ...... !"#$%&'()
    2592:	0b0a0908 13121110 17161514 2f2e2d2c     ............,-./
	...

000025a4 <_global_impure_ptr>:
    25a4:	2000004c                                L.. 

000025a8 <__sf_fake_stderr>:
	...

000025c8 <__sf_fake_stdin>:
	...

000025e8 <__sf_fake_stdout>:
	...

00002608 <_init>:
    2608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    260e:	bc08      	pop	{r3}
    2610:	469e      	mov	lr, r3
    2612:	4770      	bx	lr

00002614 <__init_array_start>:
    2614:	000000dd 	.word	0x000000dd

00002618 <_fini>:
    2618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    261e:	bc08      	pop	{r3}
    2620:	469e      	mov	lr, r3
    2622:	4770      	bx	lr

00002624 <__fini_array_start>:
    2624:	000000b5 	.word	0x000000b5
