
WorkingProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004308  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c0  20000000  00004308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000218  200000c0  000043c8  000200c0  2**2
                  ALLOC
  3 .stack        00002000  200002d8  000045e0  000200c0  2**0
                  ALLOC
  4 .ARM.attributes 0000002d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
  5 .comment      000000c7  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e8f3  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000454a  00000000  00000000  0004eaa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000ec9c  00000000  00000000  00052ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f18  00000000  00000000  00061c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f28  00000000  00000000  00062ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d974  00000000  00000000  00063acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015955  00000000  00000000  00081441  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089974  00000000  00000000  00096d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002e8c  00000000  00000000  0012070c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 22 00 20 35 01 00 00 31 01 00 00 31 01 00 00     .". 5...1...1...
	...
      2c:	31 01 00 00 00 00 00 00 00 00 00 00 31 01 00 00     1...........1...
      3c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      4c:	65 0f 00 00 31 01 00 00 31 01 00 00 31 01 00 00     e...1...1...1...
      5c:	31 01 00 00 31 01 00 00 f9 12 00 00 31 01 00 00     1...1.......1...
      6c:	31 01 00 00 31 01 00 00 0d 13 00 00 31 01 00 00     1...1.......1...
      7c:	31 01 00 00 31 01 00 00 31 01 00 00 31 01 00 00     1...1...1...1...
      8c:	31 01 00 00 31 01 00 00 00 00 00 00 00 00 00 00     1...1...........
      9c:	31 01 00 00 31 01 00 00 31 01 00 00 51 15 00 00     1...1...1...Q...
      ac:	31 01 00 00 00 00 00 00                             1.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000c0 	.word	0x200000c0
      d4:	00000000 	.word	0x00000000
      d8:	00004308 	.word	0x00004308

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c4 	.word	0x200000c4
     108:	00004308 	.word	0x00004308
     10c:	00004308 	.word	0x00004308
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <atmel_start_init+0x10>)
     118:	4798      	blx	r3
	stdio_redirect_init();
     11a:	4b03      	ldr	r3, [pc, #12]	; (128 <atmel_start_init+0x14>)
     11c:	4798      	blx	r3

	touch_init();
     11e:	4b03      	ldr	r3, [pc, #12]	; (12c <atmel_start_init+0x18>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	00000439 	.word	0x00000439
     128:	00001629 	.word	0x00001629
     12c:	00001535 	.word	0x00001535

00000130 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     130:	e7fe      	b.n	130 <Dummy_Handler>
	...

00000134 <Reset_Handler>:
{
     134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     136:	4a23      	ldr	r2, [pc, #140]	; (1c4 <Reset_Handler+0x90>)
     138:	4b23      	ldr	r3, [pc, #140]	; (1c8 <Reset_Handler+0x94>)
     13a:	429a      	cmp	r2, r3
     13c:	d009      	beq.n	152 <Reset_Handler+0x1e>
     13e:	4b22      	ldr	r3, [pc, #136]	; (1c8 <Reset_Handler+0x94>)
     140:	4a20      	ldr	r2, [pc, #128]	; (1c4 <Reset_Handler+0x90>)
     142:	e003      	b.n	14c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     144:	6811      	ldr	r1, [r2, #0]
     146:	6019      	str	r1, [r3, #0]
     148:	3304      	adds	r3, #4
     14a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14c:	491f      	ldr	r1, [pc, #124]	; (1cc <Reset_Handler+0x98>)
     14e:	428b      	cmp	r3, r1
     150:	d3f8      	bcc.n	144 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     152:	4b1f      	ldr	r3, [pc, #124]	; (1d0 <Reset_Handler+0x9c>)
     154:	e002      	b.n	15c <Reset_Handler+0x28>
                *pDest++ = 0;
     156:	2200      	movs	r2, #0
     158:	601a      	str	r2, [r3, #0]
     15a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     15c:	4a1d      	ldr	r2, [pc, #116]	; (1d4 <Reset_Handler+0xa0>)
     15e:	4293      	cmp	r3, r2
     160:	d3f9      	bcc.n	156 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     162:	4a1d      	ldr	r2, [pc, #116]	; (1d8 <Reset_Handler+0xa4>)
     164:	21ff      	movs	r1, #255	; 0xff
     166:	4b1d      	ldr	r3, [pc, #116]	; (1dc <Reset_Handler+0xa8>)
     168:	438b      	bics	r3, r1
     16a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16c:	39fd      	subs	r1, #253	; 0xfd
     16e:	2390      	movs	r3, #144	; 0x90
     170:	005b      	lsls	r3, r3, #1
     172:	4a1b      	ldr	r2, [pc, #108]	; (1e0 <Reset_Handler+0xac>)
     174:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     176:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xb0>)
     178:	78d3      	ldrb	r3, [r2, #3]
     17a:	2503      	movs	r5, #3
     17c:	43ab      	bics	r3, r5
     17e:	2402      	movs	r4, #2
     180:	4323      	orrs	r3, r4
     182:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     184:	78d3      	ldrb	r3, [r2, #3]
     186:	270c      	movs	r7, #12
     188:	43bb      	bics	r3, r7
     18a:	2608      	movs	r6, #8
     18c:	4333      	orrs	r3, r6
     18e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     190:	4b15      	ldr	r3, [pc, #84]	; (1e8 <Reset_Handler+0xb4>)
     192:	7b98      	ldrb	r0, [r3, #14]
     194:	2230      	movs	r2, #48	; 0x30
     196:	4390      	bics	r0, r2
     198:	2220      	movs	r2, #32
     19a:	4310      	orrs	r0, r2
     19c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     19e:	7b99      	ldrb	r1, [r3, #14]
     1a0:	43b9      	bics	r1, r7
     1a2:	4331      	orrs	r1, r6
     1a4:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a6:	7b9a      	ldrb	r2, [r3, #14]
     1a8:	43aa      	bics	r2, r5
     1aa:	4322      	orrs	r2, r4
     1ac:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1ae:	4a0f      	ldr	r2, [pc, #60]	; (1ec <Reset_Handler+0xb8>)
     1b0:	6851      	ldr	r1, [r2, #4]
     1b2:	2380      	movs	r3, #128	; 0x80
     1b4:	430b      	orrs	r3, r1
     1b6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1b8:	4b0d      	ldr	r3, [pc, #52]	; (1f0 <Reset_Handler+0xbc>)
     1ba:	4798      	blx	r3
        main();
     1bc:	4b0d      	ldr	r3, [pc, #52]	; (1f4 <Reset_Handler+0xc0>)
     1be:	4798      	blx	r3
     1c0:	e7fe      	b.n	1c0 <Reset_Handler+0x8c>
     1c2:	46c0      	nop			; (mov r8, r8)
     1c4:	00004308 	.word	0x00004308
     1c8:	20000000 	.word	0x20000000
     1cc:	200000c0 	.word	0x200000c0
     1d0:	200000c0 	.word	0x200000c0
     1d4:	200002d8 	.word	0x200002d8
     1d8:	e000ed00 	.word	0xe000ed00
     1dc:	00000000 	.word	0x00000000
     1e0:	41007000 	.word	0x41007000
     1e4:	41005000 	.word	0x41005000
     1e8:	41004800 	.word	0x41004800
     1ec:	41004000 	.word	0x41004000
     1f0:	00002981 	.word	0x00002981
     1f4:	00001415 	.word	0x00001415

000001f8 <PTC_clock_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     1f8:	4a04      	ldr	r2, [pc, #16]	; (20c <PTC_clock_init+0x14>)
     1fa:	6a11      	ldr	r1, [r2, #32]
     1fc:	2380      	movs	r3, #128	; 0x80
     1fe:	031b      	lsls	r3, r3, #12
     200:	430b      	orrs	r3, r1
     202:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     204:	4a02      	ldr	r2, [pc, #8]	; (210 <PTC_clock_init+0x18>)
     206:	4b03      	ldr	r3, [pc, #12]	; (214 <PTC_clock_init+0x1c>)
     208:	805a      	strh	r2, [r3, #2]
 */
static void PTC_clock_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, PTC);
	_gclk_enable_channel(PTC_GCLK_ID, CONF_GCLK_PTC_SRC);
}
     20a:	4770      	bx	lr
     20c:	40000400 	.word	0x40000400
     210:	00004222 	.word	0x00004222
     214:	40000c00 	.word	0x40000c00

00000218 <Timer_init>:
{
     218:	b510      	push	{r4, lr}
		PM->APBAMASK.reg |= 1 << peripheral;
     21a:	4a08      	ldr	r2, [pc, #32]	; (23c <Timer_init+0x24>)
     21c:	6993      	ldr	r3, [r2, #24]
     21e:	2120      	movs	r1, #32
     220:	430b      	orrs	r3, r1
     222:	6193      	str	r3, [r2, #24]
     224:	4a06      	ldr	r2, [pc, #24]	; (240 <Timer_init+0x28>)
     226:	4b07      	ldr	r3, [pc, #28]	; (244 <Timer_init+0x2c>)
     228:	805a      	strh	r2, [r3, #2]
	timer_init(&Timer, RTC, _rtc_get_timer());
     22a:	4b07      	ldr	r3, [pc, #28]	; (248 <Timer_init+0x30>)
     22c:	4798      	blx	r3
     22e:	0002      	movs	r2, r0
     230:	4906      	ldr	r1, [pc, #24]	; (24c <Timer_init+0x34>)
     232:	4807      	ldr	r0, [pc, #28]	; (250 <Timer_init+0x38>)
     234:	4b07      	ldr	r3, [pc, #28]	; (254 <Timer_init+0x3c>)
     236:	4798      	blx	r3
}
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	40000400 	.word	0x40000400
     240:	00004104 	.word	0x00004104
     244:	40000c00 	.word	0x40000c00
     248:	00000f61 	.word	0x00000f61
     24c:	40001400 	.word	0x40001400
     250:	200001b0 	.word	0x200001b0
     254:	000005d1 	.word	0x000005d1

00000258 <USART_CLOCK_init>:
		PM->APBCMASK.reg |= 1 << peripheral;
     258:	4a04      	ldr	r2, [pc, #16]	; (26c <USART_CLOCK_init+0x14>)
     25a:	6a13      	ldr	r3, [r2, #32]
     25c:	2104      	movs	r1, #4
     25e:	430b      	orrs	r3, r1
     260:	6213      	str	r3, [r2, #32]
     262:	4a03      	ldr	r2, [pc, #12]	; (270 <USART_CLOCK_init+0x18>)
     264:	4b03      	ldr	r3, [pc, #12]	; (274 <USART_CLOCK_init+0x1c>)
     266:	805a      	strh	r2, [r3, #2]
}
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40000400 	.word	0x40000400
     270:	00004214 	.word	0x00004214
     274:	40000c00 	.word	0x40000c00

00000278 <USART_PORT_init>:
{
     278:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     27a:	4b0f      	ldr	r3, [pc, #60]	; (2b8 <USART_PORT_init+0x40>)
     27c:	2248      	movs	r2, #72	; 0x48
     27e:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     280:	2501      	movs	r5, #1
     282:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     284:	2401      	movs	r4, #1
     286:	4321      	orrs	r1, r4
     288:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     28a:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     28c:	2034      	movs	r0, #52	; 0x34
     28e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     290:	3a39      	subs	r2, #57	; 0x39
     292:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     294:	2202      	movs	r2, #2
     296:	4311      	orrs	r1, r2
     298:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     29a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     29c:	2149      	movs	r1, #73	; 0x49
     29e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2a0:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2a2:	4322      	orrs	r2, r4
     2a4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2aa:	393a      	subs	r1, #58	; 0x3a
     2ac:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2ae:	2120      	movs	r1, #32
     2b0:	430a      	orrs	r2, r1
     2b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2b4:	541a      	strb	r2, [r3, r0]
}
     2b6:	bd30      	pop	{r4, r5, pc}
     2b8:	41004400 	.word	0x41004400

000002bc <USART_init>:
{
     2bc:	b510      	push	{r4, lr}
     2be:	b082      	sub	sp, #8
	USART_CLOCK_init();
     2c0:	4b06      	ldr	r3, [pc, #24]	; (2dc <USART_init+0x20>)
     2c2:	4798      	blx	r3
	usart_async_init(&USART, SERCOM0, USART_buffer, USART_BUFFER_SIZE, (void *)NULL);
     2c4:	2300      	movs	r3, #0
     2c6:	9300      	str	r3, [sp, #0]
     2c8:	3310      	adds	r3, #16
     2ca:	4a05      	ldr	r2, [pc, #20]	; (2e0 <USART_init+0x24>)
     2cc:	4905      	ldr	r1, [pc, #20]	; (2e4 <USART_init+0x28>)
     2ce:	4806      	ldr	r0, [pc, #24]	; (2e8 <USART_init+0x2c>)
     2d0:	4c06      	ldr	r4, [pc, #24]	; (2ec <USART_init+0x30>)
     2d2:	47a0      	blx	r4
	USART_PORT_init();
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <USART_init+0x34>)
     2d6:	4798      	blx	r3
}
     2d8:	b002      	add	sp, #8
     2da:	bd10      	pop	{r4, pc}
     2dc:	00000259 	.word	0x00000259
     2e0:	200000dc 	.word	0x200000dc
     2e4:	42000800 	.word	0x42000800
     2e8:	200001cc 	.word	0x200001cc
     2ec:	00000915 	.word	0x00000915
     2f0:	00000279 	.word	0x00000279

000002f4 <TARGET_IO_PORT_init>:
{
     2f4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2f6:	4b0f      	ldr	r3, [pc, #60]	; (334 <TARGET_IO_PORT_init+0x40>)
     2f8:	2240      	movs	r2, #64	; 0x40
     2fa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2fc:	2501      	movs	r5, #1
     2fe:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     300:	2401      	movs	r4, #1
     302:	4321      	orrs	r1, r4
     304:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     306:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     308:	2030      	movs	r0, #48	; 0x30
     30a:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     30c:	3a31      	subs	r2, #49	; 0x31
     30e:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     310:	2203      	movs	r2, #3
     312:	4311      	orrs	r1, r2
     314:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     316:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     318:	2141      	movs	r1, #65	; 0x41
     31a:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     31c:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     31e:	4322      	orrs	r2, r4
     320:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     322:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     324:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     326:	3932      	subs	r1, #50	; 0x32
     328:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     32a:	2130      	movs	r1, #48	; 0x30
     32c:	430a      	orrs	r2, r1
     32e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     330:	541a      	strb	r2, [r3, r0]
}
     332:	bd30      	pop	{r4, r5, pc}
     334:	41004400 	.word	0x41004400

00000338 <TARGET_IO_CLOCK_init>:
     338:	4a04      	ldr	r2, [pc, #16]	; (34c <TARGET_IO_CLOCK_init+0x14>)
     33a:	6a13      	ldr	r3, [r2, #32]
     33c:	2108      	movs	r1, #8
     33e:	430b      	orrs	r3, r1
     340:	6213      	str	r3, [r2, #32]
     342:	4a03      	ldr	r2, [pc, #12]	; (350 <TARGET_IO_CLOCK_init+0x18>)
     344:	4b03      	ldr	r3, [pc, #12]	; (354 <TARGET_IO_CLOCK_init+0x1c>)
     346:	805a      	strh	r2, [r3, #2]
}
     348:	4770      	bx	lr
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	40000400 	.word	0x40000400
     350:	00004015 	.word	0x00004015
     354:	40000c00 	.word	0x40000c00

00000358 <TARGET_IO_init>:
{
     358:	b510      	push	{r4, lr}
	TARGET_IO_CLOCK_init();
     35a:	4b05      	ldr	r3, [pc, #20]	; (370 <TARGET_IO_init+0x18>)
     35c:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM1, (void *)NULL);
     35e:	2200      	movs	r2, #0
     360:	4904      	ldr	r1, [pc, #16]	; (374 <TARGET_IO_init+0x1c>)
     362:	4805      	ldr	r0, [pc, #20]	; (378 <TARGET_IO_init+0x20>)
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <TARGET_IO_init+0x24>)
     366:	4798      	blx	r3
	TARGET_IO_PORT_init();
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <TARGET_IO_init+0x28>)
     36a:	4798      	blx	r3
}
     36c:	bd10      	pop	{r4, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	00000339 	.word	0x00000339
     374:	42000c00 	.word	0x42000c00
     378:	200001a4 	.word	0x200001a4
     37c:	00000b65 	.word	0x00000b65
     380:	000002f5 	.word	0x000002f5

00000384 <SERIAL_CLOCK_init>:
     384:	4a04      	ldr	r2, [pc, #16]	; (398 <SERIAL_CLOCK_init+0x14>)
     386:	6a13      	ldr	r3, [r2, #32]
     388:	2140      	movs	r1, #64	; 0x40
     38a:	430b      	orrs	r3, r1
     38c:	6213      	str	r3, [r2, #32]
     38e:	4a03      	ldr	r2, [pc, #12]	; (39c <SERIAL_CLOCK_init+0x18>)
     390:	4b03      	ldr	r3, [pc, #12]	; (3a0 <SERIAL_CLOCK_init+0x1c>)
     392:	805a      	strh	r2, [r3, #2]
}
     394:	4770      	bx	lr
     396:	46c0      	nop			; (mov r8, r8)
     398:	40000400 	.word	0x40000400
     39c:	00004018 	.word	0x00004018
     3a0:	40000c00 	.word	0x40000c00

000003a4 <SERIAL_PORT_init>:
{
     3a4:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a6:	4b0f      	ldr	r3, [pc, #60]	; (3e4 <SERIAL_PORT_init+0x40>)
     3a8:	22c8      	movs	r2, #200	; 0xc8
     3aa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ac:	2501      	movs	r5, #1
     3ae:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b0:	2401      	movs	r4, #1
     3b2:	4321      	orrs	r1, r4
     3b4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b6:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b8:	20b4      	movs	r0, #180	; 0xb4
     3ba:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3bc:	3ab9      	subs	r2, #185	; 0xb9
     3be:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     3c0:	2203      	movs	r2, #3
     3c2:	4311      	orrs	r1, r2
     3c4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c8:	21c9      	movs	r1, #201	; 0xc9
     3ca:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3cc:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3ce:	4322      	orrs	r2, r4
     3d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d6:	39ba      	subs	r1, #186	; 0xba
     3d8:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     3da:	2130      	movs	r1, #48	; 0x30
     3dc:	430a      	orrs	r2, r1
     3de:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e0:	541a      	strb	r2, [r3, r0]
}
     3e2:	bd30      	pop	{r4, r5, pc}
     3e4:	41004400 	.word	0x41004400

000003e8 <SERIAL_init>:
{
     3e8:	b510      	push	{r4, lr}
     3ea:	b082      	sub	sp, #8
	SERIAL_CLOCK_init();
     3ec:	4b07      	ldr	r3, [pc, #28]	; (40c <SERIAL_init+0x24>)
     3ee:	4798      	blx	r3
	usart_async_init(&SERIAL, SERCOM4, SERIAL_buffer, SERIAL_BUFFER_SIZE, (void *)NULL);
     3f0:	2300      	movs	r3, #0
     3f2:	9300      	str	r3, [sp, #0]
     3f4:	3310      	adds	r3, #16
     3f6:	4a06      	ldr	r2, [pc, #24]	; (410 <SERIAL_init+0x28>)
     3f8:	3210      	adds	r2, #16
     3fa:	4906      	ldr	r1, [pc, #24]	; (414 <SERIAL_init+0x2c>)
     3fc:	4806      	ldr	r0, [pc, #24]	; (418 <SERIAL_init+0x30>)
     3fe:	4c07      	ldr	r4, [pc, #28]	; (41c <SERIAL_init+0x34>)
     400:	47a0      	blx	r4
	SERIAL_PORT_init();
     402:	4b07      	ldr	r3, [pc, #28]	; (420 <SERIAL_init+0x38>)
     404:	4798      	blx	r3
}
     406:	b002      	add	sp, #8
     408:	bd10      	pop	{r4, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	00000385 	.word	0x00000385
     410:	200000dc 	.word	0x200000dc
     414:	42001800 	.word	0x42001800
     418:	20000154 	.word	0x20000154
     41c:	00000915 	.word	0x00000915
     420:	000003a5 	.word	0x000003a5

00000424 <delay_driver_init>:
{
     424:	b510      	push	{r4, lr}
	delay_init(SysTick);
     426:	4802      	ldr	r0, [pc, #8]	; (430 <delay_driver_init+0xc>)
     428:	4b02      	ldr	r3, [pc, #8]	; (434 <delay_driver_init+0x10>)
     42a:	4798      	blx	r3
}
     42c:	bd10      	pop	{r4, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	e000e010 	.word	0xe000e010
     434:	00000491 	.word	0x00000491

00000438 <system_init>:

void system_init(void)
{
     438:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     43a:	4b07      	ldr	r3, [pc, #28]	; (458 <system_init+0x20>)
     43c:	4798      	blx	r3
	init_mcu();

	USART_init();
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <system_init+0x24>)
     440:	4798      	blx	r3

	TARGET_IO_init();
     442:	4b07      	ldr	r3, [pc, #28]	; (460 <system_init+0x28>)
     444:	4798      	blx	r3
	SERIAL_init();
     446:	4b07      	ldr	r3, [pc, #28]	; (464 <system_init+0x2c>)
     448:	4798      	blx	r3

	delay_driver_init();
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <system_init+0x30>)
     44c:	4798      	blx	r3

	Timer_init();
     44e:	4b07      	ldr	r3, [pc, #28]	; (46c <system_init+0x34>)
     450:	4798      	blx	r3

	PTC_clock_init();
     452:	4b07      	ldr	r3, [pc, #28]	; (470 <system_init+0x38>)
     454:	4798      	blx	r3
}
     456:	bd10      	pop	{r4, pc}
     458:	00000dad 	.word	0x00000dad
     45c:	000002bd 	.word	0x000002bd
     460:	00000359 	.word	0x00000359
     464:	000003e9 	.word	0x000003e9
     468:	00000425 	.word	0x00000425
     46c:	00000219 	.word	0x00000219
     470:	000001f9 	.word	0x000001f9

00000474 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     474:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     478:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     47a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     47c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     480:	4770      	bx	lr

00000482 <atomic_leave_critical>:
     482:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     486:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     488:	f383 8810 	msr	PRIMASK, r3
}
     48c:	4770      	bx	lr
	...

00000490 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     490:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     492:	4b02      	ldr	r3, [pc, #8]	; (49c <delay_init+0xc>)
     494:	6018      	str	r0, [r3, #0]
     496:	4b02      	ldr	r3, [pc, #8]	; (4a0 <delay_init+0x10>)
     498:	4798      	blx	r3
}
     49a:	bd10      	pop	{r4, pc}
     49c:	200000fc 	.word	0x200000fc
     4a0:	00001409 	.word	0x00001409

000004a4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4a4:	b570      	push	{r4, r5, r6, lr}
     4a6:	0004      	movs	r4, r0
     4a8:	000d      	movs	r5, r1
     4aa:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4ac:	2800      	cmp	r0, #0
     4ae:	d00e      	beq.n	4ce <io_write+0x2a>
     4b0:	2900      	cmp	r1, #0
     4b2:	d00a      	beq.n	4ca <io_write+0x26>
     4b4:	2001      	movs	r0, #1
     4b6:	2234      	movs	r2, #52	; 0x34
     4b8:	4906      	ldr	r1, [pc, #24]	; (4d4 <io_write+0x30>)
     4ba:	4b07      	ldr	r3, [pc, #28]	; (4d8 <io_write+0x34>)
     4bc:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4be:	6823      	ldr	r3, [r4, #0]
     4c0:	0032      	movs	r2, r6
     4c2:	0029      	movs	r1, r5
     4c4:	0020      	movs	r0, r4
     4c6:	4798      	blx	r3
}
     4c8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     4ca:	2000      	movs	r0, #0
     4cc:	e7f3      	b.n	4b6 <io_write+0x12>
     4ce:	2000      	movs	r0, #0
     4d0:	e7f1      	b.n	4b6 <io_write+0x12>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	00003d5c 	.word	0x00003d5c
     4d8:	00000bdd 	.word	0x00000bdd

000004dc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     4dc:	b570      	push	{r4, r5, r6, lr}
     4de:	0004      	movs	r4, r0
     4e0:	000d      	movs	r5, r1
     4e2:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4e4:	2800      	cmp	r0, #0
     4e6:	d00e      	beq.n	506 <io_read+0x2a>
     4e8:	2900      	cmp	r1, #0
     4ea:	d00a      	beq.n	502 <io_read+0x26>
     4ec:	2001      	movs	r0, #1
     4ee:	223d      	movs	r2, #61	; 0x3d
     4f0:	4906      	ldr	r1, [pc, #24]	; (50c <io_read+0x30>)
     4f2:	4b07      	ldr	r3, [pc, #28]	; (510 <io_read+0x34>)
     4f4:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     4f6:	6863      	ldr	r3, [r4, #4]
     4f8:	0032      	movs	r2, r6
     4fa:	0029      	movs	r1, r5
     4fc:	0020      	movs	r0, r4
     4fe:	4798      	blx	r3
}
     500:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     502:	2000      	movs	r0, #0
     504:	e7f3      	b.n	4ee <io_read+0x12>
     506:	2000      	movs	r0, #0
     508:	e7f1      	b.n	4ee <io_read+0x12>
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	00003d5c 	.word	0x00003d5c
     510:	00000bdd 	.word	0x00000bdd

00000514 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     516:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     518:	2e00      	cmp	r6, #0
     51a:	d002      	beq.n	522 <timer_add_timer_task+0xe>
     51c:	0033      	movs	r3, r6
     51e:	2500      	movs	r5, #0
     520:	e00c      	b.n	53c <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     522:	4b10      	ldr	r3, [pc, #64]	; (564 <timer_add_timer_task+0x50>)
     524:	4798      	blx	r3
		return;
     526:	e018      	b.n	55a <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     528:	689f      	ldr	r7, [r3, #8]
     52a:	46bc      	mov	ip, r7
     52c:	4464      	add	r4, ip
     52e:	1aa4      	subs	r4, r4, r2
     530:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     532:	688f      	ldr	r7, [r1, #8]
     534:	42bc      	cmp	r4, r7
     536:	d20b      	bcs.n	550 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     538:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     53a:	681b      	ldr	r3, [r3, #0]
     53c:	2b00      	cmp	r3, #0
     53e:	d007      	beq.n	550 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     540:	685c      	ldr	r4, [r3, #4]
     542:	4294      	cmp	r4, r2
     544:	d8f0      	bhi.n	528 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     546:	1aa4      	subs	r4, r4, r2
     548:	689f      	ldr	r7, [r3, #8]
     54a:	46bc      	mov	ip, r7
     54c:	4464      	add	r4, ip
     54e:	e7f0      	b.n	532 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     550:	42b3      	cmp	r3, r6
     552:	d003      	beq.n	55c <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     554:	0028      	movs	r0, r5
     556:	4b04      	ldr	r3, [pc, #16]	; (568 <timer_add_timer_task+0x54>)
     558:	4798      	blx	r3
	}
}
     55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     55c:	4b01      	ldr	r3, [pc, #4]	; (564 <timer_add_timer_task+0x50>)
     55e:	4798      	blx	r3
     560:	e7fb      	b.n	55a <timer_add_timer_task+0x46>
     562:	46c0      	nop			; (mov r8, r8)
     564:	00000bfd 	.word	0x00000bfd
     568:	00000c29 	.word	0x00000c29

0000056c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     56e:	0005      	movs	r5, r0
     570:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     572:	6903      	ldr	r3, [r0, #16]
     574:	1c5e      	adds	r6, r3, #1
     576:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     578:	7e03      	ldrb	r3, [r0, #24]
     57a:	07db      	lsls	r3, r3, #31
     57c:	d402      	bmi.n	584 <timer_process_counted+0x18>
     57e:	7e03      	ldrb	r3, [r0, #24]
     580:	079b      	lsls	r3, r3, #30
     582:	d50a      	bpl.n	59a <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     584:	7e2b      	ldrb	r3, [r5, #24]
     586:	2202      	movs	r2, #2
     588:	4313      	orrs	r3, r2
     58a:	b2db      	uxtb	r3, r3
     58c:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     590:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     592:	68e3      	ldr	r3, [r4, #12]
     594:	0020      	movs	r0, r4
     596:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     598:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     59a:	2c00      	cmp	r4, #0
     59c:	d0f7      	beq.n	58e <timer_process_counted+0x22>
     59e:	6863      	ldr	r3, [r4, #4]
     5a0:	1af3      	subs	r3, r6, r3
     5a2:	68a2      	ldr	r2, [r4, #8]
     5a4:	4293      	cmp	r3, r2
     5a6:	d3f2      	bcc.n	58e <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     5a8:	002f      	movs	r7, r5
     5aa:	3714      	adds	r7, #20
     5ac:	0038      	movs	r0, r7
     5ae:	4b06      	ldr	r3, [pc, #24]	; (5c8 <timer_process_counted+0x5c>)
     5b0:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     5b2:	7c23      	ldrb	r3, [r4, #16]
     5b4:	2b01      	cmp	r3, #1
     5b6:	d1eb      	bne.n	590 <timer_process_counted+0x24>
			tmp->time_label = time;
     5b8:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     5ba:	0032      	movs	r2, r6
     5bc:	0021      	movs	r1, r4
     5be:	0038      	movs	r0, r7
     5c0:	4b02      	ldr	r3, [pc, #8]	; (5cc <timer_process_counted+0x60>)
     5c2:	4798      	blx	r3
     5c4:	e7e4      	b.n	590 <timer_process_counted+0x24>
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	00000c31 	.word	0x00000c31
     5cc:	00000515 	.word	0x00000515

000005d0 <timer_init>:
{
     5d0:	b570      	push	{r4, r5, r6, lr}
     5d2:	0004      	movs	r4, r0
     5d4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5d6:	2800      	cmp	r0, #0
     5d8:	d012      	beq.n	600 <timer_init+0x30>
     5da:	2900      	cmp	r1, #0
     5dc:	d00e      	beq.n	5fc <timer_init+0x2c>
     5de:	2001      	movs	r0, #1
     5e0:	223b      	movs	r2, #59	; 0x3b
     5e2:	4908      	ldr	r1, [pc, #32]	; (604 <timer_init+0x34>)
     5e4:	4b08      	ldr	r3, [pc, #32]	; (608 <timer_init+0x38>)
     5e6:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     5e8:	0029      	movs	r1, r5
     5ea:	0020      	movs	r0, r4
     5ec:	4b07      	ldr	r3, [pc, #28]	; (60c <timer_init+0x3c>)
     5ee:	4798      	blx	r3
	descr->time                           = 0;
     5f0:	2300      	movs	r3, #0
     5f2:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     5f4:	4b06      	ldr	r3, [pc, #24]	; (610 <timer_init+0x40>)
     5f6:	6023      	str	r3, [r4, #0]
}
     5f8:	2000      	movs	r0, #0
     5fa:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     5fc:	2000      	movs	r0, #0
     5fe:	e7ef      	b.n	5e0 <timer_init+0x10>
     600:	2000      	movs	r0, #0
     602:	e7ed      	b.n	5e0 <timer_init+0x10>
     604:	00003d70 	.word	0x00003d70
     608:	00000bdd 	.word	0x00000bdd
     60c:	00000e99 	.word	0x00000e99
     610:	0000056d 	.word	0x0000056d

00000614 <timer_start>:
{
     614:	b510      	push	{r4, lr}
     616:	0004      	movs	r4, r0
	ASSERT(descr);
     618:	1e43      	subs	r3, r0, #1
     61a:	4198      	sbcs	r0, r3
     61c:	b2c0      	uxtb	r0, r0
     61e:	2253      	movs	r2, #83	; 0x53
     620:	4907      	ldr	r1, [pc, #28]	; (640 <timer_start+0x2c>)
     622:	4b08      	ldr	r3, [pc, #32]	; (644 <timer_start+0x30>)
     624:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     626:	0020      	movs	r0, r4
     628:	4b07      	ldr	r3, [pc, #28]	; (648 <timer_start+0x34>)
     62a:	4798      	blx	r3
     62c:	2800      	cmp	r0, #0
     62e:	d104      	bne.n	63a <timer_start+0x26>
	_timer_start(&descr->device);
     630:	0020      	movs	r0, r4
     632:	4b06      	ldr	r3, [pc, #24]	; (64c <timer_start+0x38>)
     634:	4798      	blx	r3
	return ERR_NONE;
     636:	2000      	movs	r0, #0
}
     638:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     63a:	2011      	movs	r0, #17
     63c:	4240      	negs	r0, r0
     63e:	e7fb      	b.n	638 <timer_start+0x24>
     640:	00003d70 	.word	0x00003d70
     644:	00000bdd 	.word	0x00000bdd
     648:	00000f4d 	.word	0x00000f4d
     64c:	00000ef5 	.word	0x00000ef5

00000650 <timer_add_task>:
{
     650:	b570      	push	{r4, r5, r6, lr}
     652:	b082      	sub	sp, #8
     654:	0004      	movs	r4, r0
     656:	000d      	movs	r5, r1
	ASSERT(descr && task);
     658:	2800      	cmp	r0, #0
     65a:	d026      	beq.n	6aa <timer_add_task+0x5a>
     65c:	2900      	cmp	r1, #0
     65e:	d022      	beq.n	6a6 <timer_add_task+0x56>
     660:	2001      	movs	r0, #1
     662:	227a      	movs	r2, #122	; 0x7a
     664:	491f      	ldr	r1, [pc, #124]	; (6e4 <timer_add_task+0x94>)
     666:	4b20      	ldr	r3, [pc, #128]	; (6e8 <timer_add_task+0x98>)
     668:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     66a:	7e23      	ldrb	r3, [r4, #24]
     66c:	2201      	movs	r2, #1
     66e:	4313      	orrs	r3, r2
     670:	b2db      	uxtb	r3, r3
     672:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     674:	0026      	movs	r6, r4
     676:	3614      	adds	r6, #20
     678:	0029      	movs	r1, r5
     67a:	0030      	movs	r0, r6
     67c:	4b1b      	ldr	r3, [pc, #108]	; (6ec <timer_add_task+0x9c>)
     67e:	4798      	blx	r3
     680:	2800      	cmp	r0, #0
     682:	d114      	bne.n	6ae <timer_add_task+0x5e>
	task->time_label = descr->time;
     684:	6923      	ldr	r3, [r4, #16]
     686:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     688:	6922      	ldr	r2, [r4, #16]
     68a:	0029      	movs	r1, r5
     68c:	0030      	movs	r0, r6
     68e:	4b18      	ldr	r3, [pc, #96]	; (6f0 <timer_add_task+0xa0>)
     690:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     692:	7e23      	ldrb	r3, [r4, #24]
     694:	2201      	movs	r2, #1
     696:	4393      	bics	r3, r2
     698:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     69a:	7e23      	ldrb	r3, [r4, #24]
     69c:	079b      	lsls	r3, r3, #30
     69e:	d412      	bmi.n	6c6 <timer_add_task+0x76>
	return ERR_NONE;
     6a0:	2000      	movs	r0, #0
}
     6a2:	b002      	add	sp, #8
     6a4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     6a6:	2000      	movs	r0, #0
     6a8:	e7db      	b.n	662 <timer_add_task+0x12>
     6aa:	2000      	movs	r0, #0
     6ac:	e7d9      	b.n	662 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6ae:	7e23      	ldrb	r3, [r4, #24]
     6b0:	2201      	movs	r2, #1
     6b2:	4393      	bics	r3, r2
     6b4:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     6b6:	327e      	adds	r2, #126	; 0x7e
     6b8:	490a      	ldr	r1, [pc, #40]	; (6e4 <timer_add_task+0x94>)
     6ba:	2000      	movs	r0, #0
     6bc:	4b0a      	ldr	r3, [pc, #40]	; (6e8 <timer_add_task+0x98>)
     6be:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     6c0:	2012      	movs	r0, #18
     6c2:	4240      	negs	r0, r0
     6c4:	e7ed      	b.n	6a2 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     6c6:	a801      	add	r0, sp, #4
     6c8:	4b0a      	ldr	r3, [pc, #40]	; (6f4 <timer_add_task+0xa4>)
     6ca:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     6cc:	7e23      	ldrb	r3, [r4, #24]
     6ce:	2202      	movs	r2, #2
     6d0:	4393      	bics	r3, r2
     6d2:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     6d4:	0020      	movs	r0, r4
     6d6:	4b08      	ldr	r3, [pc, #32]	; (6f8 <timer_add_task+0xa8>)
     6d8:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     6da:	a801      	add	r0, sp, #4
     6dc:	4b07      	ldr	r3, [pc, #28]	; (6fc <timer_add_task+0xac>)
     6de:	4798      	blx	r3
	return ERR_NONE;
     6e0:	2000      	movs	r0, #0
     6e2:	e7de      	b.n	6a2 <timer_add_task+0x52>
     6e4:	00003d70 	.word	0x00003d70
     6e8:	00000bdd 	.word	0x00000bdd
     6ec:	00000be5 	.word	0x00000be5
     6f0:	00000515 	.word	0x00000515
     6f4:	00000475 	.word	0x00000475
     6f8:	00000f5f 	.word	0x00000f5f
     6fc:	00000483 	.word	0x00000483

00000700 <timer_remove_task>:
{
     700:	b570      	push	{r4, r5, r6, lr}
     702:	b082      	sub	sp, #8
     704:	0004      	movs	r4, r0
     706:	000d      	movs	r5, r1
	ASSERT(descr && task);
     708:	2800      	cmp	r0, #0
     70a:	d023      	beq.n	754 <timer_remove_task+0x54>
     70c:	2900      	cmp	r1, #0
     70e:	d01f      	beq.n	750 <timer_remove_task+0x50>
     710:	2001      	movs	r0, #1
     712:	2295      	movs	r2, #149	; 0x95
     714:	491d      	ldr	r1, [pc, #116]	; (78c <timer_remove_task+0x8c>)
     716:	4b1e      	ldr	r3, [pc, #120]	; (790 <timer_remove_task+0x90>)
     718:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     71a:	7e23      	ldrb	r3, [r4, #24]
     71c:	2201      	movs	r2, #1
     71e:	4313      	orrs	r3, r2
     720:	b2db      	uxtb	r3, r3
     722:	7623      	strb	r3, [r4, #24]
	if (!is_list_element(&descr->tasks, task)) {
     724:	0026      	movs	r6, r4
     726:	3614      	adds	r6, #20
     728:	0029      	movs	r1, r5
     72a:	0030      	movs	r0, r6
     72c:	4b19      	ldr	r3, [pc, #100]	; (794 <timer_remove_task+0x94>)
     72e:	4798      	blx	r3
     730:	2800      	cmp	r0, #0
     732:	d011      	beq.n	758 <timer_remove_task+0x58>
	list_delete_element(&descr->tasks, task);
     734:	0029      	movs	r1, r5
     736:	0030      	movs	r0, r6
     738:	4b17      	ldr	r3, [pc, #92]	; (798 <timer_remove_task+0x98>)
     73a:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     73c:	7e23      	ldrb	r3, [r4, #24]
     73e:	2201      	movs	r2, #1
     740:	4393      	bics	r3, r2
     742:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     744:	7e23      	ldrb	r3, [r4, #24]
     746:	079b      	lsls	r3, r3, #30
     748:	d411      	bmi.n	76e <timer_remove_task+0x6e>
	return ERR_NONE;
     74a:	2000      	movs	r0, #0
}
     74c:	b002      	add	sp, #8
     74e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     750:	2000      	movs	r0, #0
     752:	e7de      	b.n	712 <timer_remove_task+0x12>
     754:	2000      	movs	r0, #0
     756:	e7dc      	b.n	712 <timer_remove_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     758:	7e23      	ldrb	r3, [r4, #24]
     75a:	2201      	movs	r2, #1
     75c:	4393      	bics	r3, r2
     75e:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     760:	3299      	adds	r2, #153	; 0x99
     762:	490a      	ldr	r1, [pc, #40]	; (78c <timer_remove_task+0x8c>)
     764:	4b0a      	ldr	r3, [pc, #40]	; (790 <timer_remove_task+0x90>)
     766:	4798      	blx	r3
		return ERR_NOT_FOUND;
     768:	200a      	movs	r0, #10
     76a:	4240      	negs	r0, r0
     76c:	e7ee      	b.n	74c <timer_remove_task+0x4c>
		CRITICAL_SECTION_ENTER()
     76e:	a801      	add	r0, sp, #4
     770:	4b0a      	ldr	r3, [pc, #40]	; (79c <timer_remove_task+0x9c>)
     772:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     774:	7e23      	ldrb	r3, [r4, #24]
     776:	2202      	movs	r2, #2
     778:	4393      	bics	r3, r2
     77a:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     77c:	0020      	movs	r0, r4
     77e:	4b08      	ldr	r3, [pc, #32]	; (7a0 <timer_remove_task+0xa0>)
     780:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     782:	a801      	add	r0, sp, #4
     784:	4b07      	ldr	r3, [pc, #28]	; (7a4 <timer_remove_task+0xa4>)
     786:	4798      	blx	r3
	return ERR_NONE;
     788:	2000      	movs	r0, #0
     78a:	e7df      	b.n	74c <timer_remove_task+0x4c>
     78c:	00003d70 	.word	0x00003d70
     790:	00000bdd 	.word	0x00000bdd
     794:	00000be5 	.word	0x00000be5
     798:	00000c43 	.word	0x00000c43
     79c:	00000475 	.word	0x00000475
     7a0:	00000f5f 	.word	0x00000f5f
     7a4:	00000483 	.word	0x00000483

000007a8 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     7a8:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7aa:	3808      	subs	r0, #8

	descr->stat = 0;
     7ac:	2300      	movs	r3, #0
     7ae:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     7b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
     7b2:	2b00      	cmp	r3, #0
     7b4:	d000      	beq.n	7b8 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     7b6:	4798      	blx	r3
	}
}
     7b8:	bd10      	pop	{r4, pc}

000007ba <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     7ba:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7bc:	3808      	subs	r0, #8

	descr->stat = 0;
     7be:	2300      	movs	r3, #0
     7c0:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     7c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     7c4:	2b00      	cmp	r3, #0
     7c6:	d000      	beq.n	7ca <usart_error+0x10>
		descr->usart_cb.error(descr);
     7c8:	4798      	blx	r3
	}
}
     7ca:	bd10      	pop	{r4, pc}

000007cc <usart_fill_rx_buffer>:
{
     7cc:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7ce:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     7d0:	302c      	adds	r0, #44	; 0x2c
     7d2:	4b04      	ldr	r3, [pc, #16]	; (7e4 <usart_fill_rx_buffer+0x18>)
     7d4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     7d6:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7d8:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     7da:	2b00      	cmp	r3, #0
     7dc:	d001      	beq.n	7e2 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     7de:	0020      	movs	r0, r4
     7e0:	4798      	blx	r3
}
     7e2:	bd10      	pop	{r4, pc}
     7e4:	00000d0d 	.word	0x00000d0d

000007e8 <usart_async_write>:
{
     7e8:	b570      	push	{r4, r5, r6, lr}
     7ea:	0004      	movs	r4, r0
     7ec:	000e      	movs	r6, r1
     7ee:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     7f0:	2800      	cmp	r0, #0
     7f2:	d01d      	beq.n	830 <usart_async_write+0x48>
     7f4:	2900      	cmp	r1, #0
     7f6:	d01d      	beq.n	834 <usart_async_write+0x4c>
     7f8:	2a00      	cmp	r2, #0
     7fa:	d11d      	bne.n	838 <usart_async_write+0x50>
     7fc:	2000      	movs	r0, #0
     7fe:	223c      	movs	r2, #60	; 0x3c
     800:	32ff      	adds	r2, #255	; 0xff
     802:	4910      	ldr	r1, [pc, #64]	; (844 <usart_async_write+0x5c>)
     804:	4b10      	ldr	r3, [pc, #64]	; (848 <usart_async_write+0x60>)
     806:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     808:	2344      	movs	r3, #68	; 0x44
     80a:	5ae2      	ldrh	r2, [r4, r3]
     80c:	3308      	adds	r3, #8
     80e:	5ae3      	ldrh	r3, [r4, r3]
     810:	429a      	cmp	r2, r3
     812:	d113      	bne.n	83c <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     814:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     816:	234c      	movs	r3, #76	; 0x4c
     818:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     81a:	2200      	movs	r2, #0
     81c:	3b08      	subs	r3, #8
     81e:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     820:	3b43      	subs	r3, #67	; 0x43
     822:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     824:	0020      	movs	r0, r4
     826:	3008      	adds	r0, #8
     828:	4b08      	ldr	r3, [pc, #32]	; (84c <usart_async_write+0x64>)
     82a:	4798      	blx	r3
	return (int32_t)length;
     82c:	0028      	movs	r0, r5
}
     82e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     830:	2000      	movs	r0, #0
     832:	e7e4      	b.n	7fe <usart_async_write+0x16>
     834:	2000      	movs	r0, #0
     836:	e7e2      	b.n	7fe <usart_async_write+0x16>
     838:	2001      	movs	r0, #1
     83a:	e7e0      	b.n	7fe <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     83c:	201c      	movs	r0, #28
     83e:	4240      	negs	r0, r0
     840:	e7f5      	b.n	82e <usart_async_write+0x46>
     842:	46c0      	nop			; (mov r8, r8)
     844:	00003d88 	.word	0x00003d88
     848:	00000bdd 	.word	0x00000bdd
     84c:	0000126f 	.word	0x0000126f

00000850 <usart_process_byte_sent>:
{
     850:	b570      	push	{r4, r5, r6, lr}
     852:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     854:	0002      	movs	r2, r0
     856:	3a08      	subs	r2, #8
     858:	2344      	movs	r3, #68	; 0x44
     85a:	5ad3      	ldrh	r3, [r2, r3]
     85c:	214c      	movs	r1, #76	; 0x4c
     85e:	5a52      	ldrh	r2, [r2, r1]
     860:	4293      	cmp	r3, r2
     862:	d00d      	beq.n	880 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     864:	0002      	movs	r2, r0
     866:	6c01      	ldr	r1, [r0, #64]	; 0x40
     868:	3a08      	subs	r2, #8
     86a:	1c5d      	adds	r5, r3, #1
     86c:	2044      	movs	r0, #68	; 0x44
     86e:	5215      	strh	r5, [r2, r0]
     870:	5cc9      	ldrb	r1, [r1, r3]
     872:	0020      	movs	r0, r4
     874:	4b04      	ldr	r3, [pc, #16]	; (888 <usart_process_byte_sent+0x38>)
     876:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     878:	0020      	movs	r0, r4
     87a:	4b04      	ldr	r3, [pc, #16]	; (88c <usart_process_byte_sent+0x3c>)
     87c:	4798      	blx	r3
}
     87e:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     880:	4b03      	ldr	r3, [pc, #12]	; (890 <usart_process_byte_sent+0x40>)
     882:	4798      	blx	r3
}
     884:	e7fb      	b.n	87e <usart_process_byte_sent+0x2e>
     886:	46c0      	nop			; (mov r8, r8)
     888:	0000123d 	.word	0x0000123d
     88c:	0000126f 	.word	0x0000126f
     890:	00001277 	.word	0x00001277

00000894 <usart_async_read>:
{
     894:	b5f0      	push	{r4, r5, r6, r7, lr}
     896:	b085      	sub	sp, #20
     898:	0004      	movs	r4, r0
     89a:	000d      	movs	r5, r1
     89c:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     89e:	2800      	cmp	r0, #0
     8a0:	d017      	beq.n	8d2 <usart_async_read+0x3e>
     8a2:	2900      	cmp	r1, #0
     8a4:	d017      	beq.n	8d6 <usart_async_read+0x42>
     8a6:	2a00      	cmp	r2, #0
     8a8:	d117      	bne.n	8da <usart_async_read+0x46>
     8aa:	2000      	movs	r0, #0
     8ac:	22ac      	movs	r2, #172	; 0xac
     8ae:	0052      	lsls	r2, r2, #1
     8b0:	4912      	ldr	r1, [pc, #72]	; (8fc <usart_async_read+0x68>)
     8b2:	4b13      	ldr	r3, [pc, #76]	; (900 <usart_async_read+0x6c>)
     8b4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     8b6:	a803      	add	r0, sp, #12
     8b8:	4b12      	ldr	r3, [pc, #72]	; (904 <usart_async_read+0x70>)
     8ba:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     8bc:	3434      	adds	r4, #52	; 0x34
     8be:	0020      	movs	r0, r4
     8c0:	9401      	str	r4, [sp, #4]
     8c2:	4b11      	ldr	r3, [pc, #68]	; (908 <usart_async_read+0x74>)
     8c4:	4798      	blx	r3
     8c6:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     8c8:	a803      	add	r0, sp, #12
     8ca:	4b10      	ldr	r3, [pc, #64]	; (90c <usart_async_read+0x78>)
     8cc:	4798      	blx	r3
	uint16_t                       was_read = 0;
     8ce:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     8d0:	e00b      	b.n	8ea <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     8d2:	2000      	movs	r0, #0
     8d4:	e7ea      	b.n	8ac <usart_async_read+0x18>
     8d6:	2000      	movs	r0, #0
     8d8:	e7e8      	b.n	8ac <usart_async_read+0x18>
     8da:	2001      	movs	r0, #1
     8dc:	e7e6      	b.n	8ac <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     8de:	3401      	adds	r4, #1
     8e0:	b2a4      	uxth	r4, r4
     8e2:	1869      	adds	r1, r5, r1
     8e4:	9801      	ldr	r0, [sp, #4]
     8e6:	4b0a      	ldr	r3, [pc, #40]	; (910 <usart_async_read+0x7c>)
     8e8:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     8ea:	0021      	movs	r1, r4
     8ec:	42a7      	cmp	r7, r4
     8ee:	d901      	bls.n	8f4 <usart_async_read+0x60>
     8f0:	42b4      	cmp	r4, r6
     8f2:	d3f4      	bcc.n	8de <usart_async_read+0x4a>
}
     8f4:	0020      	movs	r0, r4
     8f6:	b005      	add	sp, #20
     8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	00003d88 	.word	0x00003d88
     900:	00000bdd 	.word	0x00000bdd
     904:	00000475 	.word	0x00000475
     908:	00000d4d 	.word	0x00000d4d
     90c:	00000483 	.word	0x00000483
     910:	00000cc1 	.word	0x00000cc1

00000914 <usart_async_init>:
{
     914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     916:	0004      	movs	r4, r0
     918:	000d      	movs	r5, r1
     91a:	0016      	movs	r6, r2
     91c:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     91e:	2800      	cmp	r0, #0
     920:	d026      	beq.n	970 <usart_async_init+0x5c>
     922:	2900      	cmp	r1, #0
     924:	d026      	beq.n	974 <usart_async_init+0x60>
     926:	2a00      	cmp	r2, #0
     928:	d026      	beq.n	978 <usart_async_init+0x64>
     92a:	2b00      	cmp	r3, #0
     92c:	d126      	bne.n	97c <usart_async_init+0x68>
     92e:	2000      	movs	r0, #0
     930:	223a      	movs	r2, #58	; 0x3a
     932:	4915      	ldr	r1, [pc, #84]	; (988 <usart_async_init+0x74>)
     934:	4b15      	ldr	r3, [pc, #84]	; (98c <usart_async_init+0x78>)
     936:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     938:	0020      	movs	r0, r4
     93a:	3034      	adds	r0, #52	; 0x34
     93c:	003a      	movs	r2, r7
     93e:	0031      	movs	r1, r6
     940:	4b13      	ldr	r3, [pc, #76]	; (990 <usart_async_init+0x7c>)
     942:	4798      	blx	r3
     944:	2800      	cmp	r0, #0
     946:	d11b      	bne.n	980 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     948:	0020      	movs	r0, r4
     94a:	3008      	adds	r0, #8
     94c:	0029      	movs	r1, r5
     94e:	4b11      	ldr	r3, [pc, #68]	; (994 <usart_async_init+0x80>)
     950:	4798      	blx	r3
	if (init_status) {
     952:	2800      	cmp	r0, #0
     954:	d10b      	bne.n	96e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     956:	4b10      	ldr	r3, [pc, #64]	; (998 <usart_async_init+0x84>)
     958:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     95a:	4b10      	ldr	r3, [pc, #64]	; (99c <usart_async_init+0x88>)
     95c:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     95e:	4b10      	ldr	r3, [pc, #64]	; (9a0 <usart_async_init+0x8c>)
     960:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     962:	4b10      	ldr	r3, [pc, #64]	; (9a4 <usart_async_init+0x90>)
     964:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     966:	4b10      	ldr	r3, [pc, #64]	; (9a8 <usart_async_init+0x94>)
     968:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     96a:	4b10      	ldr	r3, [pc, #64]	; (9ac <usart_async_init+0x98>)
     96c:	6163      	str	r3, [r4, #20]
}
     96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     970:	2000      	movs	r0, #0
     972:	e7dd      	b.n	930 <usart_async_init+0x1c>
     974:	2000      	movs	r0, #0
     976:	e7db      	b.n	930 <usart_async_init+0x1c>
     978:	2000      	movs	r0, #0
     97a:	e7d9      	b.n	930 <usart_async_init+0x1c>
     97c:	2001      	movs	r0, #1
     97e:	e7d7      	b.n	930 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     980:	200d      	movs	r0, #13
     982:	4240      	negs	r0, r0
     984:	e7f3      	b.n	96e <usart_async_init+0x5a>
     986:	46c0      	nop			; (mov r8, r8)
     988:	00003d88 	.word	0x00003d88
     98c:	00000bdd 	.word	0x00000bdd
     990:	00000c75 	.word	0x00000c75
     994:	00001185 	.word	0x00001185
     998:	00000895 	.word	0x00000895
     99c:	000007e9 	.word	0x000007e9
     9a0:	00000851 	.word	0x00000851
     9a4:	000007cd 	.word	0x000007cd
     9a8:	000007a9 	.word	0x000007a9
     9ac:	000007bb 	.word	0x000007bb

000009b0 <usart_async_enable>:
{
     9b0:	b510      	push	{r4, lr}
     9b2:	0004      	movs	r4, r0
	ASSERT(descr);
     9b4:	1e43      	subs	r3, r0, #1
     9b6:	4198      	sbcs	r0, r3
     9b8:	b2c0      	uxtb	r0, r0
     9ba:	2261      	movs	r2, #97	; 0x61
     9bc:	4904      	ldr	r1, [pc, #16]	; (9d0 <usart_async_enable+0x20>)
     9be:	4b05      	ldr	r3, [pc, #20]	; (9d4 <usart_async_enable+0x24>)
     9c0:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     9c2:	0020      	movs	r0, r4
     9c4:	3008      	adds	r0, #8
     9c6:	4b04      	ldr	r3, [pc, #16]	; (9d8 <usart_async_enable+0x28>)
     9c8:	4798      	blx	r3
}
     9ca:	2000      	movs	r0, #0
     9cc:	bd10      	pop	{r4, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	00003d88 	.word	0x00003d88
     9d4:	00000bdd 	.word	0x00000bdd
     9d8:	00001223 	.word	0x00001223

000009dc <usart_async_get_io_descriptor>:
{
     9dc:	b570      	push	{r4, r5, r6, lr}
     9de:	0004      	movs	r4, r0
     9e0:	000d      	movs	r5, r1
	ASSERT(descr && io);
     9e2:	2800      	cmp	r0, #0
     9e4:	d00b      	beq.n	9fe <usart_async_get_io_descriptor+0x22>
     9e6:	2900      	cmp	r1, #0
     9e8:	d007      	beq.n	9fa <usart_async_get_io_descriptor+0x1e>
     9ea:	2001      	movs	r0, #1
     9ec:	2277      	movs	r2, #119	; 0x77
     9ee:	4905      	ldr	r1, [pc, #20]	; (a04 <usart_async_get_io_descriptor+0x28>)
     9f0:	4b05      	ldr	r3, [pc, #20]	; (a08 <usart_async_get_io_descriptor+0x2c>)
     9f2:	4798      	blx	r3
	*io = &descr->io;
     9f4:	602c      	str	r4, [r5, #0]
}
     9f6:	2000      	movs	r0, #0
     9f8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     9fa:	2000      	movs	r0, #0
     9fc:	e7f6      	b.n	9ec <usart_async_get_io_descriptor+0x10>
     9fe:	2000      	movs	r0, #0
     a00:	e7f4      	b.n	9ec <usart_async_get_io_descriptor+0x10>
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00003d88 	.word	0x00003d88
     a08:	00000bdd 	.word	0x00000bdd

00000a0c <usart_async_register_callback>:
{
     a0c:	b570      	push	{r4, r5, r6, lr}
     a0e:	0005      	movs	r5, r0
     a10:	000e      	movs	r6, r1
     a12:	0014      	movs	r4, r2
	ASSERT(descr);
     a14:	1e43      	subs	r3, r0, #1
     a16:	4198      	sbcs	r0, r3
     a18:	b2c0      	uxtb	r0, r0
     a1a:	2283      	movs	r2, #131	; 0x83
     a1c:	4916      	ldr	r1, [pc, #88]	; (a78 <usart_async_register_callback+0x6c>)
     a1e:	4b17      	ldr	r3, [pc, #92]	; (a7c <usart_async_register_callback+0x70>)
     a20:	4798      	blx	r3
	switch (type) {
     a22:	2e01      	cmp	r6, #1
     a24:	d011      	beq.n	a4a <usart_async_register_callback+0x3e>
     a26:	2e00      	cmp	r6, #0
     a28:	d004      	beq.n	a34 <usart_async_register_callback+0x28>
     a2a:	2e02      	cmp	r6, #2
     a2c:	d018      	beq.n	a60 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     a2e:	200d      	movs	r0, #13
     a30:	4240      	negs	r0, r0
     a32:	e009      	b.n	a48 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     a34:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     a36:	1e62      	subs	r2, r4, #1
     a38:	4194      	sbcs	r4, r2
     a3a:	b2e2      	uxtb	r2, r4
     a3c:	0028      	movs	r0, r5
     a3e:	3008      	adds	r0, #8
     a40:	2101      	movs	r1, #1
     a42:	4b0f      	ldr	r3, [pc, #60]	; (a80 <usart_async_register_callback+0x74>)
     a44:	4798      	blx	r3
	return ERR_NONE;
     a46:	2000      	movs	r0, #0
}
     a48:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     a4a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     a4c:	1e62      	subs	r2, r4, #1
     a4e:	4194      	sbcs	r4, r2
     a50:	b2e2      	uxtb	r2, r4
     a52:	0028      	movs	r0, r5
     a54:	3008      	adds	r0, #8
     a56:	2102      	movs	r1, #2
     a58:	4b09      	ldr	r3, [pc, #36]	; (a80 <usart_async_register_callback+0x74>)
     a5a:	4798      	blx	r3
	return ERR_NONE;
     a5c:	2000      	movs	r0, #0
		break;
     a5e:	e7f3      	b.n	a48 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     a60:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     a62:	1e62      	subs	r2, r4, #1
     a64:	4194      	sbcs	r4, r2
     a66:	b2e2      	uxtb	r2, r4
     a68:	0028      	movs	r0, r5
     a6a:	3008      	adds	r0, #8
     a6c:	2103      	movs	r1, #3
     a6e:	4b04      	ldr	r3, [pc, #16]	; (a80 <usart_async_register_callback+0x74>)
     a70:	4798      	blx	r3
	return ERR_NONE;
     a72:	2000      	movs	r0, #0
		break;
     a74:	e7e8      	b.n	a48 <usart_async_register_callback+0x3c>
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	00003d88 	.word	0x00003d88
     a7c:	00000bdd 	.word	0x00000bdd
     a80:	00001281 	.word	0x00001281

00000a84 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a86:	0005      	movs	r5, r0
     a88:	000e      	movs	r6, r1
     a8a:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     a8c:	2800      	cmp	r0, #0
     a8e:	d023      	beq.n	ad8 <usart_sync_write+0x54>
     a90:	2900      	cmp	r1, #0
     a92:	d023      	beq.n	adc <usart_sync_write+0x58>
     a94:	2a00      	cmp	r2, #0
     a96:	d123      	bne.n	ae0 <usart_sync_write+0x5c>
     a98:	2000      	movs	r0, #0
     a9a:	22f1      	movs	r2, #241	; 0xf1
     a9c:	4911      	ldr	r1, [pc, #68]	; (ae4 <usart_sync_write+0x60>)
     a9e:	4b12      	ldr	r3, [pc, #72]	; (ae8 <usart_sync_write+0x64>)
     aa0:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     aa2:	002c      	movs	r4, r5
     aa4:	3408      	adds	r4, #8
     aa6:	0020      	movs	r0, r4
     aa8:	4b10      	ldr	r3, [pc, #64]	; (aec <usart_sync_write+0x68>)
     aaa:	4798      	blx	r3
     aac:	2800      	cmp	r0, #0
     aae:	d0f8      	beq.n	aa2 <usart_sync_write+0x1e>
     ab0:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     ab2:	5d71      	ldrb	r1, [r6, r5]
     ab4:	0020      	movs	r0, r4
     ab6:	4b0e      	ldr	r3, [pc, #56]	; (af0 <usart_sync_write+0x6c>)
     ab8:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     aba:	0020      	movs	r0, r4
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <usart_sync_write+0x68>)
     abe:	4798      	blx	r3
     ac0:	2800      	cmp	r0, #0
     ac2:	d0fa      	beq.n	aba <usart_sync_write+0x36>
			;
	} while (++offset < length);
     ac4:	3501      	adds	r5, #1
     ac6:	42bd      	cmp	r5, r7
     ac8:	d3f3      	bcc.n	ab2 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     aca:	0020      	movs	r0, r4
     acc:	4b09      	ldr	r3, [pc, #36]	; (af4 <usart_sync_write+0x70>)
     ace:	4798      	blx	r3
     ad0:	2800      	cmp	r0, #0
     ad2:	d0fa      	beq.n	aca <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     ad4:	0028      	movs	r0, r5
     ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     ad8:	2000      	movs	r0, #0
     ada:	e7de      	b.n	a9a <usart_sync_write+0x16>
     adc:	2000      	movs	r0, #0
     ade:	e7dc      	b.n	a9a <usart_sync_write+0x16>
     ae0:	2001      	movs	r0, #1
     ae2:	e7da      	b.n	a9a <usart_sync_write+0x16>
     ae4:	00003da8 	.word	0x00003da8
     ae8:	00000bdd 	.word	0x00000bdd
     aec:	0000124d 	.word	0x0000124d
     af0:	00001235 	.word	0x00001235
     af4:	00001257 	.word	0x00001257

00000af8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     afa:	46ce      	mov	lr, r9
     afc:	4647      	mov	r7, r8
     afe:	b580      	push	{r7, lr}
     b00:	1e05      	subs	r5, r0, #0
     b02:	4688      	mov	r8, r1
     b04:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     b06:	d01f      	beq.n	b48 <usart_sync_read+0x50>
     b08:	2900      	cmp	r1, #0
     b0a:	d01f      	beq.n	b4c <usart_sync_read+0x54>
     b0c:	2a00      	cmp	r2, #0
     b0e:	d11f      	bne.n	b50 <usart_sync_read+0x58>
     b10:	2000      	movs	r0, #0
     b12:	2286      	movs	r2, #134	; 0x86
     b14:	0052      	lsls	r2, r2, #1
     b16:	490f      	ldr	r1, [pc, #60]	; (b54 <usart_sync_read+0x5c>)
     b18:	4b0f      	ldr	r3, [pc, #60]	; (b58 <usart_sync_read+0x60>)
     b1a:	4798      	blx	r3
	uint32_t                      offset = 0;
     b1c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     b1e:	002c      	movs	r4, r5
     b20:	3408      	adds	r4, #8
     b22:	0020      	movs	r0, r4
     b24:	4b0d      	ldr	r3, [pc, #52]	; (b5c <usart_sync_read+0x64>)
     b26:	4798      	blx	r3
     b28:	2800      	cmp	r0, #0
     b2a:	d0f8      	beq.n	b1e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     b2c:	4643      	mov	r3, r8
     b2e:	199f      	adds	r7, r3, r6
     b30:	0020      	movs	r0, r4
     b32:	4b0b      	ldr	r3, [pc, #44]	; (b60 <usart_sync_read+0x68>)
     b34:	4798      	blx	r3
     b36:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     b38:	3601      	adds	r6, #1
     b3a:	454e      	cmp	r6, r9
     b3c:	d3ef      	bcc.n	b1e <usart_sync_read+0x26>

	return (int32_t)offset;
}
     b3e:	0030      	movs	r0, r6
     b40:	bc0c      	pop	{r2, r3}
     b42:	4690      	mov	r8, r2
     b44:	4699      	mov	r9, r3
     b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     b48:	2000      	movs	r0, #0
     b4a:	e7e2      	b.n	b12 <usart_sync_read+0x1a>
     b4c:	2000      	movs	r0, #0
     b4e:	e7e0      	b.n	b12 <usart_sync_read+0x1a>
     b50:	2001      	movs	r0, #1
     b52:	e7de      	b.n	b12 <usart_sync_read+0x1a>
     b54:	00003da8 	.word	0x00003da8
     b58:	00000bdd 	.word	0x00000bdd
     b5c:	00001263 	.word	0x00001263
     b60:	00001245 	.word	0x00001245

00000b64 <usart_sync_init>:
{
     b64:	b570      	push	{r4, r5, r6, lr}
     b66:	0004      	movs	r4, r0
     b68:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     b6a:	2800      	cmp	r0, #0
     b6c:	d014      	beq.n	b98 <usart_sync_init+0x34>
     b6e:	2900      	cmp	r1, #0
     b70:	d010      	beq.n	b94 <usart_sync_init+0x30>
     b72:	2001      	movs	r0, #1
     b74:	2234      	movs	r2, #52	; 0x34
     b76:	4909      	ldr	r1, [pc, #36]	; (b9c <usart_sync_init+0x38>)
     b78:	4b09      	ldr	r3, [pc, #36]	; (ba0 <usart_sync_init+0x3c>)
     b7a:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     b7c:	0020      	movs	r0, r4
     b7e:	3008      	adds	r0, #8
     b80:	0029      	movs	r1, r5
     b82:	4b08      	ldr	r3, [pc, #32]	; (ba4 <usart_sync_init+0x40>)
     b84:	4798      	blx	r3
	if (init_status) {
     b86:	2800      	cmp	r0, #0
     b88:	d103      	bne.n	b92 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     b8a:	4b07      	ldr	r3, [pc, #28]	; (ba8 <usart_sync_init+0x44>)
     b8c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     b8e:	4b07      	ldr	r3, [pc, #28]	; (bac <usart_sync_init+0x48>)
     b90:	6023      	str	r3, [r4, #0]
}
     b92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     b94:	2000      	movs	r0, #0
     b96:	e7ed      	b.n	b74 <usart_sync_init+0x10>
     b98:	2000      	movs	r0, #0
     b9a:	e7eb      	b.n	b74 <usart_sync_init+0x10>
     b9c:	00003da8 	.word	0x00003da8
     ba0:	00000bdd 	.word	0x00000bdd
     ba4:	00001159 	.word	0x00001159
     ba8:	00000af9 	.word	0x00000af9
     bac:	00000a85 	.word	0x00000a85

00000bb0 <usart_sync_enable>:
{
     bb0:	b510      	push	{r4, lr}
     bb2:	0004      	movs	r4, r0
	ASSERT(descr);
     bb4:	1e43      	subs	r3, r0, #1
     bb6:	4198      	sbcs	r0, r3
     bb8:	b2c0      	uxtb	r0, r0
     bba:	2253      	movs	r2, #83	; 0x53
     bbc:	4904      	ldr	r1, [pc, #16]	; (bd0 <usart_sync_enable+0x20>)
     bbe:	4b05      	ldr	r3, [pc, #20]	; (bd4 <usart_sync_enable+0x24>)
     bc0:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     bc2:	0020      	movs	r0, r4
     bc4:	3008      	adds	r0, #8
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <usart_sync_enable+0x28>)
     bc8:	4798      	blx	r3
}
     bca:	2000      	movs	r0, #0
     bcc:	bd10      	pop	{r4, pc}
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	00003da8 	.word	0x00003da8
     bd4:	00000bdd 	.word	0x00000bdd
     bd8:	00001211 	.word	0x00001211

00000bdc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     bdc:	2800      	cmp	r0, #0
     bde:	d100      	bne.n	be2 <assert+0x6>
		__asm("BKPT #0");
     be0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     be2:	4770      	bx	lr

00000be4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     be4:	6803      	ldr	r3, [r0, #0]
     be6:	2b00      	cmp	r3, #0
     be8:	d003      	beq.n	bf2 <is_list_element+0xe>
		if (it == element) {
     bea:	428b      	cmp	r3, r1
     bec:	d003      	beq.n	bf6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     bee:	681b      	ldr	r3, [r3, #0]
     bf0:	e7f9      	b.n	be6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     bf2:	2000      	movs	r0, #0
}
     bf4:	4770      	bx	lr
			return true;
     bf6:	2001      	movs	r0, #1
     bf8:	e7fc      	b.n	bf4 <is_list_element+0x10>
	...

00000bfc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     bfc:	b570      	push	{r4, r5, r6, lr}
     bfe:	0004      	movs	r4, r0
     c00:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     c02:	4b06      	ldr	r3, [pc, #24]	; (c1c <list_insert_as_head+0x20>)
     c04:	4798      	blx	r3
     c06:	2301      	movs	r3, #1
     c08:	4058      	eors	r0, r3
     c0a:	b2c0      	uxtb	r0, r0
     c0c:	2239      	movs	r2, #57	; 0x39
     c0e:	4904      	ldr	r1, [pc, #16]	; (c20 <list_insert_as_head+0x24>)
     c10:	4b04      	ldr	r3, [pc, #16]	; (c24 <list_insert_as_head+0x28>)
     c12:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     c14:	6823      	ldr	r3, [r4, #0]
     c16:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     c18:	6025      	str	r5, [r4, #0]
}
     c1a:	bd70      	pop	{r4, r5, r6, pc}
     c1c:	00000be5 	.word	0x00000be5
     c20:	00003dc4 	.word	0x00003dc4
     c24:	00000bdd 	.word	0x00000bdd

00000c28 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     c28:	6803      	ldr	r3, [r0, #0]
     c2a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     c2c:	6001      	str	r1, [r0, #0]
}
     c2e:	4770      	bx	lr

00000c30 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     c30:	6803      	ldr	r3, [r0, #0]
     c32:	2b00      	cmp	r3, #0
     c34:	d003      	beq.n	c3e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     c36:	681a      	ldr	r2, [r3, #0]
     c38:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     c3a:	0018      	movs	r0, r3
	}

	return NULL;
}
     c3c:	4770      	bx	lr
	return NULL;
     c3e:	2000      	movs	r0, #0
     c40:	e7fc      	b.n	c3c <list_remove_head+0xc>

00000c42 <list_delete_element>:
/**
 * \brief Removes list element
 */
bool list_delete_element(struct list_descriptor *const list, const void *const element)
{
	if (!element) {
     c42:	2900      	cmp	r1, #0
     c44:	d012      	beq.n	c6c <list_delete_element+0x2a>
		return false;
	}

	if (list->head == element) {
     c46:	6803      	ldr	r3, [r0, #0]
     c48:	4299      	cmp	r1, r3
     c4a:	d104      	bne.n	c56 <list_delete_element+0x14>
		list->head = list->head->next;
     c4c:	681b      	ldr	r3, [r3, #0]
     c4e:	6003      	str	r3, [r0, #0]
		return true;
     c50:	2001      	movs	r0, #1
     c52:	e00a      	b.n	c6a <list_delete_element+0x28>
	} else {
		struct list_element *it = list->head;

		while (it && it->next != element) {
			it = it->next;
     c54:	0013      	movs	r3, r2
		while (it && it->next != element) {
     c56:	2b00      	cmp	r3, #0
     c58:	d002      	beq.n	c60 <list_delete_element+0x1e>
     c5a:	681a      	ldr	r2, [r3, #0]
     c5c:	4291      	cmp	r1, r2
     c5e:	d1f9      	bne.n	c54 <list_delete_element+0x12>
		}
		if (it) {
     c60:	2b00      	cmp	r3, #0
     c62:	d005      	beq.n	c70 <list_delete_element+0x2e>
			it->next = ((struct list_element *)element)->next;
     c64:	680a      	ldr	r2, [r1, #0]
     c66:	601a      	str	r2, [r3, #0]
			return true;
     c68:	2001      	movs	r0, #1
		}
	}

	return false;
}
     c6a:	4770      	bx	lr
		return false;
     c6c:	2000      	movs	r0, #0
     c6e:	e7fc      	b.n	c6a <list_delete_element+0x28>
	return false;
     c70:	2000      	movs	r0, #0
     c72:	e7fa      	b.n	c6a <list_delete_element+0x28>

00000c74 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     c74:	b570      	push	{r4, r5, r6, lr}
     c76:	0004      	movs	r4, r0
     c78:	000e      	movs	r6, r1
     c7a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     c7c:	2800      	cmp	r0, #0
     c7e:	d012      	beq.n	ca6 <ringbuffer_init+0x32>
     c80:	2900      	cmp	r1, #0
     c82:	d012      	beq.n	caa <ringbuffer_init+0x36>
     c84:	2a00      	cmp	r2, #0
     c86:	d112      	bne.n	cae <ringbuffer_init+0x3a>
     c88:	2000      	movs	r0, #0
     c8a:	2228      	movs	r2, #40	; 0x28
     c8c:	490a      	ldr	r1, [pc, #40]	; (cb8 <ringbuffer_init+0x44>)
     c8e:	4b0b      	ldr	r3, [pc, #44]	; (cbc <ringbuffer_init+0x48>)
     c90:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     c92:	1e6b      	subs	r3, r5, #1
     c94:	422b      	tst	r3, r5
     c96:	d10c      	bne.n	cb2 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     c98:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     c9a:	2300      	movs	r3, #0
     c9c:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     c9e:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     ca0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     ca2:	2000      	movs	r0, #0
}
     ca4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     ca6:	2000      	movs	r0, #0
     ca8:	e7ef      	b.n	c8a <ringbuffer_init+0x16>
     caa:	2000      	movs	r0, #0
     cac:	e7ed      	b.n	c8a <ringbuffer_init+0x16>
     cae:	2001      	movs	r0, #1
     cb0:	e7eb      	b.n	c8a <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     cb2:	200d      	movs	r0, #13
     cb4:	4240      	negs	r0, r0
     cb6:	e7f5      	b.n	ca4 <ringbuffer_init+0x30>
     cb8:	00003de4 	.word	0x00003de4
     cbc:	00000bdd 	.word	0x00000bdd

00000cc0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     cc0:	b570      	push	{r4, r5, r6, lr}
     cc2:	0004      	movs	r4, r0
     cc4:	000d      	movs	r5, r1
	ASSERT(rb && data);
     cc6:	2800      	cmp	r0, #0
     cc8:	d016      	beq.n	cf8 <ringbuffer_get+0x38>
     cca:	2900      	cmp	r1, #0
     ccc:	d012      	beq.n	cf4 <ringbuffer_get+0x34>
     cce:	2001      	movs	r0, #1
     cd0:	2240      	movs	r2, #64	; 0x40
     cd2:	490c      	ldr	r1, [pc, #48]	; (d04 <ringbuffer_get+0x44>)
     cd4:	4b0c      	ldr	r3, [pc, #48]	; (d08 <ringbuffer_get+0x48>)
     cd6:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     cd8:	68a3      	ldr	r3, [r4, #8]
     cda:	68e2      	ldr	r2, [r4, #12]
     cdc:	429a      	cmp	r2, r3
     cde:	d00d      	beq.n	cfc <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     ce0:	6862      	ldr	r2, [r4, #4]
     ce2:	4013      	ands	r3, r2
     ce4:	6822      	ldr	r2, [r4, #0]
     ce6:	5cd3      	ldrb	r3, [r2, r3]
     ce8:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     cea:	68a3      	ldr	r3, [r4, #8]
     cec:	3301      	adds	r3, #1
     cee:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     cf0:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     cf2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     cf4:	2000      	movs	r0, #0
     cf6:	e7eb      	b.n	cd0 <ringbuffer_get+0x10>
     cf8:	2000      	movs	r0, #0
     cfa:	e7e9      	b.n	cd0 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     cfc:	200a      	movs	r0, #10
     cfe:	4240      	negs	r0, r0
     d00:	e7f7      	b.n	cf2 <ringbuffer_get+0x32>
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00003de4 	.word	0x00003de4
     d08:	00000bdd 	.word	0x00000bdd

00000d0c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     d0c:	b570      	push	{r4, r5, r6, lr}
     d0e:	0004      	movs	r4, r0
     d10:	000d      	movs	r5, r1
	ASSERT(rb);
     d12:	1e43      	subs	r3, r0, #1
     d14:	4198      	sbcs	r0, r3
     d16:	b2c0      	uxtb	r0, r0
     d18:	2251      	movs	r2, #81	; 0x51
     d1a:	490a      	ldr	r1, [pc, #40]	; (d44 <ringbuffer_put+0x38>)
     d1c:	4b0a      	ldr	r3, [pc, #40]	; (d48 <ringbuffer_put+0x3c>)
     d1e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     d20:	6863      	ldr	r3, [r4, #4]
     d22:	68e2      	ldr	r2, [r4, #12]
     d24:	4013      	ands	r3, r2
     d26:	6822      	ldr	r2, [r4, #0]
     d28:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     d2a:	68e3      	ldr	r3, [r4, #12]
     d2c:	68a2      	ldr	r2, [r4, #8]
     d2e:	1a9a      	subs	r2, r3, r2
     d30:	6861      	ldr	r1, [r4, #4]
     d32:	428a      	cmp	r2, r1
     d34:	d901      	bls.n	d3a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     d36:	1a59      	subs	r1, r3, r1
     d38:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     d3a:	3301      	adds	r3, #1
     d3c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     d3e:	2000      	movs	r0, #0
     d40:	bd70      	pop	{r4, r5, r6, pc}
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	00003de4 	.word	0x00003de4
     d48:	00000bdd 	.word	0x00000bdd

00000d4c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     d4c:	b510      	push	{r4, lr}
     d4e:	0004      	movs	r4, r0
	ASSERT(rb);
     d50:	1e43      	subs	r3, r0, #1
     d52:	4198      	sbcs	r0, r3
     d54:	b2c0      	uxtb	r0, r0
     d56:	2267      	movs	r2, #103	; 0x67
     d58:	4903      	ldr	r1, [pc, #12]	; (d68 <ringbuffer_num+0x1c>)
     d5a:	4b04      	ldr	r3, [pc, #16]	; (d6c <ringbuffer_num+0x20>)
     d5c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     d5e:	68e0      	ldr	r0, [r4, #12]
     d60:	68a3      	ldr	r3, [r4, #8]
     d62:	1ac0      	subs	r0, r0, r3
}
     d64:	bd10      	pop	{r4, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00003de4 	.word	0x00003de4
     d6c:	00000bdd 	.word	0x00000bdd

00000d70 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     d70:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     d72:	4a06      	ldr	r2, [pc, #24]	; (d8c <_sbrk+0x1c>)
     d74:	6812      	ldr	r2, [r2, #0]
     d76:	2a00      	cmp	r2, #0
     d78:	d004      	beq.n	d84 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     d7a:	4a04      	ldr	r2, [pc, #16]	; (d8c <_sbrk+0x1c>)
     d7c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     d7e:	18c3      	adds	r3, r0, r3
     d80:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     d82:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     d84:	4902      	ldr	r1, [pc, #8]	; (d90 <_sbrk+0x20>)
     d86:	4a01      	ldr	r2, [pc, #4]	; (d8c <_sbrk+0x1c>)
     d88:	6011      	str	r1, [r2, #0]
     d8a:	e7f6      	b.n	d7a <_sbrk+0xa>
     d8c:	20000100 	.word	0x20000100
     d90:	200022d8 	.word	0x200022d8

00000d94 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     d94:	2001      	movs	r0, #1
     d96:	4240      	negs	r0, r0
     d98:	4770      	bx	lr

00000d9a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     d9a:	2380      	movs	r3, #128	; 0x80
     d9c:	019b      	lsls	r3, r3, #6
     d9e:	604b      	str	r3, [r1, #4]

	return 0;
}
     da0:	2000      	movs	r0, #0
     da2:	4770      	bx	lr

00000da4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     da4:	2001      	movs	r0, #1
     da6:	4770      	bx	lr

00000da8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     da8:	2000      	movs	r0, #0
     daa:	4770      	bx	lr

00000dac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     dac:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     dae:	4a08      	ldr	r2, [pc, #32]	; (dd0 <_init_chip+0x24>)
     db0:	6853      	ldr	r3, [r2, #4]
     db2:	2106      	movs	r1, #6
     db4:	430b      	orrs	r3, r1
     db6:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <_init_chip+0x28>)
     dba:	4798      	blx	r3
	_sysctrl_init_sources();
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <_init_chip+0x2c>)
     dbe:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     dc0:	2008      	movs	r0, #8
     dc2:	4c06      	ldr	r4, [pc, #24]	; (ddc <_init_chip+0x30>)
     dc4:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     dc6:	4b06      	ldr	r3, [pc, #24]	; (de0 <_init_chip+0x34>)
     dc8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     dca:	20f7      	movs	r0, #247	; 0xf7
     dcc:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     dce:	bd10      	pop	{r4, pc}
     dd0:	41004000 	.word	0x41004000
     dd4:	00000e5d 	.word	0x00000e5d
     dd8:	00001321 	.word	0x00001321
     ddc:	00000de5 	.word	0x00000de5
     de0:	0000136d 	.word	0x0000136d

00000de4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     de4:	07c3      	lsls	r3, r0, #31
     de6:	d509      	bpl.n	dfc <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     de8:	4b16      	ldr	r3, [pc, #88]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     dea:	2280      	movs	r2, #128	; 0x80
     dec:	0052      	lsls	r2, r2, #1
     dee:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     df0:	4a15      	ldr	r2, [pc, #84]	; (e48 <_gclk_init_generators_by_fref+0x64>)
     df2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     df4:	4b13      	ldr	r3, [pc, #76]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     df6:	785b      	ldrb	r3, [r3, #1]
     df8:	09db      	lsrs	r3, r3, #7
     dfa:	d1fb      	bne.n	df4 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     dfc:	0783      	lsls	r3, r0, #30
     dfe:	d509      	bpl.n	e14 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     e00:	4b10      	ldr	r3, [pc, #64]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     e02:	2202      	movs	r2, #2
     e04:	32ff      	adds	r2, #255	; 0xff
     e06:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e08:	4a10      	ldr	r2, [pc, #64]	; (e4c <_gclk_init_generators_by_fref+0x68>)
     e0a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e0c:	4b0d      	ldr	r3, [pc, #52]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     e0e:	785b      	ldrb	r3, [r3, #1]
     e10:	09db      	lsrs	r3, r3, #7
     e12:	d1fb      	bne.n	e0c <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SRC | GCLK_GENCTRL_ID(1));
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     e14:	0743      	lsls	r3, r0, #29
     e16:	d509      	bpl.n	e2c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     e18:	4b0a      	ldr	r3, [pc, #40]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     e1a:	2281      	movs	r2, #129	; 0x81
     e1c:	0052      	lsls	r2, r2, #1
     e1e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e20:	4a0b      	ldr	r2, [pc, #44]	; (e50 <_gclk_init_generators_by_fref+0x6c>)
     e22:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e24:	4b07      	ldr	r3, [pc, #28]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     e26:	785b      	ldrb	r3, [r3, #1]
     e28:	09db      	lsrs	r3, r3, #7
     e2a:	d1fb      	bne.n	e24 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     e2c:	0703      	lsls	r3, r0, #28
     e2e:	d508      	bpl.n	e42 <_gclk_init_generators_by_fref+0x5e>
	((Gclk *)hw)->GENDIV.reg = data;
     e30:	4b04      	ldr	r3, [pc, #16]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     e32:	4a08      	ldr	r2, [pc, #32]	; (e54 <_gclk_init_generators_by_fref+0x70>)
     e34:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e36:	4a08      	ldr	r2, [pc, #32]	; (e58 <_gclk_init_generators_by_fref+0x74>)
     e38:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e3a:	4b02      	ldr	r3, [pc, #8]	; (e44 <_gclk_init_generators_by_fref+0x60>)
     e3c:	785b      	ldrb	r3, [r3, #1]
     e3e:	09db      	lsrs	r3, r3, #7
     e40:	d1fb      	bne.n	e3a <_gclk_init_generators_by_fref+0x56>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     e42:	4770      	bx	lr
     e44:	40000c00 	.word	0x40000c00
     e48:	00010700 	.word	0x00010700
     e4c:	00210301 	.word	0x00210301
     e50:	00210602 	.word	0x00210602
     e54:	00007d03 	.word	0x00007d03
     e58:	00010603 	.word	0x00010603

00000e5c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     e5c:	4b06      	ldr	r3, [pc, #24]	; (e78 <_pm_init+0x1c>)
     e5e:	7a1a      	ldrb	r2, [r3, #8]
     e60:	b2d2      	uxtb	r2, r2
     e62:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     e64:	7a5a      	ldrb	r2, [r3, #9]
     e66:	b2d2      	uxtb	r2, r2
     e68:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     e6a:	7a9a      	ldrb	r2, [r3, #10]
     e6c:	b2d2      	uxtb	r2, r2
     e6e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     e70:	7ada      	ldrb	r2, [r3, #11]
     e72:	b2d2      	uxtb	r2, r2
     e74:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     e76:	4770      	bx	lr
     e78:	40000400 	.word	0x40000400

00000e7c <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     e7c:	b510      	push	{r4, lr}
     e7e:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     e80:	68c3      	ldr	r3, [r0, #12]
     e82:	7a1b      	ldrb	r3, [r3, #8]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     e84:	07db      	lsls	r3, r3, #31
     e86:	d506      	bpl.n	e96 <_rtc_timer_interrupt_handler+0x1a>
		if (dev->timer_cb.period_expired) {
     e88:	6803      	ldr	r3, [r0, #0]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d000      	beq.n	e90 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     e8e:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     e90:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     e92:	2201      	movs	r2, #1
     e94:	721a      	strb	r2, [r3, #8]
	}
}
     e96:	bd10      	pop	{r4, pc}

00000e98 <_timer_init>:
{
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	0004      	movs	r4, r0
     e9c:	000d      	movs	r5, r1
	ASSERT(dev);
     e9e:	1e43      	subs	r3, r0, #1
     ea0:	4198      	sbcs	r0, r3
     ea2:	b2c0      	uxtb	r0, r0
     ea4:	2233      	movs	r2, #51	; 0x33
     ea6:	4910      	ldr	r1, [pc, #64]	; (ee8 <_timer_init+0x50>)
     ea8:	4b10      	ldr	r3, [pc, #64]	; (eec <_timer_init+0x54>)
     eaa:	4798      	blx	r3
	dev->hw = hw;
     eac:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     eae:	2301      	movs	r3, #1
     eb0:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     eb2:	7aab      	ldrb	r3, [r5, #10]
     eb4:	09db      	lsrs	r3, r3, #7
     eb6:	d1fc      	bne.n	eb2 <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
     eb8:	68e2      	ldr	r2, [r4, #12]
     eba:	7a93      	ldrb	r3, [r2, #10]
     ebc:	09db      	lsrs	r3, r3, #7
     ebe:	d1fc      	bne.n	eba <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     ec0:	3380      	adds	r3, #128	; 0x80
     ec2:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     ec4:	7a93      	ldrb	r3, [r2, #10]
     ec6:	09db      	lsrs	r3, r3, #7
     ec8:	d1fc      	bne.n	ec4 <_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     eca:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     ecc:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     ece:	2320      	movs	r3, #32
     ed0:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     ed2:	7a93      	ldrb	r3, [r2, #10]
     ed4:	09db      	lsrs	r3, r3, #7
     ed6:	d1fc      	bne.n	ed2 <_timer_init+0x3a>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     ed8:	3301      	adds	r3, #1
     eda:	68e2      	ldr	r2, [r4, #12]
     edc:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
     ede:	4b04      	ldr	r3, [pc, #16]	; (ef0 <_timer_init+0x58>)
     ee0:	601c      	str	r4, [r3, #0]
}
     ee2:	2000      	movs	r0, #0
     ee4:	bd70      	pop	{r4, r5, r6, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00003e08 	.word	0x00003e08
     eec:	00000bdd 	.word	0x00000bdd
     ef0:	20000104 	.word	0x20000104

00000ef4 <_timer_start>:
{
     ef4:	b510      	push	{r4, lr}
     ef6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     ef8:	d020      	beq.n	f3c <_timer_start+0x48>
     efa:	68c3      	ldr	r3, [r0, #12]
     efc:	2b00      	cmp	r3, #0
     efe:	d01b      	beq.n	f38 <_timer_start+0x44>
     f00:	2001      	movs	r0, #1
     f02:	226a      	movs	r2, #106	; 0x6a
     f04:	490e      	ldr	r1, [pc, #56]	; (f40 <_timer_start+0x4c>)
     f06:	4b0f      	ldr	r3, [pc, #60]	; (f44 <_timer_start+0x50>)
     f08:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f0a:	2208      	movs	r2, #8
     f0c:	4b0e      	ldr	r3, [pc, #56]	; (f48 <_timer_start+0x54>)
     f0e:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
     f10:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     f12:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
     f14:	2300      	movs	r3, #0
     f16:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f18:	7a93      	ldrb	r3, [r2, #10]
     f1a:	09db      	lsrs	r3, r3, #7
     f1c:	d1fc      	bne.n	f18 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
     f1e:	68e2      	ldr	r2, [r4, #12]
     f20:	7a93      	ldrb	r3, [r2, #10]
     f22:	09db      	lsrs	r3, r3, #7
     f24:	d1fc      	bne.n	f20 <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     f26:	8813      	ldrh	r3, [r2, #0]
     f28:	2102      	movs	r1, #2
     f2a:	430b      	orrs	r3, r1
     f2c:	b29b      	uxth	r3, r3
     f2e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f30:	7a93      	ldrb	r3, [r2, #10]
     f32:	09db      	lsrs	r3, r3, #7
     f34:	d1fc      	bne.n	f30 <_timer_start+0x3c>
}
     f36:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     f38:	2000      	movs	r0, #0
     f3a:	e7e2      	b.n	f02 <_timer_start+0xe>
     f3c:	2000      	movs	r0, #0
     f3e:	e7e0      	b.n	f02 <_timer_start+0xe>
     f40:	00003e08 	.word	0x00003e08
     f44:	00000bdd 	.word	0x00000bdd
     f48:	e000e100 	.word	0xe000e100

00000f4c <_timer_is_started>:
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
     f4c:	68c2      	ldr	r2, [r0, #12]
     f4e:	7a93      	ldrb	r3, [r2, #10]
     f50:	09db      	lsrs	r3, r3, #7
     f52:	d1fc      	bne.n	f4e <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     f54:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
     f56:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
     f58:	2001      	movs	r0, #1
     f5a:	4018      	ands	r0, r3
}
     f5c:	4770      	bx	lr

00000f5e <_timer_set_irq>:
}
     f5e:	4770      	bx	lr

00000f60 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     f60:	2000      	movs	r0, #0
     f62:	4770      	bx	lr

00000f64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     f64:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     f66:	4b02      	ldr	r3, [pc, #8]	; (f70 <RTC_Handler+0xc>)
     f68:	6818      	ldr	r0, [r3, #0]
     f6a:	4b02      	ldr	r3, [pc, #8]	; (f74 <RTC_Handler+0x10>)
     f6c:	4798      	blx	r3
}
     f6e:	bd10      	pop	{r4, pc}
     f70:	20000104 	.word	0x20000104
     f74:	00000e7d 	.word	0x00000e7d

00000f78 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     f78:	4b02      	ldr	r3, [pc, #8]	; (f84 <_sercom_get_hardware_index+0xc>)
     f7a:	469c      	mov	ip, r3
     f7c:	4460      	add	r0, ip
     f7e:	0a80      	lsrs	r0, r0, #10
     f80:	b2c0      	uxtb	r0, r0
}
     f82:	4770      	bx	lr
     f84:	bdfff800 	.word	0xbdfff800

00000f88 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     f88:	b510      	push	{r4, lr}
	void *hw = device->hw;
     f8a:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f8c:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     f8e:	07db      	lsls	r3, r3, #31
     f90:	d502      	bpl.n	f98 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     f92:	7da3      	ldrb	r3, [r4, #22]
     f94:	07db      	lsls	r3, r3, #31
     f96:	d40f      	bmi.n	fb8 <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f98:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     f9a:	079b      	lsls	r3, r3, #30
     f9c:	d502      	bpl.n	fa4 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     f9e:	7da3      	ldrb	r3, [r4, #22]
     fa0:	079b      	lsls	r3, r3, #30
     fa2:	d40e      	bmi.n	fc2 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     fa4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     fa6:	075b      	lsls	r3, r3, #29
     fa8:	d515      	bpl.n	fd6 <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     faa:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     fac:	2337      	movs	r3, #55	; 0x37
     fae:	421a      	tst	r2, r3
     fb0:	d00c      	beq.n	fcc <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     fb2:	3308      	adds	r3, #8
     fb4:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
     fb6:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     fb8:	2301      	movs	r3, #1
     fba:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     fbc:	6803      	ldr	r3, [r0, #0]
     fbe:	4798      	blx	r3
     fc0:	e7f9      	b.n	fb6 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     fc2:	2302      	movs	r3, #2
     fc4:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     fc6:	6883      	ldr	r3, [r0, #8]
     fc8:	4798      	blx	r3
     fca:	e7f4      	b.n	fb6 <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     fcc:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     fce:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     fd0:	b2c9      	uxtb	r1, r1
     fd2:	4798      	blx	r3
     fd4:	e7ef      	b.n	fb6 <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     fd6:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     fd8:	09db      	lsrs	r3, r3, #7
     fda:	d0ec      	beq.n	fb6 <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     fdc:	2380      	movs	r3, #128	; 0x80
     fde:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
     fe0:	68c3      	ldr	r3, [r0, #12]
     fe2:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     fe4:	8b63      	ldrh	r3, [r4, #26]
     fe6:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     fe8:	8363      	strh	r3, [r4, #26]
     fea:	e7e4      	b.n	fb6 <_sercom_usart_interrupt_handler+0x2e>

00000fec <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
     fec:	4b06      	ldr	r3, [pc, #24]	; (1008 <_sercom_init_irq_param+0x1c>)
     fee:	4298      	cmp	r0, r3
     ff0:	d003      	beq.n	ffa <_sercom_init_irq_param+0xe>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM4) {
     ff2:	4b06      	ldr	r3, [pc, #24]	; (100c <_sercom_init_irq_param+0x20>)
     ff4:	4298      	cmp	r0, r3
     ff6:	d003      	beq.n	1000 <_sercom_init_irq_param+0x14>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}
}
     ff8:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
     ffa:	4b05      	ldr	r3, [pc, #20]	; (1010 <_sercom_init_irq_param+0x24>)
     ffc:	6019      	str	r1, [r3, #0]
     ffe:	e7f8      	b.n	ff2 <_sercom_init_irq_param+0x6>
		_sercom4_dev = (struct _usart_async_device *)dev;
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <_sercom_init_irq_param+0x24>)
    1002:	6059      	str	r1, [r3, #4]
}
    1004:	e7f8      	b.n	ff8 <_sercom_init_irq_param+0xc>
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	42000800 	.word	0x42000800
    100c:	42001800 	.word	0x42001800
    1010:	20000108 	.word	0x20000108

00001014 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1014:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <_sercom_get_irq_num+0xc>)
    1018:	4798      	blx	r3
    101a:	3009      	adds	r0, #9
    101c:	b2c0      	uxtb	r0, r0
}
    101e:	bd10      	pop	{r4, pc}
    1020:	00000f79 	.word	0x00000f79

00001024 <_get_sercom_index>:
{
    1024:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <_get_sercom_index+0x34>)
    1028:	4798      	blx	r3
    102a:	0001      	movs	r1, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    102c:	2000      	movs	r0, #0
    102e:	2802      	cmp	r0, #2
    1030:	d809      	bhi.n	1046 <_get_sercom_index+0x22>
		if (_usarts[i].number == sercom_offset) {
    1032:	0083      	lsls	r3, r0, #2
    1034:	181b      	adds	r3, r3, r0
    1036:	009a      	lsls	r2, r3, #2
    1038:	4b08      	ldr	r3, [pc, #32]	; (105c <_get_sercom_index+0x38>)
    103a:	5cd3      	ldrb	r3, [r2, r3]
    103c:	4299      	cmp	r1, r3
    103e:	d009      	beq.n	1054 <_get_sercom_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1040:	3001      	adds	r0, #1
    1042:	b2c0      	uxtb	r0, r0
    1044:	e7f3      	b.n	102e <_get_sercom_index+0xa>
	ASSERT(false);
    1046:	2298      	movs	r2, #152	; 0x98
    1048:	0092      	lsls	r2, r2, #2
    104a:	4905      	ldr	r1, [pc, #20]	; (1060 <_get_sercom_index+0x3c>)
    104c:	2000      	movs	r0, #0
    104e:	4b05      	ldr	r3, [pc, #20]	; (1064 <_get_sercom_index+0x40>)
    1050:	4798      	blx	r3
	return 0;
    1052:	2000      	movs	r0, #0
}
    1054:	bd10      	pop	{r4, pc}
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	00000f79 	.word	0x00000f79
    105c:	00003e20 	.word	0x00003e20
    1060:	00003e98 	.word	0x00003e98
    1064:	00000bdd 	.word	0x00000bdd

00001068 <_usart_init>:
{
    1068:	b570      	push	{r4, r5, r6, lr}
    106a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    106c:	4b38      	ldr	r3, [pc, #224]	; (1150 <_usart_init+0xe8>)
    106e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1070:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1072:	07db      	lsls	r3, r3, #31
    1074:	d41d      	bmi.n	10b2 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    1076:	0083      	lsls	r3, r0, #2
    1078:	181b      	adds	r3, r3, r0
    107a:	009a      	lsls	r2, r3, #2
    107c:	4b35      	ldr	r3, [pc, #212]	; (1154 <_usart_init+0xec>)
    107e:	189b      	adds	r3, r3, r2
    1080:	685a      	ldr	r2, [r3, #4]
    1082:	231c      	movs	r3, #28
    1084:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1086:	69e3      	ldr	r3, [r4, #28]
    1088:	079b      	lsls	r3, r3, #30
    108a:	d1fc      	bne.n	1086 <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    108c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    108e:	079b      	lsls	r3, r3, #30
    1090:	d509      	bpl.n	10a6 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1092:	6823      	ldr	r3, [r4, #0]
    1094:	2102      	movs	r1, #2
    1096:	438b      	bics	r3, r1
    1098:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    109a:	69e3      	ldr	r3, [r4, #28]
    109c:	079b      	lsls	r3, r3, #30
    109e:	d1fc      	bne.n	109a <_usart_init+0x32>
    10a0:	69e3      	ldr	r3, [r4, #28]
    10a2:	079b      	lsls	r3, r3, #30
    10a4:	d4fc      	bmi.n	10a0 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    10a6:	2301      	movs	r3, #1
    10a8:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10aa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10ac:	69e3      	ldr	r3, [r4, #28]
    10ae:	079b      	lsls	r3, r3, #30
    10b0:	d1fc      	bne.n	10ac <_usart_init+0x44>
    10b2:	69e3      	ldr	r3, [r4, #28]
    10b4:	07db      	lsls	r3, r3, #31
    10b6:	d4fc      	bmi.n	10b2 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    10b8:	0083      	lsls	r3, r0, #2
    10ba:	181b      	adds	r3, r3, r0
    10bc:	009a      	lsls	r2, r3, #2
    10be:	4b25      	ldr	r3, [pc, #148]	; (1154 <_usart_init+0xec>)
    10c0:	189b      	adds	r3, r3, r2
    10c2:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10c4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10c6:	69e3      	ldr	r3, [r4, #28]
    10c8:	079b      	lsls	r3, r3, #30
    10ca:	d1fc      	bne.n	10c6 <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    10cc:	0083      	lsls	r3, r0, #2
    10ce:	181b      	adds	r3, r3, r0
    10d0:	009a      	lsls	r2, r3, #2
    10d2:	4b20      	ldr	r3, [pc, #128]	; (1154 <_usart_init+0xec>)
    10d4:	189b      	adds	r3, r3, r2
    10d6:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    10d8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10da:	69e3      	ldr	r3, [r4, #28]
    10dc:	075b      	lsls	r3, r3, #29
    10de:	d1fc      	bne.n	10da <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    10e0:	0083      	lsls	r3, r0, #2
    10e2:	181b      	adds	r3, r3, r0
    10e4:	009a      	lsls	r2, r3, #2
    10e6:	4b1b      	ldr	r3, [pc, #108]	; (1154 <_usart_init+0xec>)
    10e8:	189b      	adds	r3, r3, r2
    10ea:	685b      	ldr	r3, [r3, #4]
    10ec:	049a      	lsls	r2, r3, #18
    10ee:	d40b      	bmi.n	1108 <_usart_init+0xa0>
    10f0:	22c0      	movs	r2, #192	; 0xc0
    10f2:	01d2      	lsls	r2, r2, #7
    10f4:	4213      	tst	r3, r2
    10f6:	d107      	bne.n	1108 <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    10f8:	0083      	lsls	r3, r0, #2
    10fa:	181b      	adds	r3, r3, r0
    10fc:	009a      	lsls	r2, r3, #2
    10fe:	4b15      	ldr	r3, [pc, #84]	; (1154 <_usart_init+0xec>)
    1100:	189b      	adds	r3, r3, r2
    1102:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    1104:	81a3      	strh	r3, [r4, #12]
    1106:	e015      	b.n	1134 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1108:	0083      	lsls	r3, r0, #2
    110a:	181b      	adds	r3, r3, r0
    110c:	009a      	lsls	r2, r3, #2
    110e:	4911      	ldr	r1, [pc, #68]	; (1154 <_usart_init+0xec>)
    1110:	1889      	adds	r1, r1, r2
    1112:	898a      	ldrh	r2, [r1, #12]
    1114:	89a3      	ldrh	r3, [r4, #12]
    1116:	04d2      	lsls	r2, r2, #19
    1118:	0cd2      	lsrs	r2, r2, #19
    111a:	0b5b      	lsrs	r3, r3, #13
    111c:	035b      	lsls	r3, r3, #13
    111e:	4313      	orrs	r3, r2
    1120:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1122:	7b8b      	ldrb	r3, [r1, #14]
    1124:	2207      	movs	r2, #7
    1126:	401a      	ands	r2, r3
    1128:	89a3      	ldrh	r3, [r4, #12]
    112a:	0352      	lsls	r2, r2, #13
    112c:	04db      	lsls	r3, r3, #19
    112e:	0cdb      	lsrs	r3, r3, #19
    1130:	4313      	orrs	r3, r2
    1132:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1134:	4a07      	ldr	r2, [pc, #28]	; (1154 <_usart_init+0xec>)
    1136:	0083      	lsls	r3, r0, #2
    1138:	181d      	adds	r5, r3, r0
    113a:	00a9      	lsls	r1, r5, #2
    113c:	000d      	movs	r5, r1
    113e:	1851      	adds	r1, r2, r1
    1140:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
    1142:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1144:	1952      	adds	r2, r2, r5
    1146:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1148:	2330      	movs	r3, #48	; 0x30
    114a:	54e2      	strb	r2, [r4, r3]
}
    114c:	2000      	movs	r0, #0
    114e:	bd70      	pop	{r4, r5, r6, pc}
    1150:	00001025 	.word	0x00001025
    1154:	00003e20 	.word	0x00003e20

00001158 <_usart_sync_init>:
{
    1158:	b570      	push	{r4, r5, r6, lr}
    115a:	0005      	movs	r5, r0
    115c:	000c      	movs	r4, r1
	ASSERT(device);
    115e:	1e43      	subs	r3, r0, #1
    1160:	4198      	sbcs	r0, r3
    1162:	b2c0      	uxtb	r0, r0
    1164:	22b8      	movs	r2, #184	; 0xb8
    1166:	4904      	ldr	r1, [pc, #16]	; (1178 <_usart_sync_init+0x20>)
    1168:	4b04      	ldr	r3, [pc, #16]	; (117c <_usart_sync_init+0x24>)
    116a:	4798      	blx	r3
	device->hw = hw;
    116c:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    116e:	0020      	movs	r0, r4
    1170:	4b03      	ldr	r3, [pc, #12]	; (1180 <_usart_sync_init+0x28>)
    1172:	4798      	blx	r3
}
    1174:	bd70      	pop	{r4, r5, r6, pc}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00003e98 	.word	0x00003e98
    117c:	00000bdd 	.word	0x00000bdd
    1180:	00001069 	.word	0x00001069

00001184 <_usart_async_init>:
{
    1184:	b570      	push	{r4, r5, r6, lr}
    1186:	0006      	movs	r6, r0
    1188:	000c      	movs	r4, r1
	ASSERT(device);
    118a:	1e43      	subs	r3, r0, #1
    118c:	4198      	sbcs	r0, r3
    118e:	b2c0      	uxtb	r0, r0
    1190:	22c6      	movs	r2, #198	; 0xc6
    1192:	4919      	ldr	r1, [pc, #100]	; (11f8 <_usart_async_init+0x74>)
    1194:	4b19      	ldr	r3, [pc, #100]	; (11fc <_usart_async_init+0x78>)
    1196:	4798      	blx	r3
	init_status = _usart_init(hw);
    1198:	0020      	movs	r0, r4
    119a:	4b19      	ldr	r3, [pc, #100]	; (1200 <_usart_async_init+0x7c>)
    119c:	4798      	blx	r3
    119e:	1e05      	subs	r5, r0, #0
	if (init_status) {
    11a0:	d001      	beq.n	11a6 <_usart_async_init+0x22>
}
    11a2:	0028      	movs	r0, r5
    11a4:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    11a6:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    11a8:	0031      	movs	r1, r6
    11aa:	0020      	movs	r0, r4
    11ac:	4b15      	ldr	r3, [pc, #84]	; (1204 <_usart_async_init+0x80>)
    11ae:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    11b0:	0020      	movs	r0, r4
    11b2:	4b15      	ldr	r3, [pc, #84]	; (1208 <_usart_async_init+0x84>)
    11b4:	4798      	blx	r3
    11b6:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11b8:	2b00      	cmp	r3, #0
    11ba:	db0a      	blt.n	11d2 <_usart_async_init+0x4e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11bc:	211f      	movs	r1, #31
    11be:	4001      	ands	r1, r0
    11c0:	2201      	movs	r2, #1
    11c2:	408a      	lsls	r2, r1
    11c4:	2180      	movs	r1, #128	; 0x80
    11c6:	4c11      	ldr	r4, [pc, #68]	; (120c <_usart_async_init+0x88>)
    11c8:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    11ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11ce:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    11d2:	2b00      	cmp	r3, #0
    11d4:	db07      	blt.n	11e6 <_usart_async_init+0x62>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11d6:	211f      	movs	r1, #31
    11d8:	4001      	ands	r1, r0
    11da:	2201      	movs	r2, #1
    11dc:	408a      	lsls	r2, r1
    11de:	21c0      	movs	r1, #192	; 0xc0
    11e0:	0049      	lsls	r1, r1, #1
    11e2:	4c0a      	ldr	r4, [pc, #40]	; (120c <_usart_async_init+0x88>)
    11e4:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    11e6:	2b00      	cmp	r3, #0
    11e8:	dbdb      	blt.n	11a2 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11ea:	231f      	movs	r3, #31
    11ec:	4018      	ands	r0, r3
    11ee:	3b1e      	subs	r3, #30
    11f0:	4083      	lsls	r3, r0
    11f2:	4a06      	ldr	r2, [pc, #24]	; (120c <_usart_async_init+0x88>)
    11f4:	6013      	str	r3, [r2, #0]
    11f6:	e7d4      	b.n	11a2 <_usart_async_init+0x1e>
    11f8:	00003e98 	.word	0x00003e98
    11fc:	00000bdd 	.word	0x00000bdd
    1200:	00001069 	.word	0x00001069
    1204:	00000fed 	.word	0x00000fed
    1208:	00001015 	.word	0x00001015
    120c:	e000e100 	.word	0xe000e100

00001210 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1210:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1212:	6813      	ldr	r3, [r2, #0]
    1214:	2102      	movs	r1, #2
    1216:	430b      	orrs	r3, r1
    1218:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    121a:	69d3      	ldr	r3, [r2, #28]
    121c:	079b      	lsls	r3, r3, #30
    121e:	d1fc      	bne.n	121a <_usart_sync_enable+0xa>
}
    1220:	4770      	bx	lr

00001222 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1222:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1224:	6813      	ldr	r3, [r2, #0]
    1226:	2102      	movs	r1, #2
    1228:	430b      	orrs	r3, r1
    122a:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    122c:	69d3      	ldr	r3, [r2, #28]
    122e:	079b      	lsls	r3, r3, #30
    1230:	d1fc      	bne.n	122c <_usart_async_enable+0xa>
}
    1232:	4770      	bx	lr

00001234 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1234:	6803      	ldr	r3, [r0, #0]
    1236:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1238:	8519      	strh	r1, [r3, #40]	; 0x28
}
    123a:	4770      	bx	lr

0000123c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    123c:	6983      	ldr	r3, [r0, #24]
    123e:	b289      	uxth	r1, r1
    1240:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1242:	4770      	bx	lr

00001244 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1244:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1246:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1248:	b2c0      	uxtb	r0, r0
}
    124a:	4770      	bx	lr

0000124c <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    124c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    124e:	7e18      	ldrb	r0, [r3, #24]
    1250:	2301      	movs	r3, #1
    1252:	4018      	ands	r0, r3
}
    1254:	4770      	bx	lr

00001256 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1256:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1258:	7e1b      	ldrb	r3, [r3, #24]
    125a:	085b      	lsrs	r3, r3, #1
    125c:	2001      	movs	r0, #1
    125e:	4018      	ands	r0, r3
}
    1260:	4770      	bx	lr

00001262 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1262:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1264:	7e1b      	ldrb	r3, [r3, #24]
    1266:	089b      	lsrs	r3, r3, #2
    1268:	2001      	movs	r0, #1
    126a:	4018      	ands	r0, r3
}
    126c:	4770      	bx	lr

0000126e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    126e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1270:	2201      	movs	r2, #1
    1272:	759a      	strb	r2, [r3, #22]
}
    1274:	4770      	bx	lr

00001276 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1276:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1278:	2202      	movs	r2, #2
    127a:	759a      	strb	r2, [r3, #22]
}
    127c:	4770      	bx	lr
	...

00001280 <_usart_async_set_irq_state>:
{
    1280:	b570      	push	{r4, r5, r6, lr}
    1282:	0004      	movs	r4, r0
    1284:	000d      	movs	r5, r1
    1286:	0016      	movs	r6, r2
	ASSERT(device);
    1288:	1e43      	subs	r3, r0, #1
    128a:	4198      	sbcs	r0, r3
    128c:	b2c0      	uxtb	r0, r0
    128e:	2288      	movs	r2, #136	; 0x88
    1290:	0092      	lsls	r2, r2, #2
    1292:	4917      	ldr	r1, [pc, #92]	; (12f0 <_usart_async_set_irq_state+0x70>)
    1294:	4b17      	ldr	r3, [pc, #92]	; (12f4 <_usart_async_set_irq_state+0x74>)
    1296:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1298:	2d00      	cmp	r5, #0
    129a:	d00b      	beq.n	12b4 <_usart_async_set_irq_state+0x34>
    129c:	2d02      	cmp	r5, #2
    129e:	d009      	beq.n	12b4 <_usart_async_set_irq_state+0x34>
	} else if (USART_ASYNC_RX_DONE == type) {
    12a0:	2d01      	cmp	r5, #1
    12a2:	d018      	beq.n	12d6 <_usart_async_set_irq_state+0x56>
	} else if (USART_ASYNC_ERROR == type) {
    12a4:	2d03      	cmp	r5, #3
    12a6:	d10f      	bne.n	12c8 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    12a8:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12aa:	2e00      	cmp	r6, #0
    12ac:	d01c      	beq.n	12e8 <_usart_async_set_irq_state+0x68>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    12ae:	2280      	movs	r2, #128	; 0x80
    12b0:	759a      	strb	r2, [r3, #22]
}
    12b2:	e009      	b.n	12c8 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    12b4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12b6:	2e00      	cmp	r6, #0
    12b8:	d107      	bne.n	12ca <_usart_async_set_irq_state+0x4a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    12ba:	2201      	movs	r2, #1
    12bc:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    12be:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12c0:	2e00      	cmp	r6, #0
    12c2:	d105      	bne.n	12d0 <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    12c4:	2202      	movs	r2, #2
    12c6:	751a      	strb	r2, [r3, #20]
}
    12c8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    12ca:	2201      	movs	r2, #1
    12cc:	759a      	strb	r2, [r3, #22]
    12ce:	e7f6      	b.n	12be <_usart_async_set_irq_state+0x3e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    12d0:	2202      	movs	r2, #2
    12d2:	759a      	strb	r2, [r3, #22]
    12d4:	e7f8      	b.n	12c8 <_usart_async_set_irq_state+0x48>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    12d6:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    12d8:	2e00      	cmp	r6, #0
    12da:	d102      	bne.n	12e2 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    12dc:	2204      	movs	r2, #4
    12de:	751a      	strb	r2, [r3, #20]
    12e0:	e7f2      	b.n	12c8 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    12e2:	2204      	movs	r2, #4
    12e4:	759a      	strb	r2, [r3, #22]
    12e6:	e7ef      	b.n	12c8 <_usart_async_set_irq_state+0x48>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    12e8:	2280      	movs	r2, #128	; 0x80
    12ea:	751a      	strb	r2, [r3, #20]
    12ec:	e7ec      	b.n	12c8 <_usart_async_set_irq_state+0x48>
    12ee:	46c0      	nop			; (mov r8, r8)
    12f0:	00003e98 	.word	0x00003e98
    12f4:	00000bdd 	.word	0x00000bdd

000012f8 <SERCOM0_Handler>:

	return NULL;
}

void SERCOM0_Handler(void)
{
    12f8:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    12fa:	4b02      	ldr	r3, [pc, #8]	; (1304 <SERCOM0_Handler+0xc>)
    12fc:	6818      	ldr	r0, [r3, #0]
    12fe:	4b02      	ldr	r3, [pc, #8]	; (1308 <SERCOM0_Handler+0x10>)
    1300:	4798      	blx	r3
}
    1302:	bd10      	pop	{r4, pc}
    1304:	20000108 	.word	0x20000108
    1308:	00000f89 	.word	0x00000f89

0000130c <SERCOM4_Handler>:

void SERCOM4_Handler(void)
{
    130c:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    130e:	4b02      	ldr	r3, [pc, #8]	; (1318 <SERCOM4_Handler+0xc>)
    1310:	6858      	ldr	r0, [r3, #4]
    1312:	4b02      	ldr	r3, [pc, #8]	; (131c <SERCOM4_Handler+0x10>)
    1314:	4798      	blx	r3
}
    1316:	bd10      	pop	{r4, pc}
    1318:	20000108 	.word	0x20000108
    131c:	00000f89 	.word	0x00000f89

00001320 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1320:	4b10      	ldr	r3, [pc, #64]	; (1364 <_sysctrl_init_sources+0x44>)
    1322:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1324:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1326:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1328:	0f92      	lsrs	r2, r2, #30
    132a:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    132c:	0409      	lsls	r1, r1, #16
    132e:	480e      	ldr	r0, [pc, #56]	; (1368 <_sysctrl_init_sources+0x48>)
    1330:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1332:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1334:	21a1      	movs	r1, #161	; 0xa1
    1336:	0049      	lsls	r1, r1, #1
    1338:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    133a:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    133c:	699a      	ldr	r2, [r3, #24]
    133e:	3941      	subs	r1, #65	; 0x41
    1340:	39ff      	subs	r1, #255	; 0xff
    1342:	430a      	orrs	r2, r1
    1344:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1346:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1348:	311d      	adds	r1, #29
    134a:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    134c:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    134e:	4b05      	ldr	r3, [pc, #20]	; (1364 <_sysctrl_init_sources+0x44>)
    1350:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1352:	071b      	lsls	r3, r3, #28
    1354:	d5fb      	bpl.n	134e <_sysctrl_init_sources+0x2e>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1356:	4a03      	ldr	r2, [pc, #12]	; (1364 <_sysctrl_init_sources+0x44>)
    1358:	6a13      	ldr	r3, [r2, #32]
    135a:	2180      	movs	r1, #128	; 0x80
    135c:	430b      	orrs	r3, r1
    135e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1360:	4770      	bx	lr
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	40000800 	.word	0x40000800
    1368:	0fff0000 	.word	0x0fff0000

0000136c <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    136c:	2286      	movs	r2, #134	; 0x86
    136e:	01d2      	lsls	r2, r2, #7
    1370:	4b1c      	ldr	r3, [pc, #112]	; (13e4 <_sysctrl_init_referenced_generators+0x78>)
    1372:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1374:	2202      	movs	r2, #2
    1376:	4b1c      	ldr	r3, [pc, #112]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    1378:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    137a:	4b1b      	ldr	r3, [pc, #108]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    137c:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    137e:	06db      	lsls	r3, r3, #27
    1380:	d5fb      	bpl.n	137a <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1382:	4a1a      	ldr	r2, [pc, #104]	; (13ec <_sysctrl_init_referenced_generators+0x80>)
    1384:	4b18      	ldr	r3, [pc, #96]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    1386:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1388:	4b19      	ldr	r3, [pc, #100]	; (13f0 <_sysctrl_init_referenced_generators+0x84>)
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	0e9b      	lsrs	r3, r3, #26
    138e:	2b3f      	cmp	r3, #63	; 0x3f
    1390:	d020      	beq.n	13d4 <_sysctrl_init_referenced_generators+0x68>
    1392:	029b      	lsls	r3, r3, #10
    1394:	2280      	movs	r2, #128	; 0x80
    1396:	0092      	lsls	r2, r2, #2
    1398:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    139a:	4a13      	ldr	r2, [pc, #76]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    139c:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    139e:	2306      	movs	r3, #6
    13a0:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    13a2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    13a4:	075b      	lsls	r3, r3, #29
    13a6:	d518      	bpl.n	13da <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    13a8:	4b0f      	ldr	r3, [pc, #60]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    13aa:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    13ac:	23d0      	movs	r3, #208	; 0xd0
    13ae:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    13b0:	2bd0      	cmp	r3, #208	; 0xd0
    13b2:	d1f9      	bne.n	13a8 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    13b4:	4a0c      	ldr	r2, [pc, #48]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    13b6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    13b8:	2180      	movs	r1, #128	; 0x80
    13ba:	430b      	orrs	r3, r1
    13bc:	b29b      	uxth	r3, r3
    13be:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    13c0:	4b08      	ldr	r3, [pc, #32]	; (13e4 <_sysctrl_init_referenced_generators+0x78>)
    13c2:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    13c4:	09db      	lsrs	r3, r3, #7
    13c6:	d1fb      	bne.n	13c0 <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    13c8:	4a07      	ldr	r2, [pc, #28]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    13ca:	6993      	ldr	r3, [r2, #24]
    13cc:	2102      	movs	r1, #2
    13ce:	438b      	bics	r3, r1
    13d0:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    13d2:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13d4:	23fc      	movs	r3, #252	; 0xfc
    13d6:	01db      	lsls	r3, r3, #7
    13d8:	e7df      	b.n	139a <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    13da:	4b03      	ldr	r3, [pc, #12]	; (13e8 <_sysctrl_init_referenced_generators+0x7c>)
    13dc:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    13de:	06db      	lsls	r3, r3, #27
    13e0:	d5fb      	bpl.n	13da <_sysctrl_init_referenced_generators+0x6e>
    13e2:	e7e7      	b.n	13b4 <_sysctrl_init_referenced_generators+0x48>
    13e4:	40000c00 	.word	0x40000c00
    13e8:	40000800 	.word	0x40000800
    13ec:	280a05dc 	.word	0x280a05dc
    13f0:	00806024 	.word	0x00806024

000013f4 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    13f4:	4b02      	ldr	r3, [pc, #8]	; (1400 <_system_time_init+0xc>)
    13f6:	4a03      	ldr	r2, [pc, #12]	; (1404 <_system_time_init+0x10>)
    13f8:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    13fa:	2205      	movs	r2, #5
    13fc:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    13fe:	4770      	bx	lr
    1400:	e000e010 	.word	0xe000e010
    1404:	00ffffff 	.word	0x00ffffff

00001408 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1408:	b510      	push	{r4, lr}
	_system_time_init(hw);
    140a:	4b01      	ldr	r3, [pc, #4]	; (1410 <_delay_init+0x8>)
    140c:	4798      	blx	r3
}
    140e:	bd10      	pop	{r4, pc}
    1410:	000013f5 	.word	0x000013f5

00001414 <main>:
#include <atmel_start.h>
#include <Usart_test.h>

int main(void)
{
    1414:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1416:	4b04      	ldr	r3, [pc, #16]	; (1428 <main+0x14>)
    1418:	4798      	blx	r3
	wifi_protocol_init();
    141a:	4b04      	ldr	r3, [pc, #16]	; (142c <main+0x18>)
    141c:	4798      	blx	r3
	uart_init();
    141e:	4b04      	ldr	r3, [pc, #16]	; (1430 <main+0x1c>)
    1420:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
		wifi_uart_service();
    1422:	4b04      	ldr	r3, [pc, #16]	; (1434 <main+0x20>)
    1424:	4798      	blx	r3
    1426:	e7fc      	b.n	1422 <main+0xe>
    1428:	00000115 	.word	0x00000115
    142c:	00001971 	.word	0x00001971
    1430:	00002345 	.word	0x00002345
    1434:	00001889 	.word	0x00001889

00001438 <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
    1438:	b510      	push	{r4, lr}
	usart_async_enable(&USART);
    143a:	4802      	ldr	r0, [pc, #8]	; (1444 <datastreamer_init+0xc>)
    143c:	4b02      	ldr	r3, [pc, #8]	; (1448 <datastreamer_init+0x10>)
    143e:	4798      	blx	r3
}
    1440:	bd10      	pop	{r4, pc}
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	200001cc 	.word	0x200001cc
    1448:	000009b1 	.word	0x000009b1

0000144c <touch_sensors_config>:
Output : none
Notes  :
============================================================================*/
/* Touch sensors config - assign nodes to buttons / wheels / sliders / surfaces / water level / etc */
static touch_ret_t touch_sensors_config(void)
{
    144c:	b570      	push	{r4, r5, r6, lr}
	uint16_t    sensor_nodes;
	touch_ret_t touch_ret = TOUCH_SUCCESS;

	/* Init acquisition module */
	qtm_ptc_init_acquisition_module(&qtlib_acq_set1);
    144e:	4813      	ldr	r0, [pc, #76]	; (149c <touch_sensors_config+0x50>)
    1450:	4b13      	ldr	r3, [pc, #76]	; (14a0 <touch_sensors_config+0x54>)
    1452:	4798      	blx	r3

	/* Init pointers to DMA sequence memory */
	qtm_ptc_qtlib_assign_signal_memory(&touch_acq_signals_raw[0]);
    1454:	4813      	ldr	r0, [pc, #76]	; (14a4 <touch_sensors_config+0x58>)
    1456:	4b14      	ldr	r3, [pc, #80]	; (14a8 <touch_sensors_config+0x5c>)
    1458:	4798      	blx	r3

	/* Initialize sensor nodes */
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    145a:	2400      	movs	r4, #0
    145c:	e00a      	b.n	1474 <touch_sensors_config+0x28>
		/* Enable each node for measurement and mark for calibration */
		qtm_enable_sensor_node(&qtlib_acq_set1, sensor_nodes);
    145e:	4d0f      	ldr	r5, [pc, #60]	; (149c <touch_sensors_config+0x50>)
    1460:	0021      	movs	r1, r4
    1462:	0028      	movs	r0, r5
    1464:	4b11      	ldr	r3, [pc, #68]	; (14ac <touch_sensors_config+0x60>)
    1466:	4798      	blx	r3
		qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_nodes);
    1468:	0021      	movs	r1, r4
    146a:	0028      	movs	r0, r5
    146c:	4b10      	ldr	r3, [pc, #64]	; (14b0 <touch_sensors_config+0x64>)
    146e:	4798      	blx	r3
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    1470:	3401      	adds	r4, #1
    1472:	b2a4      	uxth	r4, r4
    1474:	2c01      	cmp	r4, #1
    1476:	d9f2      	bls.n	145e <touch_sensors_config+0x12>
    1478:	2400      	movs	r4, #0
    147a:	e00b      	b.n	1494 <touch_sensors_config+0x48>
	}

	/* Enable sensor keys and assign nodes */
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
		qtm_init_sensor_key(&qtlib_key_set1, sensor_nodes, &ptc_qtlib_node_stat1[sensor_nodes]);
    147c:	0063      	lsls	r3, r4, #1
    147e:	191b      	adds	r3, r3, r4
    1480:	005a      	lsls	r2, r3, #1
    1482:	4b0c      	ldr	r3, [pc, #48]	; (14b4 <touch_sensors_config+0x68>)
    1484:	18d2      	adds	r2, r2, r3
    1486:	b2e1      	uxtb	r1, r4
    1488:	4804      	ldr	r0, [pc, #16]	; (149c <touch_sensors_config+0x50>)
    148a:	300c      	adds	r0, #12
    148c:	4b0a      	ldr	r3, [pc, #40]	; (14b8 <touch_sensors_config+0x6c>)
    148e:	4798      	blx	r3
	for (sensor_nodes = 0u; sensor_nodes < DEF_NUM_CHANNELS; sensor_nodes++) {
    1490:	3401      	adds	r4, #1
    1492:	b2a4      	uxth	r4, r4
    1494:	2c01      	cmp	r4, #1
    1496:	d9f1      	bls.n	147c <touch_sensors_config+0x30>
	}

	return (touch_ret);
}
    1498:	2000      	movs	r0, #0
    149a:	bd70      	pop	{r4, r5, r6, pc}
    149c:	20000000 	.word	0x20000000
    14a0:	000025e9 	.word	0x000025e9
    14a4:	20000230 	.word	0x20000230
    14a8:	00002715 	.word	0x00002715
    14ac:	00002729 	.word	0x00002729
    14b0:	00002749 	.word	0x00002749
    14b4:	20000224 	.word	0x20000224
    14b8:	000023a9 	.word	0x000023a9

000014bc <touch_timer_handler>:
Input  : none
Output : none
Notes  :
============================================================================*/
void touch_timer_handler(void)
{
    14bc:	b510      	push	{r4, lr}
	/* Count complete - Measure touch sensors */
	time_to_measure_touch_flag = 1u;
    14be:	2201      	movs	r2, #1
    14c0:	4b02      	ldr	r3, [pc, #8]	; (14cc <touch_timer_handler+0x10>)
    14c2:	709a      	strb	r2, [r3, #2]
	qtm_update_qtlib_timer(DEF_TOUCH_MEASUREMENT_PERIOD_MS);
    14c4:	2014      	movs	r0, #20
    14c6:	4b02      	ldr	r3, [pc, #8]	; (14d0 <touch_timer_handler+0x14>)
    14c8:	4798      	blx	r3
}
    14ca:	bd10      	pop	{r4, pc}
    14cc:	20000110 	.word	0x20000110
    14d0:	00002399 	.word	0x00002399

000014d4 <Timer_task_cb>:

void Timer_task_cb(const struct timer_task *const timer_task)
{
    14d4:	b510      	push	{r4, lr}
	touch_timer_handler();
    14d6:	4b01      	ldr	r3, [pc, #4]	; (14dc <Timer_task_cb+0x8>)
    14d8:	4798      	blx	r3
}
    14da:	bd10      	pop	{r4, pc}
    14dc:	000014bd 	.word	0x000014bd

000014e0 <touch_timer_config>:

void touch_timer_config(void)
{
    14e0:	b570      	push	{r4, r5, r6, lr}
	static struct timer_task Timer_task;
	static uint8_t           timer_task_added = 0;

	if (timer_task_added) {
    14e2:	4b0e      	ldr	r3, [pc, #56]	; (151c <touch_timer_config+0x3c>)
    14e4:	791b      	ldrb	r3, [r3, #4]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d111      	bne.n	150e <touch_timer_config+0x2e>
		timer_remove_task(&Timer, &Timer_task);
	}
#if (KRONO_GESTURE_ENABLE == 1u)
	Timer_task.interval = 1;
#else
	Timer_task.interval = DEF_TOUCH_MEASUREMENT_PERIOD_MS;
    14ea:	4c0c      	ldr	r4, [pc, #48]	; (151c <touch_timer_config+0x3c>)
    14ec:	2314      	movs	r3, #20
    14ee:	6123      	str	r3, [r4, #16]
#endif
	Timer_task.cb   = Timer_task_cb;
    14f0:	4b0b      	ldr	r3, [pc, #44]	; (1520 <touch_timer_config+0x40>)
    14f2:	6163      	str	r3, [r4, #20]
	Timer_task.mode = TIMER_TASK_REPEAT;
    14f4:	2601      	movs	r6, #1
    14f6:	7626      	strb	r6, [r4, #24]

	timer_add_task(&Timer, &Timer_task);
    14f8:	0021      	movs	r1, r4
    14fa:	3108      	adds	r1, #8
    14fc:	4d09      	ldr	r5, [pc, #36]	; (1524 <touch_timer_config+0x44>)
    14fe:	0028      	movs	r0, r5
    1500:	4b09      	ldr	r3, [pc, #36]	; (1528 <touch_timer_config+0x48>)
    1502:	4798      	blx	r3
	timer_task_added = 1;
    1504:	7126      	strb	r6, [r4, #4]
	timer_start(&Timer);
    1506:	0028      	movs	r0, r5
    1508:	4b08      	ldr	r3, [pc, #32]	; (152c <touch_timer_config+0x4c>)
    150a:	4798      	blx	r3
}
    150c:	bd70      	pop	{r4, r5, r6, pc}
		timer_remove_task(&Timer, &Timer_task);
    150e:	4903      	ldr	r1, [pc, #12]	; (151c <touch_timer_config+0x3c>)
    1510:	3108      	adds	r1, #8
    1512:	4804      	ldr	r0, [pc, #16]	; (1524 <touch_timer_config+0x44>)
    1514:	4b06      	ldr	r3, [pc, #24]	; (1530 <touch_timer_config+0x50>)
    1516:	4798      	blx	r3
    1518:	e7e7      	b.n	14ea <touch_timer_config+0xa>
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	20000110 	.word	0x20000110
    1520:	000014d5 	.word	0x000014d5
    1524:	200001b0 	.word	0x200001b0
    1528:	00000651 	.word	0x00000651
    152c:	00000615 	.word	0x00000615
    1530:	00000701 	.word	0x00000701

00001534 <touch_init>:
{
    1534:	b510      	push	{r4, lr}
	touch_timer_config();
    1536:	4b03      	ldr	r3, [pc, #12]	; (1544 <touch_init+0x10>)
    1538:	4798      	blx	r3
	touch_sensors_config();
    153a:	4b03      	ldr	r3, [pc, #12]	; (1548 <touch_init+0x14>)
    153c:	4798      	blx	r3
	datastreamer_init();
    153e:	4b03      	ldr	r3, [pc, #12]	; (154c <touch_init+0x18>)
    1540:	4798      	blx	r3
}
    1542:	bd10      	pop	{r4, pc}
    1544:	000014e1 	.word	0x000014e1
    1548:	0000144d 	.word	0x0000144d
    154c:	00001439 	.word	0x00001439

00001550 <PTC_Handler>:
Input  : none
Output : none
Notes  : none
============================================================================*/
void PTC_Handler(void)
{
    1550:	b510      	push	{r4, lr}
	qtm_ptc_clear_interrupt();
    1552:	4b02      	ldr	r3, [pc, #8]	; (155c <PTC_Handler+0xc>)
    1554:	4798      	blx	r3
	qtm_samd21_ptc_handler_eoc();
    1556:	4b02      	ldr	r3, [pc, #8]	; (1560 <PTC_Handler+0x10>)
    1558:	4798      	blx	r3
}
    155a:	bd10      	pop	{r4, pc}
    155c:	00002799 	.word	0x00002799
    1560:	000027bd 	.word	0x000027bd

00001564 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    1564:	b510      	push	{r4, lr}
    1566:	000b      	movs	r3, r1
	int n = 0;

	if (file != 0) {
    1568:	2800      	cmp	r0, #0
    156a:	d109      	bne.n	1580 <_read+0x1c>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    156c:	0011      	movs	r1, r2
    156e:	0018      	movs	r0, r3
    1570:	4b05      	ldr	r3, [pc, #20]	; (1588 <_read+0x24>)
    1572:	4798      	blx	r3
	if (n < 0) {
    1574:	2800      	cmp	r0, #0
    1576:	db00      	blt.n	157a <_read+0x16>
		return -1;
	}

	return n;
}
    1578:	bd10      	pop	{r4, pc}
		return -1;
    157a:	2001      	movs	r0, #1
    157c:	4240      	negs	r0, r0
    157e:	e7fb      	b.n	1578 <_read+0x14>
		return -1;
    1580:	2001      	movs	r0, #1
    1582:	4240      	negs	r0, r0
    1584:	e7f8      	b.n	1578 <_read+0x14>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	000015e1 	.word	0x000015e1

0000158c <_write>:
#include <stdio.h>

int __attribute__((weak)) _write(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
    158c:	b510      	push	{r4, lr}
    158e:	000b      	movs	r3, r1
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1590:	3801      	subs	r0, #1
    1592:	2802      	cmp	r0, #2
    1594:	d809      	bhi.n	15aa <_write+0x1e>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1596:	0011      	movs	r1, r2
    1598:	0018      	movs	r0, r3
    159a:	4b05      	ldr	r3, [pc, #20]	; (15b0 <_write+0x24>)
    159c:	4798      	blx	r3
	if (n < 0) {
    159e:	2800      	cmp	r0, #0
    15a0:	db00      	blt.n	15a4 <_write+0x18>
		return -1;
	}

	return n;
}
    15a2:	bd10      	pop	{r4, pc}
		return -1;
    15a4:	2001      	movs	r0, #1
    15a6:	4240      	negs	r0, r0
    15a8:	e7fb      	b.n	15a2 <_write+0x16>
		return -1;
    15aa:	2001      	movs	r0, #1
    15ac:	4240      	negs	r0, r0
    15ae:	e7f8      	b.n	15a2 <_write+0x16>
    15b0:	00001605 	.word	0x00001605

000015b4 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    15b4:	b570      	push	{r4, r5, r6, lr}
    15b6:	0006      	movs	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    15b8:	4d06      	ldr	r5, [pc, #24]	; (15d4 <stdio_io_init+0x20>)
    15ba:	682b      	ldr	r3, [r5, #0]
    15bc:	6898      	ldr	r0, [r3, #8]
    15be:	2100      	movs	r1, #0
    15c0:	4c05      	ldr	r4, [pc, #20]	; (15d8 <stdio_io_init+0x24>)
    15c2:	47a0      	blx	r4
	setbuf(stdin, NULL);
    15c4:	682b      	ldr	r3, [r5, #0]
    15c6:	6858      	ldr	r0, [r3, #4]
    15c8:	2100      	movs	r1, #0
    15ca:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    15cc:	4b03      	ldr	r3, [pc, #12]	; (15dc <stdio_io_init+0x28>)
    15ce:	601e      	str	r6, [r3, #0]
}
    15d0:	bd70      	pop	{r4, r5, r6, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	2000005c 	.word	0x2000005c
    15d8:	00002a0d 	.word	0x00002a0d
    15dc:	2000012c 	.word	0x2000012c

000015e0 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    15e0:	b510      	push	{r4, lr}
    15e2:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    15e4:	4b05      	ldr	r3, [pc, #20]	; (15fc <stdio_io_read+0x1c>)
    15e6:	6818      	ldr	r0, [r3, #0]
    15e8:	2800      	cmp	r0, #0
    15ea:	d004      	beq.n	15f6 <stdio_io_read+0x16>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    15ec:	b28a      	uxth	r2, r1
    15ee:	0021      	movs	r1, r4
    15f0:	4b03      	ldr	r3, [pc, #12]	; (1600 <stdio_io_read+0x20>)
    15f2:	4798      	blx	r3
}
    15f4:	bd10      	pop	{r4, pc}
		return 0;
    15f6:	2000      	movs	r0, #0
    15f8:	e7fc      	b.n	15f4 <stdio_io_read+0x14>
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	2000012c 	.word	0x2000012c
    1600:	000004dd 	.word	0x000004dd

00001604 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1604:	b510      	push	{r4, lr}
    1606:	0004      	movs	r4, r0
	if (stdio_io == NULL) {
    1608:	4b05      	ldr	r3, [pc, #20]	; (1620 <stdio_io_write+0x1c>)
    160a:	6818      	ldr	r0, [r3, #0]
    160c:	2800      	cmp	r0, #0
    160e:	d004      	beq.n	161a <stdio_io_write+0x16>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1610:	b28a      	uxth	r2, r1
    1612:	0021      	movs	r1, r4
    1614:	4b03      	ldr	r3, [pc, #12]	; (1624 <stdio_io_write+0x20>)
    1616:	4798      	blx	r3
}
    1618:	bd10      	pop	{r4, pc}
		return 0;
    161a:	2000      	movs	r0, #0
    161c:	e7fc      	b.n	1618 <stdio_io_write+0x14>
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	2000012c 	.word	0x2000012c
    1624:	000004a5 	.word	0x000004a5

00001628 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    1628:	b510      	push	{r4, lr}

	usart_sync_enable(&TARGET_IO);
    162a:	4c04      	ldr	r4, [pc, #16]	; (163c <stdio_redirect_init+0x14>)
    162c:	0020      	movs	r0, r4
    162e:	4b04      	ldr	r3, [pc, #16]	; (1640 <stdio_redirect_init+0x18>)
    1630:	4798      	blx	r3
	stdio_io_init(&TARGET_IO.io);
    1632:	0020      	movs	r0, r4
    1634:	4b03      	ldr	r3, [pc, #12]	; (1644 <stdio_redirect_init+0x1c>)
    1636:	4798      	blx	r3
}
    1638:	bd10      	pop	{r4, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	200001a4 	.word	0x200001a4
    1640:	00000bb1 	.word	0x00000bb1
    1644:	000015b5 	.word	0x000015b5

00001648 <my_strlen>:
 * @brief  Calculate string length
 * @param[in] {str} String address
 * @return data length
 */
unsigned long my_strlen(unsigned char *str)  
{
    1648:	1e03      	subs	r3, r0, #0
    unsigned long len = 0;
    if(str == NULL) { 
    164a:	d008      	beq.n	165e <my_strlen+0x16>
    164c:	2000      	movs	r0, #0
    164e:	e001      	b.n	1654 <my_strlen+0xc>
        return 0;
    }
    
    for(len = 0; *str ++ != '\0'; ) {
        len ++;
    1650:	3001      	adds	r0, #1
    for(len = 0; *str ++ != '\0'; ) {
    1652:	0013      	movs	r3, r2
    1654:	1c5a      	adds	r2, r3, #1
    1656:	781b      	ldrb	r3, [r3, #0]
    1658:	2b00      	cmp	r3, #0
    165a:	d1f9      	bne.n	1650 <my_strlen+0x8>
    }
    
    return len;
}
    165c:	4770      	bx	lr
        return 0;
    165e:	2000      	movs	r0, #0
    1660:	e7fc      	b.n	165c <my_strlen+0x14>

00001662 <my_memset>:
 * @param[in] {ch} Set character
 * @param[in] {count} Set the data length
 * @return Source address after data processing
 */
void *my_memset(void *src,unsigned char ch,unsigned short count)
{
    1662:	b510      	push	{r4, lr}
    unsigned char *tmp = (unsigned char *)src;
    
    if(src == NULL) {
    1664:	2800      	cmp	r0, #0
    1666:	d008      	beq.n	167a <my_memset+0x18>
    1668:	0004      	movs	r4, r0
    166a:	e002      	b.n	1672 <my_memset+0x10>
        return NULL;
    }
    
    while(count --) {
        *tmp ++ = ch;
    166c:	7021      	strb	r1, [r4, #0]
    166e:	3401      	adds	r4, #1
    while(count --) {
    1670:	001a      	movs	r2, r3
    1672:	1e53      	subs	r3, r2, #1
    1674:	b29b      	uxth	r3, r3
    1676:	2a00      	cmp	r2, #0
    1678:	d1f8      	bne.n	166c <my_memset+0xa>
    }
    
    return src;
}
    167a:	bd10      	pop	{r4, pc}

0000167c <my_memcpy>:
 * @param[in] {src} source address
 * @param[in] {count} number of data copies
 * @return Source address after data processing
 */
void *my_memcpy(void *dest, const void *src, unsigned short count)  
{  
    167c:	b510      	push	{r4, lr}
    unsigned char *pdest = (unsigned char *)dest;  
    const unsigned char *psrc  = (const unsigned char *)src;  
    unsigned short i;
    
    if(dest == NULL || src == NULL) { 
    167e:	2800      	cmp	r0, #0
    1680:	d00e      	beq.n	16a0 <my_memcpy+0x24>
    1682:	2900      	cmp	r1, #0
    1684:	d016      	beq.n	16b4 <my_memcpy+0x38>
        return NULL;
    }
    
    if((pdest <= psrc) || (pdest > psrc + count)) {  
    1686:	4288      	cmp	r0, r1
    1688:	d90b      	bls.n	16a2 <my_memcpy+0x26>
    168a:	188b      	adds	r3, r1, r2
    168c:	4298      	cmp	r0, r3
    168e:	d90e      	bls.n	16ae <my_memcpy+0x32>
    1690:	2300      	movs	r3, #0
    1692:	e003      	b.n	169c <my_memcpy+0x20>
        for(i = 0; i < count; i ++) {  
            pdest[i] = psrc[i];  
    1694:	5ccc      	ldrb	r4, [r1, r3]
    1696:	54c4      	strb	r4, [r0, r3]
        for(i = 0; i < count; i ++) {  
    1698:	3301      	adds	r3, #1
    169a:	b29b      	uxth	r3, r3
    169c:	4293      	cmp	r3, r2
    169e:	d3f9      	bcc.n	1694 <my_memcpy+0x18>
            pdest[i - 1] = psrc[i - 1];  
        }  
    }  
    
    return dest;  
}
    16a0:	bd10      	pop	{r4, pc}
    16a2:	2300      	movs	r3, #0
    16a4:	e7fa      	b.n	169c <my_memcpy+0x20>
            pdest[i - 1] = psrc[i - 1];  
    16a6:	3a01      	subs	r2, #1
    16a8:	5c8b      	ldrb	r3, [r1, r2]
    16aa:	5483      	strb	r3, [r0, r2]
        for(i = count; i > 0; i --) {  
    16ac:	b292      	uxth	r2, r2
    16ae:	2a00      	cmp	r2, #0
    16b0:	d1f9      	bne.n	16a6 <my_memcpy+0x2a>
    16b2:	e7f5      	b.n	16a0 <my_memcpy+0x24>
        return NULL;
    16b4:	2000      	movs	r0, #0
    16b6:	e7f3      	b.n	16a0 <my_memcpy+0x24>

000016b8 <my_strcpy>:
 * @param[in] {src} source address
 * @return Source address after data processing
 */
char *my_strcpy(char *dest, const char *src)  
{
    if((NULL == dest) || (NULL == src)) {
    16b8:	2800      	cmp	r0, #0
    16ba:	d00a      	beq.n	16d2 <my_strcpy+0x1a>
    16bc:	2900      	cmp	r1, #0
    16be:	d009      	beq.n	16d4 <my_strcpy+0x1c>
    16c0:	0003      	movs	r3, r0
    16c2:	e002      	b.n	16ca <my_strcpy+0x12>
        return NULL;
    }
    
    char *p = dest;
    while(*src!='\0') {
        *dest++ = *src++;
    16c4:	3101      	adds	r1, #1
    16c6:	701a      	strb	r2, [r3, #0]
    16c8:	3301      	adds	r3, #1
    while(*src!='\0') {
    16ca:	780a      	ldrb	r2, [r1, #0]
    16cc:	2a00      	cmp	r2, #0
    16ce:	d1f9      	bne.n	16c4 <my_strcpy+0xc>
    }
    *dest = '\0';
    16d0:	701a      	strb	r2, [r3, #0]
    return p;
}
    16d2:	4770      	bx	lr
        return NULL;
    16d4:	2000      	movs	r0, #0
    16d6:	e7fc      	b.n	16d2 <my_strcpy+0x1a>

000016d8 <my_strcmp>:
 * -             <0:s1<s2
 * -             >0:s1>s2
 */
int my_strcmp(char *s1 , char *s2)
{
    while( *s1 && *s2 && *s1 == *s2 ) {
    16d8:	e001      	b.n	16de <my_strcmp+0x6>
        s1++;
    16da:	3001      	adds	r0, #1
        s2++;
    16dc:	3101      	adds	r1, #1
    while( *s1 && *s2 && *s1 == *s2 ) {
    16de:	7803      	ldrb	r3, [r0, #0]
    16e0:	2b00      	cmp	r3, #0
    16e2:	d004      	beq.n	16ee <my_strcmp+0x16>
    16e4:	780a      	ldrb	r2, [r1, #0]
    16e6:	2a00      	cmp	r2, #0
    16e8:	d001      	beq.n	16ee <my_strcmp+0x16>
    16ea:	4293      	cmp	r3, r2
    16ec:	d0f5      	beq.n	16da <my_strcmp+0x2>
    }
    return *s1 - *s2;
    16ee:	7808      	ldrb	r0, [r1, #0]
    16f0:	1a18      	subs	r0, r3, r0
}
    16f2:	4770      	bx	lr

000016f4 <byte_to_int>:
 */
unsigned long byte_to_int(const unsigned char value[4])
{
    unsigned long nubmer = 0;

    nubmer = (unsigned long)value[0];
    16f4:	7803      	ldrb	r3, [r0, #0]
    nubmer <<= 8;
    16f6:	021b      	lsls	r3, r3, #8
    nubmer |= (unsigned long)value[1];
    16f8:	7842      	ldrb	r2, [r0, #1]
    16fa:	4313      	orrs	r3, r2
    nubmer <<= 8;
    16fc:	021b      	lsls	r3, r3, #8
    nubmer |= (unsigned long)value[2];
    16fe:	7882      	ldrb	r2, [r0, #2]
    1700:	4313      	orrs	r3, r2
    nubmer <<= 8;
    1702:	021b      	lsls	r3, r3, #8
    nubmer |= (unsigned long)value[3];
    1704:	78c0      	ldrb	r0, [r0, #3]
    1706:	4318      	orrs	r0, r3
    
    return nubmer;
}
    1708:	4770      	bx	lr
	...

0000170c <mcu_dp_bool_update>:
 * @param[in] {value} Current dp value pointer
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_bool_update(unsigned char dpid,unsigned char value)
{
    170c:	b570      	push	{r4, r5, r6, lr}
    170e:	000d      	movs	r5, r1
    unsigned short send_len = 0;
    
    if(stop_update_flag == T_ENABLE)
    1710:	4b0f      	ldr	r3, [pc, #60]	; (1750 <mcu_dp_bool_update+0x44>)
    1712:	781b      	ldrb	r3, [r3, #0]
    1714:	2b01      	cmp	r3, #1
    1716:	d013      	beq.n	1740 <mcu_dp_bool_update+0x34>
        return T_SUCCESS;
    
    send_len = set_wifi_uart_byte(send_len,dpid);
    1718:	0001      	movs	r1, r0
    171a:	2000      	movs	r0, #0
    171c:	4c0d      	ldr	r4, [pc, #52]	; (1754 <mcu_dp_bool_update+0x48>)
    171e:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_BOOL);
    1720:	2101      	movs	r1, #1
    1722:	47a0      	blx	r4
    //
    send_len = set_wifi_uart_byte(send_len,0);
    1724:	2100      	movs	r1, #0
    1726:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,1);
    1728:	2101      	movs	r1, #1
    172a:	47a0      	blx	r4
    //
    if(value == T_FALSE) {
    172c:	2d00      	cmp	r5, #0
    172e:	d109      	bne.n	1744 <mcu_dp_bool_update+0x38>
        send_len = set_wifi_uart_byte(send_len,T_FALSE);
    1730:	2100      	movs	r1, #0
    1732:	4b08      	ldr	r3, [pc, #32]	; (1754 <mcu_dp_bool_update+0x48>)
    1734:	4798      	blx	r3
    1736:	0002      	movs	r2, r0
    }else {
        send_len = set_wifi_uart_byte(send_len,1);
    }
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD, MCU_TX_VER, send_len);
    1738:	2103      	movs	r1, #3
    173a:	2007      	movs	r0, #7
    173c:	4b06      	ldr	r3, [pc, #24]	; (1758 <mcu_dp_bool_update+0x4c>)
    173e:	4798      	blx	r3
    
    return T_SUCCESS;
}
    1740:	2001      	movs	r0, #1
    1742:	bd70      	pop	{r4, r5, r6, pc}
        send_len = set_wifi_uart_byte(send_len,1);
    1744:	2101      	movs	r1, #1
    1746:	4b03      	ldr	r3, [pc, #12]	; (1754 <mcu_dp_bool_update+0x48>)
    1748:	4798      	blx	r3
    174a:	0002      	movs	r2, r0
    174c:	e7f4      	b.n	1738 <mcu_dp_bool_update+0x2c>
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	200002c5 	.word	0x200002c5
    1754:	00001edd 	.word	0x00001edd
    1758:	00001f29 	.word	0x00001f29

0000175c <mcu_dp_value_update>:
 * @param[in] {value} Current dp value pointer
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_value_update(unsigned char dpid,unsigned long value)
{
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	000d      	movs	r5, r1
    unsigned short send_len = 0;
    
    if(stop_update_flag == T_ENABLE)
    1760:	4b0f      	ldr	r3, [pc, #60]	; (17a0 <mcu_dp_value_update+0x44>)
    1762:	781b      	ldrb	r3, [r3, #0]
    1764:	2b01      	cmp	r3, #1
    1766:	d018      	beq.n	179a <mcu_dp_value_update+0x3e>
        return T_SUCCESS;
    
    send_len = set_wifi_uart_byte(send_len,dpid);
    1768:	0001      	movs	r1, r0
    176a:	2000      	movs	r0, #0
    176c:	4c0d      	ldr	r4, [pc, #52]	; (17a4 <mcu_dp_value_update+0x48>)
    176e:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_VALUE);
    1770:	2102      	movs	r1, #2
    1772:	47a0      	blx	r4
    //
    send_len = set_wifi_uart_byte(send_len,0);
    1774:	2100      	movs	r1, #0
    1776:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,4);
    1778:	2104      	movs	r1, #4
    177a:	47a0      	blx	r4
    //
    send_len = set_wifi_uart_byte(send_len,value >> 24);
    177c:	0e29      	lsrs	r1, r5, #24
    177e:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,value >> 16);
    1780:	0c29      	lsrs	r1, r5, #16
    1782:	b2c9      	uxtb	r1, r1
    1784:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,value >> 8);
    1786:	0a29      	lsrs	r1, r5, #8
    1788:	b2c9      	uxtb	r1, r1
    178a:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,value & 0xff);
    178c:	b2e9      	uxtb	r1, r5
    178e:	47a0      	blx	r4
    1790:	0002      	movs	r2, r0
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD,MCU_TX_VER,send_len);
    1792:	2103      	movs	r1, #3
    1794:	2007      	movs	r0, #7
    1796:	4b04      	ldr	r3, [pc, #16]	; (17a8 <mcu_dp_value_update+0x4c>)
    1798:	4798      	blx	r3
    
    return T_SUCCESS;
}
    179a:	2001      	movs	r0, #1
    179c:	bd70      	pop	{r4, r5, r6, pc}
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	200002c5 	.word	0x200002c5
    17a4:	00001edd 	.word	0x00001edd
    17a8:	00001f29 	.word	0x00001f29

000017ac <mcu_dp_string_update>:
 * @param[in] {len} data length
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_string_update(unsigned char dpid,const unsigned char value[],unsigned short len)
{
    17ac:	b570      	push	{r4, r5, r6, lr}
    17ae:	000e      	movs	r6, r1
    17b0:	0015      	movs	r5, r2
    unsigned short send_len = 0;
    
    if(stop_update_flag == T_ENABLE)
    17b2:	4b0c      	ldr	r3, [pc, #48]	; (17e4 <mcu_dp_string_update+0x38>)
    17b4:	781b      	ldrb	r3, [r3, #0]
    17b6:	2b01      	cmp	r3, #1
    17b8:	d012      	beq.n	17e0 <mcu_dp_string_update+0x34>
        return T_SUCCESS;
    //
    send_len = set_wifi_uart_byte(send_len,dpid);
    17ba:	0001      	movs	r1, r0
    17bc:	2000      	movs	r0, #0
    17be:	4c0a      	ldr	r4, [pc, #40]	; (17e8 <mcu_dp_string_update+0x3c>)
    17c0:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_STRING);
    17c2:	2103      	movs	r1, #3
    17c4:	47a0      	blx	r4
    //
    send_len = set_wifi_uart_byte(send_len,len / 0x100);
    17c6:	0a29      	lsrs	r1, r5, #8
    17c8:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,len % 0x100);
    17ca:	b2e9      	uxtb	r1, r5
    17cc:	47a0      	blx	r4
    //
    send_len = set_wifi_uart_buffer(send_len,(unsigned char *)value,len);
    17ce:	002a      	movs	r2, r5
    17d0:	0031      	movs	r1, r6
    17d2:	4b06      	ldr	r3, [pc, #24]	; (17ec <mcu_dp_string_update+0x40>)
    17d4:	4798      	blx	r3
    17d6:	0002      	movs	r2, r0
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD,MCU_TX_VER,send_len);
    17d8:	2103      	movs	r1, #3
    17da:	2007      	movs	r0, #7
    17dc:	4b04      	ldr	r3, [pc, #16]	; (17f0 <mcu_dp_string_update+0x44>)
    17de:	4798      	blx	r3
    
    return T_SUCCESS;
}
    17e0:	2001      	movs	r0, #1
    17e2:	bd70      	pop	{r4, r5, r6, pc}
    17e4:	200002c5 	.word	0x200002c5
    17e8:	00001edd 	.word	0x00001edd
    17ec:	00001eed 	.word	0x00001eed
    17f0:	00001f29 	.word	0x00001f29

000017f4 <mcu_dp_enum_update>:
 * @param[in] {value} Current dp value pointer
 * @return Null
 * @note   Null
 */
unsigned char mcu_dp_enum_update(unsigned char dpid,unsigned char value)
{
    17f4:	b570      	push	{r4, r5, r6, lr}
    17f6:	000d      	movs	r5, r1
    unsigned short send_len = 0;
    
    if(stop_update_flag == T_ENABLE)
    17f8:	4b0b      	ldr	r3, [pc, #44]	; (1828 <mcu_dp_enum_update+0x34>)
    17fa:	781b      	ldrb	r3, [r3, #0]
    17fc:	2b01      	cmp	r3, #1
    17fe:	d010      	beq.n	1822 <mcu_dp_enum_update+0x2e>
        return T_SUCCESS;
    
    send_len = set_wifi_uart_byte(send_len,dpid);
    1800:	0001      	movs	r1, r0
    1802:	2000      	movs	r0, #0
    1804:	4c09      	ldr	r4, [pc, #36]	; (182c <mcu_dp_enum_update+0x38>)
    1806:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,DP_TYPE_ENUM);
    1808:	2104      	movs	r1, #4
    180a:	47a0      	blx	r4
    //
    send_len = set_wifi_uart_byte(send_len,0);
    180c:	2100      	movs	r1, #0
    180e:	47a0      	blx	r4
    send_len = set_wifi_uart_byte(send_len,1);
    1810:	2101      	movs	r1, #1
    1812:	47a0      	blx	r4
    //
    send_len = set_wifi_uart_byte(send_len,value);
    1814:	0029      	movs	r1, r5
    1816:	47a0      	blx	r4
    1818:	0002      	movs	r2, r0
    
    wifi_uart_write_frame(STATE_UPLOAD_CMD,MCU_TX_VER,send_len);
    181a:	2103      	movs	r1, #3
    181c:	2007      	movs	r0, #7
    181e:	4b04      	ldr	r3, [pc, #16]	; (1830 <mcu_dp_enum_update+0x3c>)
    1820:	4798      	blx	r3
    
    return T_SUCCESS;
}
    1822:	2001      	movs	r0, #1
    1824:	bd70      	pop	{r4, r5, r6, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	200002c5 	.word	0x200002c5
    182c:	00001edd 	.word	0x00001edd
    1830:	00001f29 	.word	0x00001f29

00001834 <mcu_get_dp_download_bool>:
 * @return current dp value
 * @note   Null
 */
unsigned char mcu_get_dp_download_bool(const unsigned char value[],unsigned short len)
{
    return(value[0]);
    1834:	7800      	ldrb	r0, [r0, #0]
}
    1836:	4770      	bx	lr

00001838 <mcu_get_dp_download_enum>:
 * @return current dp value
 * @note   Null
 */
unsigned char mcu_get_dp_download_enum(const unsigned char value[],unsigned short len)
{
    return(value[0]);
    1838:	7800      	ldrb	r0, [r0, #0]
}
    183a:	4770      	bx	lr

0000183c <mcu_get_dp_download_value>:
 * @param[in] {len} data length
 * @return current dp value
 * @note   Null
 */
unsigned long mcu_get_dp_download_value(const unsigned char value[],unsigned short len)
{
    183c:	b510      	push	{r4, lr}
    return(byte_to_int(value));
    183e:	4b01      	ldr	r3, [pc, #4]	; (1844 <mcu_get_dp_download_value+0x8>)
    1840:	4798      	blx	r3
}
    1842:	bd10      	pop	{r4, pc}
    1844:	000016f5 	.word	0x000016f5

00001848 <uart_receive_input>:
 */
void uart_receive_input(unsigned char value)
{
    // #error "Please call uart_receive_input(value) in the serial port receive interrupt. The serial port data is processed by MCU_SDK. The user should not process it separately. Delete the line after completion."
    
    if(1 == rx_buf_out - rx_buf_in) {
    1848:	4b0b      	ldr	r3, [pc, #44]	; (1878 <uart_receive_input+0x30>)
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	4a0b      	ldr	r2, [pc, #44]	; (187c <uart_receive_input+0x34>)
    184e:	6812      	ldr	r2, [r2, #0]
    1850:	1a99      	subs	r1, r3, r2
    1852:	2901      	cmp	r1, #1
    1854:	d00f      	beq.n	1876 <uart_receive_input+0x2e>
        //UART receive buffer is full
    }else if((rx_buf_in > rx_buf_out) && ((rx_buf_in - rx_buf_out) >= sizeof(wifi_uart_rx_buf))) {
    1856:	4293      	cmp	r3, r2
    1858:	d202      	bcs.n	1860 <uart_receive_input+0x18>
    185a:	1ad3      	subs	r3, r2, r3
    185c:	2b16      	cmp	r3, #22
    185e:	d80a      	bhi.n	1876 <uart_receive_input+0x2e>
        //UART receive buffer is full
    }else {
        //UART receive buffer is not full
        if(rx_buf_in >= (unsigned char *)(wifi_uart_rx_buf + sizeof(wifi_uart_rx_buf))) {
    1860:	4b07      	ldr	r3, [pc, #28]	; (1880 <uart_receive_input+0x38>)
    1862:	429a      	cmp	r2, r3
    1864:	d302      	bcc.n	186c <uart_receive_input+0x24>
            rx_buf_in = (unsigned char *)(wifi_uart_rx_buf);
    1866:	4a07      	ldr	r2, [pc, #28]	; (1884 <uart_receive_input+0x3c>)
    1868:	4b04      	ldr	r3, [pc, #16]	; (187c <uart_receive_input+0x34>)
    186a:	601a      	str	r2, [r3, #0]
        }
        
        *rx_buf_in ++ = value;
    186c:	4a03      	ldr	r2, [pc, #12]	; (187c <uart_receive_input+0x34>)
    186e:	6813      	ldr	r3, [r2, #0]
    1870:	1c59      	adds	r1, r3, #1
    1872:	6011      	str	r1, [r2, #0]
    1874:	7018      	strb	r0, [r3, #0]
    }
}
    1876:	4770      	bx	lr
    1878:	20000288 	.word	0x20000288
    187c:	2000026c 	.word	0x2000026c
    1880:	20000287 	.word	0x20000287
    1884:	20000270 	.word	0x20000270

00001888 <wifi_uart_service>:
 * @param  Null
 * @return Null
 * @note   Call this function in the MCU main function while loop
 */
void wifi_uart_service(void)
{
    1888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // #error "Please add wifi_uart_service() directly in the while(1){} of the main function, call this function without adding any conditional judgment, delete the line after completion." 
    static unsigned short rx_in = 0;
    unsigned short offset = 0;
    unsigned short rx_value_len = 0;
    
    while((rx_in < sizeof(wifi_data_process_buf)) && with_data_rxbuff() > 0) {
    188a:	e007      	b.n	189c <wifi_uart_service+0x14>
        wifi_data_process_buf[rx_in ++] = take_byte_rxbuff();
    188c:	4b31      	ldr	r3, [pc, #196]	; (1954 <wifi_uart_service+0xcc>)
    188e:	881c      	ldrh	r4, [r3, #0]
    1890:	1c62      	adds	r2, r4, #1
    1892:	801a      	strh	r2, [r3, #0]
    1894:	4b30      	ldr	r3, [pc, #192]	; (1958 <wifi_uart_service+0xd0>)
    1896:	4798      	blx	r3
    1898:	4b30      	ldr	r3, [pc, #192]	; (195c <wifi_uart_service+0xd4>)
    189a:	5518      	strb	r0, [r3, r4]
    while((rx_in < sizeof(wifi_data_process_buf)) && with_data_rxbuff() > 0) {
    189c:	4b2d      	ldr	r3, [pc, #180]	; (1954 <wifi_uart_service+0xcc>)
    189e:	881b      	ldrh	r3, [r3, #0]
    18a0:	2b1e      	cmp	r3, #30
    18a2:	d803      	bhi.n	18ac <wifi_uart_service+0x24>
    18a4:	4b2e      	ldr	r3, [pc, #184]	; (1960 <wifi_uart_service+0xd8>)
    18a6:	4798      	blx	r3
    18a8:	2800      	cmp	r0, #0
    18aa:	d1ef      	bne.n	188c <wifi_uart_service+0x4>
    }
    
    if(rx_in < PROTOCOL_HEAD)
    18ac:	4b29      	ldr	r3, [pc, #164]	; (1954 <wifi_uart_service+0xcc>)
    18ae:	881b      	ldrh	r3, [r3, #0]
    18b0:	2b06      	cmp	r3, #6
    18b2:	d949      	bls.n	1948 <wifi_uart_service+0xc0>
    18b4:	2400      	movs	r4, #0
    18b6:	e007      	b.n	18c8 <wifi_uart_service+0x40>
        if(wifi_data_process_buf[offset + HEAD_FIRST] != FRAME_FIRST) {
            offset ++;
            continue;
        }
        
        if(wifi_data_process_buf[offset + HEAD_SECOND] != FRAME_SECOND) {
    18b8:	1c69      	adds	r1, r5, #1
    18ba:	4828      	ldr	r0, [pc, #160]	; (195c <wifi_uart_service+0xd4>)
    18bc:	5c41      	ldrb	r1, [r0, r1]
    18be:	b2c9      	uxtb	r1, r1
    18c0:	29aa      	cmp	r1, #170	; 0xaa
    18c2:	d00e      	beq.n	18e2 <wifi_uart_service+0x5a>
            offset ++;
    18c4:	3401      	adds	r4, #1
    18c6:	b2a4      	uxth	r4, r4
    while((rx_in - offset) >= PROTOCOL_HEAD) {
    18c8:	4b22      	ldr	r3, [pc, #136]	; (1954 <wifi_uart_service+0xcc>)
    18ca:	881a      	ldrh	r2, [r3, #0]
    18cc:	0025      	movs	r5, r4
    18ce:	1b13      	subs	r3, r2, r4
    18d0:	2b06      	cmp	r3, #6
    18d2:	dd33      	ble.n	193c <wifi_uart_service+0xb4>
        if(wifi_data_process_buf[offset + HEAD_FIRST] != FRAME_FIRST) {
    18d4:	4921      	ldr	r1, [pc, #132]	; (195c <wifi_uart_service+0xd4>)
    18d6:	5d09      	ldrb	r1, [r1, r4]
    18d8:	2955      	cmp	r1, #85	; 0x55
    18da:	d0ed      	beq.n	18b8 <wifi_uart_service+0x30>
            offset ++;
    18dc:	3401      	adds	r4, #1
    18de:	b2a4      	uxth	r4, r4
            continue;
    18e0:	e7f2      	b.n	18c8 <wifi_uart_service+0x40>
            continue;
        }  
        
        if(wifi_data_process_buf[offset + PROTOCOL_VERSION] != MCU_RX_VER) {
    18e2:	1ca9      	adds	r1, r5, #2
    18e4:	481d      	ldr	r0, [pc, #116]	; (195c <wifi_uart_service+0xd4>)
    18e6:	5c41      	ldrb	r1, [r0, r1]
    18e8:	2900      	cmp	r1, #0
    18ea:	d002      	beq.n	18f2 <wifi_uart_service+0x6a>
            offset += 2;
    18ec:	3402      	adds	r4, #2
    18ee:	b2a4      	uxth	r4, r4
            continue;
    18f0:	e7ea      	b.n	18c8 <wifi_uart_service+0x40>
        }      
        
        rx_value_len = wifi_data_process_buf[offset + LENGTH_HIGH] * 0x100;
    18f2:	1d29      	adds	r1, r5, #4
    18f4:	4819      	ldr	r0, [pc, #100]	; (195c <wifi_uart_service+0xd4>)
    18f6:	5c46      	ldrb	r6, [r0, r1]
    18f8:	0236      	lsls	r6, r6, #8
        rx_value_len += (wifi_data_process_buf[offset + LENGTH_LOW] + PROTOCOL_HEAD);
    18fa:	1d69      	adds	r1, r5, #5
    18fc:	5c41      	ldrb	r1, [r0, r1]
    18fe:	3107      	adds	r1, #7
    1900:	1876      	adds	r6, r6, r1
    1902:	b2b6      	uxth	r6, r6
        if(rx_value_len > sizeof(wifi_data_process_buf) + PROTOCOL_HEAD) {
    1904:	2e26      	cmp	r6, #38	; 0x26
    1906:	d902      	bls.n	190e <wifi_uart_service+0x86>
            offset += 3;
    1908:	3403      	adds	r4, #3
    190a:	b2a4      	uxth	r4, r4
            continue;
    190c:	e7dc      	b.n	18c8 <wifi_uart_service+0x40>
        }
        
        if((rx_in - offset) < rx_value_len) {
    190e:	42b3      	cmp	r3, r6
    1910:	db14      	blt.n	193c <wifi_uart_service+0xb4>
            break;
        }
        
        //Data reception completed
        if(get_check_sum((unsigned char *)wifi_data_process_buf + offset,rx_value_len - 1) != wifi_data_process_buf[offset + rx_value_len - 1]) {
    1912:	1e71      	subs	r1, r6, #1
    1914:	b289      	uxth	r1, r1
    1916:	4f11      	ldr	r7, [pc, #68]	; (195c <wifi_uart_service+0xd4>)
    1918:	19e0      	adds	r0, r4, r7
    191a:	4b12      	ldr	r3, [pc, #72]	; (1964 <wifi_uart_service+0xdc>)
    191c:	4798      	blx	r3
    191e:	19ad      	adds	r5, r5, r6
    1920:	3d01      	subs	r5, #1
    1922:	5d7b      	ldrb	r3, [r7, r5]
    1924:	b2db      	uxtb	r3, r3
    1926:	4298      	cmp	r0, r3
    1928:	d002      	beq.n	1930 <wifi_uart_service+0xa8>
            //Verification error
            //printf("crc error (crc:0x%X  but data:0x%X)\r\n",get_check_sum((unsigned char *)wifi_data_process_buf + offset,rx_value_len - 1),wifi_data_process_buf[offset + rx_value_len - 1]);
            offset += 3;
    192a:	3403      	adds	r4, #3
    192c:	b2a4      	uxth	r4, r4
            continue;
    192e:	e7cb      	b.n	18c8 <wifi_uart_service+0x40>
        }
        
        data_handle(offset);
    1930:	0020      	movs	r0, r4
    1932:	4b0d      	ldr	r3, [pc, #52]	; (1968 <wifi_uart_service+0xe0>)
    1934:	4798      	blx	r3
        offset += rx_value_len;
    1936:	19a4      	adds	r4, r4, r6
    1938:	b2a4      	uxth	r4, r4
    193a:	e7c5      	b.n	18c8 <wifi_uart_service+0x40>
    }//end while

    rx_in -= offset;
    193c:	1b12      	subs	r2, r2, r4
    193e:	b292      	uxth	r2, r2
    1940:	4b04      	ldr	r3, [pc, #16]	; (1954 <wifi_uart_service+0xcc>)
    1942:	801a      	strh	r2, [r3, #0]
    if(rx_in > 0) {
    1944:	2a00      	cmp	r2, #0
    1946:	d100      	bne.n	194a <wifi_uart_service+0xc2>
        my_memcpy((char *)wifi_data_process_buf, (const char *)wifi_data_process_buf + offset, rx_in);
    }
}
    1948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        my_memcpy((char *)wifi_data_process_buf, (const char *)wifi_data_process_buf + offset, rx_in);
    194a:	4804      	ldr	r0, [pc, #16]	; (195c <wifi_uart_service+0xd4>)
    194c:	1821      	adds	r1, r4, r0
    194e:	4b07      	ldr	r3, [pc, #28]	; (196c <wifi_uart_service+0xe4>)
    1950:	4798      	blx	r3
    1952:	e7f9      	b.n	1948 <wifi_uart_service+0xc0>
    1954:	20000130 	.word	0x20000130
    1958:	000022e1 	.word	0x000022e1
    195c:	2000024c 	.word	0x2000024c
    1960:	000022c5 	.word	0x000022c5
    1964:	00001f0d 	.word	0x00001f0d
    1968:	0000216d 	.word	0x0000216d
    196c:	0000167d 	.word	0x0000167d

00001970 <wifi_protocol_init>:
 * @note   This function must be called in the MCU initialization code
 */
void wifi_protocol_init(void)
{
    // #error " Please add wifi_protocol_init() in the main function to complete the wifi protocol initialization and delete the line."
    rx_buf_in = (unsigned char *)wifi_uart_rx_buf;
    1970:	4b05      	ldr	r3, [pc, #20]	; (1988 <wifi_protocol_init+0x18>)
    1972:	4a06      	ldr	r2, [pc, #24]	; (198c <wifi_protocol_init+0x1c>)
    1974:	6013      	str	r3, [r2, #0]
    rx_buf_out = (unsigned char *)wifi_uart_rx_buf;
    1976:	4a06      	ldr	r2, [pc, #24]	; (1990 <wifi_protocol_init+0x20>)
    1978:	6013      	str	r3, [r2, #0]
    
    stop_update_flag = T_DISABLE;
    197a:	2200      	movs	r2, #0
    197c:	4b05      	ldr	r3, [pc, #20]	; (1994 <wifi_protocol_init+0x24>)
    197e:	701a      	strb	r2, [r3, #0]
    
#ifndef WIFI_CONTROL_SELF_MODE
    wifi_work_state = WIFI_SATE_UNKNOW;
    1980:	32ff      	adds	r2, #255	; 0xff
    1982:	4b05      	ldr	r3, [pc, #20]	; (1998 <wifi_protocol_init+0x28>)
    1984:	701a      	strb	r2, [r3, #0]
#endif
}
    1986:	4770      	bx	lr
    1988:	20000270 	.word	0x20000270
    198c:	2000026c 	.word	0x2000026c
    1990:	20000288 	.word	0x20000288
    1994:	200002c5 	.word	0x200002c5
    1998:	200002c3 	.word	0x200002c3

0000199c <dp_download_switch_inching_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : 可下发可上报type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_switch_inching_handle(const unsigned char value[], unsigned short length)
{
    199c:	b510      	push	{r4, lr}
    199e:	000a      	movs	r2, r1
    string_data[6] = value[6];
    string_data[7] = value[7];
    */
    
    //处理完DP数据后应有反馈
    ret = mcu_dp_string_update(DPID_SWITCH_INCHING,value, length);
    19a0:	0001      	movs	r1, r0
    19a2:	2013      	movs	r0, #19
    19a4:	4b02      	ldr	r3, [pc, #8]	; (19b0 <dp_download_switch_inching_handle+0x14>)
    19a6:	4798      	blx	r3
    if(ret == T_SUCCESS)
    19a8:	2801      	cmp	r0, #1
    19aa:	d000      	beq.n	19ae <dp_download_switch_inching_handle+0x12>
        return T_SUCCESS;
    else
        return T_ERROR;
    19ac:	2000      	movs	r0, #0
}
    19ae:	bd10      	pop	{r4, pc}
    19b0:	000017ad 	.word	0x000017ad

000019b4 <dp_download_switch_1_handle>:
{
    19b4:	b510      	push	{r4, lr}
    switch_1 = mcu_get_dp_download_bool(value,length);
    19b6:	4b05      	ldr	r3, [pc, #20]	; (19cc <dp_download_switch_1_handle+0x18>)
    19b8:	4798      	blx	r3
    19ba:	0001      	movs	r1, r0
    ret = mcu_dp_bool_update(DPID_SWITCH_1,switch_1);
    19bc:	2001      	movs	r0, #1
    19be:	4b04      	ldr	r3, [pc, #16]	; (19d0 <dp_download_switch_1_handle+0x1c>)
    19c0:	4798      	blx	r3
    if(ret == T_SUCCESS)
    19c2:	2801      	cmp	r0, #1
    19c4:	d000      	beq.n	19c8 <dp_download_switch_1_handle+0x14>
        return T_ERROR;
    19c6:	2000      	movs	r0, #0
}
    19c8:	bd10      	pop	{r4, pc}
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	00001835 	.word	0x00001835
    19d0:	0000170d 	.word	0x0000170d

000019d4 <dp_download_switch_2_handle>:
{
    19d4:	b510      	push	{r4, lr}
    switch_2 = mcu_get_dp_download_bool(value,length);
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <dp_download_switch_2_handle+0x18>)
    19d8:	4798      	blx	r3
    19da:	0001      	movs	r1, r0
    ret = mcu_dp_bool_update(DPID_SWITCH_2,switch_2);
    19dc:	2002      	movs	r0, #2
    19de:	4b04      	ldr	r3, [pc, #16]	; (19f0 <dp_download_switch_2_handle+0x1c>)
    19e0:	4798      	blx	r3
    if(ret == T_SUCCESS)
    19e2:	2801      	cmp	r0, #1
    19e4:	d000      	beq.n	19e8 <dp_download_switch_2_handle+0x14>
        return T_ERROR;
    19e6:	2000      	movs	r0, #0
}
    19e8:	bd10      	pop	{r4, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	00001835 	.word	0x00001835
    19f0:	0000170d 	.word	0x0000170d

000019f4 <dp_download_switch_3_handle>:
{
    19f4:	b510      	push	{r4, lr}
    switch_3 = mcu_get_dp_download_bool(value,length);
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <dp_download_switch_3_handle+0x18>)
    19f8:	4798      	blx	r3
    19fa:	0001      	movs	r1, r0
    ret = mcu_dp_bool_update(DPID_SWITCH_3,switch_3);
    19fc:	2003      	movs	r0, #3
    19fe:	4b04      	ldr	r3, [pc, #16]	; (1a10 <dp_download_switch_3_handle+0x1c>)
    1a00:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1a02:	2801      	cmp	r0, #1
    1a04:	d000      	beq.n	1a08 <dp_download_switch_3_handle+0x14>
        return T_ERROR;
    1a06:	2000      	movs	r0, #0
}
    1a08:	bd10      	pop	{r4, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	00001835 	.word	0x00001835
    1a10:	0000170d 	.word	0x0000170d

00001a14 <dp_download_switch_4_handle>:
{
    1a14:	b510      	push	{r4, lr}
    switch_4 = mcu_get_dp_download_bool(value,length);
    1a16:	4b05      	ldr	r3, [pc, #20]	; (1a2c <dp_download_switch_4_handle+0x18>)
    1a18:	4798      	blx	r3
    1a1a:	0001      	movs	r1, r0
    ret = mcu_dp_bool_update(DPID_SWITCH_4,switch_4);
    1a1c:	2004      	movs	r0, #4
    1a1e:	4b04      	ldr	r3, [pc, #16]	; (1a30 <dp_download_switch_4_handle+0x1c>)
    1a20:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1a22:	2801      	cmp	r0, #1
    1a24:	d000      	beq.n	1a28 <dp_download_switch_4_handle+0x14>
        return T_ERROR;
    1a26:	2000      	movs	r0, #0
}
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	00001835 	.word	0x00001835
    1a30:	0000170d 	.word	0x0000170d

00001a34 <dp_download_switch_all_handle>:
{
    1a34:	b510      	push	{r4, lr}
    switch_all = mcu_get_dp_download_bool(value,length);
    1a36:	4b05      	ldr	r3, [pc, #20]	; (1a4c <dp_download_switch_all_handle+0x18>)
    1a38:	4798      	blx	r3
    1a3a:	0001      	movs	r1, r0
    ret = mcu_dp_bool_update(DPID_SWITCH_ALL,switch_all);
    1a3c:	200d      	movs	r0, #13
    1a3e:	4b04      	ldr	r3, [pc, #16]	; (1a50 <dp_download_switch_all_handle+0x1c>)
    1a40:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1a42:	2801      	cmp	r0, #1
    1a44:	d000      	beq.n	1a48 <dp_download_switch_all_handle+0x14>
        return T_ERROR;
    1a46:	2000      	movs	r0, #0
}
    1a48:	bd10      	pop	{r4, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	00001835 	.word	0x00001835
    1a50:	0000170d 	.word	0x0000170d

00001a54 <dp_download_backlight_switch_handle>:
{
    1a54:	b510      	push	{r4, lr}
    backlight_switch = mcu_get_dp_download_bool(value,length);
    1a56:	4b05      	ldr	r3, [pc, #20]	; (1a6c <dp_download_backlight_switch_handle+0x18>)
    1a58:	4798      	blx	r3
    1a5a:	0001      	movs	r1, r0
    ret = mcu_dp_bool_update(DPID_BACKLIGHT_SWITCH,backlight_switch);
    1a5c:	2010      	movs	r0, #16
    1a5e:	4b04      	ldr	r3, [pc, #16]	; (1a70 <dp_download_backlight_switch_handle+0x1c>)
    1a60:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1a62:	2801      	cmp	r0, #1
    1a64:	d000      	beq.n	1a68 <dp_download_backlight_switch_handle+0x14>
        return T_ERROR;
    1a66:	2000      	movs	r0, #0
}
    1a68:	bd10      	pop	{r4, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	00001835 	.word	0x00001835
    1a70:	0000170d 	.word	0x0000170d

00001a74 <dp_download_countdown_1_handle>:
{
    1a74:	b510      	push	{r4, lr}
    countdown_1 = mcu_get_dp_download_value(value,length);
    1a76:	4b05      	ldr	r3, [pc, #20]	; (1a8c <dp_download_countdown_1_handle+0x18>)
    1a78:	4798      	blx	r3
    1a7a:	0001      	movs	r1, r0
    ret = mcu_dp_value_update(DPID_COUNTDOWN_1,countdown_1);
    1a7c:	2007      	movs	r0, #7
    1a7e:	4b04      	ldr	r3, [pc, #16]	; (1a90 <dp_download_countdown_1_handle+0x1c>)
    1a80:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1a82:	2801      	cmp	r0, #1
    1a84:	d000      	beq.n	1a88 <dp_download_countdown_1_handle+0x14>
        return T_ERROR;
    1a86:	2000      	movs	r0, #0
}
    1a88:	bd10      	pop	{r4, pc}
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	0000183d 	.word	0x0000183d
    1a90:	0000175d 	.word	0x0000175d

00001a94 <dp_download_countdown_2_handle>:
{
    1a94:	b510      	push	{r4, lr}
    countdown_2 = mcu_get_dp_download_value(value,length);
    1a96:	4b05      	ldr	r3, [pc, #20]	; (1aac <dp_download_countdown_2_handle+0x18>)
    1a98:	4798      	blx	r3
    1a9a:	0001      	movs	r1, r0
    ret = mcu_dp_value_update(DPID_COUNTDOWN_2,countdown_2);
    1a9c:	2008      	movs	r0, #8
    1a9e:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <dp_download_countdown_2_handle+0x1c>)
    1aa0:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1aa2:	2801      	cmp	r0, #1
    1aa4:	d000      	beq.n	1aa8 <dp_download_countdown_2_handle+0x14>
        return T_ERROR;
    1aa6:	2000      	movs	r0, #0
}
    1aa8:	bd10      	pop	{r4, pc}
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	0000183d 	.word	0x0000183d
    1ab0:	0000175d 	.word	0x0000175d

00001ab4 <dp_download_countdown_3_handle>:
{
    1ab4:	b510      	push	{r4, lr}
    countdown_3 = mcu_get_dp_download_value(value,length);
    1ab6:	4b05      	ldr	r3, [pc, #20]	; (1acc <dp_download_countdown_3_handle+0x18>)
    1ab8:	4798      	blx	r3
    1aba:	0001      	movs	r1, r0
    ret = mcu_dp_value_update(DPID_COUNTDOWN_3,countdown_3);
    1abc:	2009      	movs	r0, #9
    1abe:	4b04      	ldr	r3, [pc, #16]	; (1ad0 <dp_download_countdown_3_handle+0x1c>)
    1ac0:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1ac2:	2801      	cmp	r0, #1
    1ac4:	d000      	beq.n	1ac8 <dp_download_countdown_3_handle+0x14>
        return T_ERROR;
    1ac6:	2000      	movs	r0, #0
}
    1ac8:	bd10      	pop	{r4, pc}
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	0000183d 	.word	0x0000183d
    1ad0:	0000175d 	.word	0x0000175d

00001ad4 <dp_download_countdown_4_handle>:
{
    1ad4:	b510      	push	{r4, lr}
    countdown_4 = mcu_get_dp_download_value(value,length);
    1ad6:	4b05      	ldr	r3, [pc, #20]	; (1aec <dp_download_countdown_4_handle+0x18>)
    1ad8:	4798      	blx	r3
    1ada:	0001      	movs	r1, r0
    ret = mcu_dp_value_update(DPID_COUNTDOWN_4,countdown_4);
    1adc:	200a      	movs	r0, #10
    1ade:	4b04      	ldr	r3, [pc, #16]	; (1af0 <dp_download_countdown_4_handle+0x1c>)
    1ae0:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1ae2:	2801      	cmp	r0, #1
    1ae4:	d000      	beq.n	1ae8 <dp_download_countdown_4_handle+0x14>
        return T_ERROR;
    1ae6:	2000      	movs	r0, #0
}
    1ae8:	bd10      	pop	{r4, pc}
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	0000183d 	.word	0x0000183d
    1af0:	0000175d 	.word	0x0000175d

00001af4 <dp_download_backlight_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : 可下发可上报type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_backlight_handle(const unsigned char value[], unsigned short length)
{
    1af4:	b510      	push	{r4, lr}
    //Example: The current DP type isVALUE
    unsigned char ret;
    unsigned long backlight;
    
    backlight = mcu_get_dp_download_value(value,length);
    1af6:	4b05      	ldr	r3, [pc, #20]	; (1b0c <dp_download_backlight_handle+0x18>)
    1af8:	4798      	blx	r3
    1afa:	0001      	movs	r1, r0
    //VALUE类型数据处理
    
    */
    
    //处理完DP数据后应有反馈
    ret = mcu_dp_value_update(DPID_BACKLIGHT,backlight);
    1afc:	2065      	movs	r0, #101	; 0x65
    1afe:	4b04      	ldr	r3, [pc, #16]	; (1b10 <dp_download_backlight_handle+0x1c>)
    1b00:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1b02:	2801      	cmp	r0, #1
    1b04:	d000      	beq.n	1b08 <dp_download_backlight_handle+0x14>
        return T_SUCCESS;
    else
        return T_ERROR;
    1b06:	2000      	movs	r0, #0
}
    1b08:	bd10      	pop	{r4, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	0000183d 	.word	0x0000183d
    1b10:	0000175d 	.word	0x0000175d

00001b14 <dp_download_relay_status_handle>:
{
    1b14:	b510      	push	{r4, lr}
    relay_status = mcu_get_dp_download_enum(value,length);
    1b16:	4b05      	ldr	r3, [pc, #20]	; (1b2c <dp_download_relay_status_handle+0x18>)
    1b18:	4798      	blx	r3
    1b1a:	0001      	movs	r1, r0
    ret = mcu_dp_enum_update(DPID_RELAY_STATUS, relay_status);
    1b1c:	200e      	movs	r0, #14
    1b1e:	4b04      	ldr	r3, [pc, #16]	; (1b30 <dp_download_relay_status_handle+0x1c>)
    1b20:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1b22:	2801      	cmp	r0, #1
    1b24:	d000      	beq.n	1b28 <dp_download_relay_status_handle+0x14>
        return T_ERROR;
    1b26:	2000      	movs	r0, #0
}
    1b28:	bd10      	pop	{r4, pc}
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	00001839 	.word	0x00001839
    1b30:	000017f5 	.word	0x000017f5

00001b34 <dp_download_light_mode_handle>:
{
    1b34:	b510      	push	{r4, lr}
    light_mode = mcu_get_dp_download_enum(value,length);
    1b36:	4b05      	ldr	r3, [pc, #20]	; (1b4c <dp_download_light_mode_handle+0x18>)
    1b38:	4798      	blx	r3
    1b3a:	0001      	movs	r1, r0
    ret = mcu_dp_enum_update(DPID_LIGHT_MODE, light_mode);
    1b3c:	200f      	movs	r0, #15
    1b3e:	4b04      	ldr	r3, [pc, #16]	; (1b50 <dp_download_light_mode_handle+0x1c>)
    1b40:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1b42:	2801      	cmp	r0, #1
    1b44:	d000      	beq.n	1b48 <dp_download_light_mode_handle+0x14>
        return T_ERROR;
    1b46:	2000      	movs	r0, #0
}
    1b48:	bd10      	pop	{r4, pc}
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	00001839 	.word	0x00001839
    1b50:	000017f5 	.word	0x000017f5

00001b54 <dp_download_colour_handle>:
        : length:Data length
Return parameter : Successful return:SUCCESS/Failed to return:ERROR
Instructions for use : 可下发可上报type,need to report the result to App after data is dealt with
*****************************************************************************/
static unsigned char dp_download_colour_handle(const unsigned char value[], unsigned short length)
{
    1b54:	b510      	push	{r4, lr}
    //Example: The current DP type isENUM
    unsigned char ret;
    unsigned char colour;
    
    colour = mcu_get_dp_download_enum(value,length);
    1b56:	4b05      	ldr	r3, [pc, #20]	; (1b6c <dp_download_colour_handle+0x18>)
    1b58:	4798      	blx	r3
    1b5a:	0001      	movs	r1, r0
    
        break;
    }
    
    //处理完DP数据后应有反馈
    ret = mcu_dp_enum_update(DPID_COLOUR, colour);
    1b5c:	2067      	movs	r0, #103	; 0x67
    1b5e:	4b04      	ldr	r3, [pc, #16]	; (1b70 <dp_download_colour_handle+0x1c>)
    1b60:	4798      	blx	r3
    if(ret == T_SUCCESS)
    1b62:	2801      	cmp	r0, #1
    1b64:	d000      	beq.n	1b68 <dp_download_colour_handle+0x14>
        return T_SUCCESS;
    else
        return T_ERROR;
    1b66:	2000      	movs	r0, #0
}
    1b68:	bd10      	pop	{r4, pc}
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	00001839 	.word	0x00001839
    1b70:	000017f5 	.word	0x000017f5

00001b74 <uart_transmit_output>:
{
    1b74:	b510      	push	{r4, lr}
      Uart_PutChar(value);
    1b76:	4b01      	ldr	r3, [pc, #4]	; (1b7c <uart_transmit_output+0x8>)
    1b78:	4798      	blx	r3
}
    1b7a:	bd10      	pop	{r4, pc}
    1b7c:	0000237d 	.word	0x0000237d

00001b80 <all_data_update>:
{
    1b80:	b570      	push	{r4, r5, r6, lr}
    mcu_dp_bool_update(DPID_SWITCH_1, 0);
    1b82:	2100      	movs	r1, #0
    1b84:	2001      	movs	r0, #1
    1b86:	4c18      	ldr	r4, [pc, #96]	; (1be8 <all_data_update+0x68>)
    1b88:	47a0      	blx	r4
    mcu_dp_bool_update(DPID_SWITCH_2,0); //BOOL型数据上报;
    1b8a:	2100      	movs	r1, #0
    1b8c:	2002      	movs	r0, #2
    1b8e:	47a0      	blx	r4
    mcu_dp_bool_update(DPID_SWITCH_3, 0); //BOOL型数据上报;
    1b90:	2100      	movs	r1, #0
    1b92:	2003      	movs	r0, #3
    1b94:	47a0      	blx	r4
    mcu_dp_bool_update(DPID_SWITCH_4, 0); //BOOL型数据上报;
    1b96:	2100      	movs	r1, #0
    1b98:	2004      	movs	r0, #4
    1b9a:	47a0      	blx	r4
    mcu_dp_value_update(DPID_COUNTDOWN_1, 0); //VALUE型数据上报;
    1b9c:	2100      	movs	r1, #0
    1b9e:	2007      	movs	r0, #7
    1ba0:	4d12      	ldr	r5, [pc, #72]	; (1bec <all_data_update+0x6c>)
    1ba2:	47a8      	blx	r5
    mcu_dp_value_update(DPID_COUNTDOWN_2, 0); //VALUE型数据上报;
    1ba4:	2100      	movs	r1, #0
    1ba6:	2008      	movs	r0, #8
    1ba8:	47a8      	blx	r5
    mcu_dp_value_update(DPID_COUNTDOWN_3, 0); //VALUE型数据上报;
    1baa:	2100      	movs	r1, #0
    1bac:	2009      	movs	r0, #9
    1bae:	47a8      	blx	r5
    mcu_dp_value_update(DPID_COUNTDOWN_4, 0); //VALUE型数据上报;
    1bb0:	2100      	movs	r1, #0
    1bb2:	200a      	movs	r0, #10
    1bb4:	47a8      	blx	r5
    mcu_dp_bool_update(DPID_SWITCH_ALL, 0); //BOOL型数据上报;
    1bb6:	2100      	movs	r1, #0
    1bb8:	200d      	movs	r0, #13
    1bba:	47a0      	blx	r4
    mcu_dp_enum_update(DPID_RELAY_STATUS, 0); //枚举型数据上报;
    1bbc:	2100      	movs	r1, #0
    1bbe:	200e      	movs	r0, #14
    1bc0:	4e0b      	ldr	r6, [pc, #44]	; (1bf0 <all_data_update+0x70>)
    1bc2:	47b0      	blx	r6
    mcu_dp_enum_update(DPID_LIGHT_MODE, 0); //枚举型数据上报;
    1bc4:	2100      	movs	r1, #0
    1bc6:	200f      	movs	r0, #15
    1bc8:	47b0      	blx	r6
    mcu_dp_bool_update(DPID_BACKLIGHT_SWITCH, 0); //BOOL型数据上报;
    1bca:	2100      	movs	r1, #0
    1bcc:	2010      	movs	r0, #16
    1bce:	47a0      	blx	r4
    mcu_dp_string_update(DPID_SWITCH_INCHING, "ON", 2); //STRING型数据上报;
    1bd0:	2202      	movs	r2, #2
    1bd2:	4908      	ldr	r1, [pc, #32]	; (1bf4 <all_data_update+0x74>)
    1bd4:	2013      	movs	r0, #19
    1bd6:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <all_data_update+0x78>)
    1bd8:	4798      	blx	r3
    mcu_dp_value_update(DPID_BACKLIGHT, 0); //VALUE型数据上报;
    1bda:	2100      	movs	r1, #0
    1bdc:	2065      	movs	r0, #101	; 0x65
    1bde:	47a8      	blx	r5
    mcu_dp_enum_update(DPID_COLOUR, 0); //枚举型数据上报;
    1be0:	2100      	movs	r1, #0
    1be2:	2067      	movs	r0, #103	; 0x67
    1be4:	47b0      	blx	r6
}
    1be6:	bd70      	pop	{r4, r5, r6, pc}
    1be8:	0000170d 	.word	0x0000170d
    1bec:	0000175d 	.word	0x0000175d
    1bf0:	000017f5 	.word	0x000017f5
    1bf4:	00004074 	.word	0x00004074
    1bf8:	000017ad 	.word	0x000017ad

00001bfc <dp_download_handle>:
 * -           0(ERROR): failure
 * -           1(SUCCESS): success
 * @note   The function user cannot modify
 */
unsigned char dp_download_handle(unsigned char dpid,const unsigned char value[], unsigned short length)
{
    1bfc:	b510      	push	{r4, lr}
    1bfe:	000c      	movs	r4, r1
    Current function processing can issue/report data calls                    
    Need to implement the data processing in the specific function
    The result of the processing needs to be fed back to the APP, otherwise the APP will consider the delivery failure.
    ***********************************/
    unsigned char ret;
    switch(dpid) {
    1c00:	2867      	cmp	r0, #103	; 0x67
    1c02:	d84e      	bhi.n	1ca2 <dp_download_handle+0xa6>
    1c04:	0080      	lsls	r0, r0, #2
    1c06:	4b28      	ldr	r3, [pc, #160]	; (1ca8 <dp_download_handle+0xac>)
    1c08:	581b      	ldr	r3, [r3, r0]
    1c0a:	469f      	mov	pc, r3
        case DPID_SWITCH_1:
            //开关1processing function
            ret = dp_download_switch_1_handle(value,length);
    1c0c:	0011      	movs	r1, r2
    1c0e:	0020      	movs	r0, r4
    1c10:	4b26      	ldr	r3, [pc, #152]	; (1cac <dp_download_handle+0xb0>)
    1c12:	4798      	blx	r3
        
        default:
        break;
    }
    return ret;
}
    1c14:	bd10      	pop	{r4, pc}
            ret = dp_download_switch_2_handle(value,length);
    1c16:	0011      	movs	r1, r2
    1c18:	0020      	movs	r0, r4
    1c1a:	4b25      	ldr	r3, [pc, #148]	; (1cb0 <dp_download_handle+0xb4>)
    1c1c:	4798      	blx	r3
        break;
    1c1e:	e7f9      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_switch_3_handle(value,length);
    1c20:	0011      	movs	r1, r2
    1c22:	0020      	movs	r0, r4
    1c24:	4b23      	ldr	r3, [pc, #140]	; (1cb4 <dp_download_handle+0xb8>)
    1c26:	4798      	blx	r3
        break;
    1c28:	e7f4      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_switch_4_handle(value,length);
    1c2a:	0011      	movs	r1, r2
    1c2c:	0020      	movs	r0, r4
    1c2e:	4b22      	ldr	r3, [pc, #136]	; (1cb8 <dp_download_handle+0xbc>)
    1c30:	4798      	blx	r3
        break;
    1c32:	e7ef      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_countdown_1_handle(value,length);
    1c34:	0011      	movs	r1, r2
    1c36:	0020      	movs	r0, r4
    1c38:	4b20      	ldr	r3, [pc, #128]	; (1cbc <dp_download_handle+0xc0>)
    1c3a:	4798      	blx	r3
        break;
    1c3c:	e7ea      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_countdown_2_handle(value,length);
    1c3e:	0011      	movs	r1, r2
    1c40:	0020      	movs	r0, r4
    1c42:	4b1f      	ldr	r3, [pc, #124]	; (1cc0 <dp_download_handle+0xc4>)
    1c44:	4798      	blx	r3
        break;
    1c46:	e7e5      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_countdown_3_handle(value,length);
    1c48:	0011      	movs	r1, r2
    1c4a:	0020      	movs	r0, r4
    1c4c:	4b1d      	ldr	r3, [pc, #116]	; (1cc4 <dp_download_handle+0xc8>)
    1c4e:	4798      	blx	r3
        break;
    1c50:	e7e0      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_countdown_4_handle(value,length);
    1c52:	0011      	movs	r1, r2
    1c54:	0020      	movs	r0, r4
    1c56:	4b1c      	ldr	r3, [pc, #112]	; (1cc8 <dp_download_handle+0xcc>)
    1c58:	4798      	blx	r3
        break;
    1c5a:	e7db      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_switch_all_handle(value,length);
    1c5c:	0011      	movs	r1, r2
    1c5e:	0020      	movs	r0, r4
    1c60:	4b1a      	ldr	r3, [pc, #104]	; (1ccc <dp_download_handle+0xd0>)
    1c62:	4798      	blx	r3
        break;
    1c64:	e7d6      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_relay_status_handle(value,length);
    1c66:	0011      	movs	r1, r2
    1c68:	0020      	movs	r0, r4
    1c6a:	4b19      	ldr	r3, [pc, #100]	; (1cd0 <dp_download_handle+0xd4>)
    1c6c:	4798      	blx	r3
        break;
    1c6e:	e7d1      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_light_mode_handle(value,length);
    1c70:	0011      	movs	r1, r2
    1c72:	0020      	movs	r0, r4
    1c74:	4b17      	ldr	r3, [pc, #92]	; (1cd4 <dp_download_handle+0xd8>)
    1c76:	4798      	blx	r3
        break;
    1c78:	e7cc      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_backlight_switch_handle(value,length);
    1c7a:	0011      	movs	r1, r2
    1c7c:	0020      	movs	r0, r4
    1c7e:	4b16      	ldr	r3, [pc, #88]	; (1cd8 <dp_download_handle+0xdc>)
    1c80:	4798      	blx	r3
        break;
    1c82:	e7c7      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_switch_inching_handle(value,length);
    1c84:	0011      	movs	r1, r2
    1c86:	0020      	movs	r0, r4
    1c88:	4b14      	ldr	r3, [pc, #80]	; (1cdc <dp_download_handle+0xe0>)
    1c8a:	4798      	blx	r3
        break;
    1c8c:	e7c2      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_backlight_handle(value,length);
    1c8e:	0011      	movs	r1, r2
    1c90:	0020      	movs	r0, r4
    1c92:	4b13      	ldr	r3, [pc, #76]	; (1ce0 <dp_download_handle+0xe4>)
    1c94:	4798      	blx	r3
        break;
    1c96:	e7bd      	b.n	1c14 <dp_download_handle+0x18>
            ret = dp_download_colour_handle(value,length);
    1c98:	0011      	movs	r1, r2
    1c9a:	0020      	movs	r0, r4
    1c9c:	4b11      	ldr	r3, [pc, #68]	; (1ce4 <dp_download_handle+0xe8>)
    1c9e:	4798      	blx	r3
        break;
    1ca0:	e7b8      	b.n	1c14 <dp_download_handle+0x18>
    switch(dpid) {
    1ca2:	2000      	movs	r0, #0
    1ca4:	e7b6      	b.n	1c14 <dp_download_handle+0x18>
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00003eb4 	.word	0x00003eb4
    1cac:	000019b5 	.word	0x000019b5
    1cb0:	000019d5 	.word	0x000019d5
    1cb4:	000019f5 	.word	0x000019f5
    1cb8:	00001a15 	.word	0x00001a15
    1cbc:	00001a75 	.word	0x00001a75
    1cc0:	00001a95 	.word	0x00001a95
    1cc4:	00001ab5 	.word	0x00001ab5
    1cc8:	00001ad5 	.word	0x00001ad5
    1ccc:	00001a35 	.word	0x00001a35
    1cd0:	00001b15 	.word	0x00001b15
    1cd4:	00001b35 	.word	0x00001b35
    1cd8:	00001a55 	.word	0x00001a55
    1cdc:	0000199d 	.word	0x0000199d
    1ce0:	00001af5 	.word	0x00001af5
    1ce4:	00001b55 	.word	0x00001b55

00001ce8 <get_download_cmd_total>:
 * @note   The function user cannot modify
 */
unsigned char get_download_cmd_total(void)
{
    return(sizeof(download_cmd) / sizeof(download_cmd[0]));
}
    1ce8:	200f      	movs	r0, #15
    1cea:	4770      	bx	lr

00001cec <wifi_test_result>:
        }
    }else {
        //Test success
        //rssi is the signal strength (0-100, 0 signal is the worst, 100 signal is the strongest)
    }
}
    1cec:	4770      	bx	lr
	...

00001cf0 <mcu_open_weather>:
* @brief  Open weather service
 * @param  Null
 * @return Null
 */
void mcu_open_weather(void)
{
    1cf0:	b530      	push	{r4, r5, lr}
    1cf2:	b085      	sub	sp, #20
    int i = 0;
    char buffer[13] = {0};
    1cf4:	220d      	movs	r2, #13
    1cf6:	2100      	movs	r1, #0
    1cf8:	4668      	mov	r0, sp
    1cfa:	4b17      	ldr	r3, [pc, #92]	; (1d58 <mcu_open_weather+0x68>)
    1cfc:	4798      	blx	r3
    unsigned char weather_len = 0;
    unsigned short send_len = 0;
    1cfe:	2400      	movs	r4, #0
    
    weather_len = sizeof(weather_choose) / sizeof(weather_choose[0]);
      
    for(i=0;i<weather_len;i++) {
    1d00:	2500      	movs	r5, #0
    1d02:	e011      	b.n	1d28 <mcu_open_weather+0x38>
        buffer[0] = sprintf(buffer+1,"w.%s",weather_choose[i]);
    1d04:	00aa      	lsls	r2, r5, #2
    1d06:	4b15      	ldr	r3, [pc, #84]	; (1d5c <mcu_open_weather+0x6c>)
    1d08:	58d2      	ldr	r2, [r2, r3]
    1d0a:	4915      	ldr	r1, [pc, #84]	; (1d60 <mcu_open_weather+0x70>)
    1d0c:	466b      	mov	r3, sp
    1d0e:	1c58      	adds	r0, r3, #1
    1d10:	4b14      	ldr	r3, [pc, #80]	; (1d64 <mcu_open_weather+0x74>)
    1d12:	4798      	blx	r3
    1d14:	b2c2      	uxtb	r2, r0
    1d16:	466b      	mov	r3, sp
    1d18:	701a      	strb	r2, [r3, #0]
        send_len = set_wifi_uart_buffer(send_len, (unsigned char *)buffer, buffer[0]+1);
    1d1a:	3201      	adds	r2, #1
    1d1c:	4669      	mov	r1, sp
    1d1e:	0020      	movs	r0, r4
    1d20:	4b11      	ldr	r3, [pc, #68]	; (1d68 <mcu_open_weather+0x78>)
    1d22:	4798      	blx	r3
    1d24:	0004      	movs	r4, r0
    for(i=0;i<weather_len;i++) {
    1d26:	3501      	adds	r5, #1
    1d28:	2d03      	cmp	r5, #3
    1d2a:	ddeb      	ble.n	1d04 <mcu_open_weather+0x14>
    
    buffer[0] = sprintf(buffer+1,"t.unix"); //green time   or use  // buffer[0] = sprintf(buffer+1,"t.local"); //local time
    length = set_wifi_uart_buffer(length, (unsigned char *)buffer, buffer[0]+1);
    */
    
    buffer[0] = sprintf(buffer+1,"w.date.%d",WEATHER_FORECAST_DAYS_NUM);
    1d2c:	2201      	movs	r2, #1
    1d2e:	490f      	ldr	r1, [pc, #60]	; (1d6c <mcu_open_weather+0x7c>)
    1d30:	466b      	mov	r3, sp
    1d32:	1c58      	adds	r0, r3, #1
    1d34:	4b0b      	ldr	r3, [pc, #44]	; (1d64 <mcu_open_weather+0x74>)
    1d36:	4798      	blx	r3
    1d38:	b2c2      	uxtb	r2, r0
    1d3a:	466b      	mov	r3, sp
    1d3c:	701a      	strb	r2, [r3, #0]
    send_len = set_wifi_uart_buffer(send_len, (unsigned char *)buffer, buffer[0]+1);
    1d3e:	3201      	adds	r2, #1
    1d40:	4669      	mov	r1, sp
    1d42:	0020      	movs	r0, r4
    1d44:	4b08      	ldr	r3, [pc, #32]	; (1d68 <mcu_open_weather+0x78>)
    1d46:	4798      	blx	r3
    1d48:	0002      	movs	r2, r0
    
    wifi_uart_write_frame(WEATHER_OPEN_CMD, MCU_TX_VER, send_len);
    1d4a:	2103      	movs	r1, #3
    1d4c:	2020      	movs	r0, #32
    1d4e:	4b08      	ldr	r3, [pc, #32]	; (1d70 <mcu_open_weather+0x80>)
    1d50:	4798      	blx	r3
}
    1d52:	b005      	add	sp, #20
    1d54:	bd30      	pop	{r4, r5, pc}
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	000029c9 	.word	0x000029c9
    1d5c:	20000048 	.word	0x20000048
    1d60:	00004078 	.word	0x00004078
    1d64:	00002b79 	.word	0x00002b79
    1d68:	00001eed 	.word	0x00001eed
    1d6c:	00004080 	.word	0x00004080
    1d70:	00001f29 	.word	0x00001f29

00001d74 <weather_open_return_handle>:
    }else if(res == 0) {
        //Open weather return failed
        //Get the error code
        err_num = err; 
    }
}
    1d74:	4770      	bx	lr
	...

00001d78 <weather_data_user_handle>:
 * @ref       1: tomorrow
 * @return Null
 * @note   MCU needs to implement this function by itself
 */
void weather_data_user_handle(char *name, unsigned char type, const unsigned char *data, char day)
{
    1d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d7a:	b091      	sub	sp, #68	; 0x44
    1d7c:	0005      	movs	r5, r0
    1d7e:	000e      	movs	r6, r1
    1d80:	0017      	movs	r7, r2
    1d82:	9301      	str	r3, [sp, #4]
    //#error "Here is just an example. Please correct the weather data processing code yourself. Please delete the line after you finish."
    int value_int;
    char value_string[50];//Since there are many parameters, the default is 50. You can reduce this value appropriately based on the defined parameters.
    
    my_memset(value_string, '\0', 50);
    1d84:	2232      	movs	r2, #50	; 0x32
    1d86:	2100      	movs	r1, #0
    1d88:	a803      	add	r0, sp, #12
    1d8a:	4b23      	ldr	r3, [pc, #140]	; (1e18 <weather_data_user_handle+0xa0>)
    1d8c:	4798      	blx	r3
    
  //First get the data type
    if(type == 0) { //The parameter is INT type
    1d8e:	2e00      	cmp	r6, #0
    1d90:	d127      	bne.n	1de2 <weather_data_user_handle+0x6a>
        value_int = data[0] << 24 | data[1] << 16 | data[2] << 8 | data[3];
    1d92:	783c      	ldrb	r4, [r7, #0]
    1d94:	0624      	lsls	r4, r4, #24
    1d96:	787b      	ldrb	r3, [r7, #1]
    1d98:	041b      	lsls	r3, r3, #16
    1d9a:	431c      	orrs	r4, r3
    1d9c:	78bb      	ldrb	r3, [r7, #2]
    1d9e:	021b      	lsls	r3, r3, #8
    1da0:	431c      	orrs	r4, r3
    1da2:	78fb      	ldrb	r3, [r7, #3]
    1da4:	431c      	orrs	r4, r3
    }else if(type == 1) {
        my_strcpy(value_string, data);
    }
    
    //Note that the parameter value is obtained according to the selected parameter type!!!
    if(my_strcmp(name, "temp") == 0) {
    1da6:	491d      	ldr	r1, [pc, #116]	; (1e1c <weather_data_user_handle+0xa4>)
    1da8:	0028      	movs	r0, r5
    1daa:	4b1d      	ldr	r3, [pc, #116]	; (1e20 <weather_data_user_handle+0xa8>)
    1dac:	4798      	blx	r3
    1dae:	2800      	cmp	r0, #0
    1db0:	d01e      	beq.n	1df0 <weather_data_user_handle+0x78>
        printf("day:%d temp value is:%d\r\n", day, value_int);          //int type
    }else if(my_strcmp(name, "humidity") == 0) {
    1db2:	491c      	ldr	r1, [pc, #112]	; (1e24 <weather_data_user_handle+0xac>)
    1db4:	0028      	movs	r0, r5
    1db6:	4b1a      	ldr	r3, [pc, #104]	; (1e20 <weather_data_user_handle+0xa8>)
    1db8:	4798      	blx	r3
    1dba:	2800      	cmp	r0, #0
    1dbc:	d01f      	beq.n	1dfe <weather_data_user_handle+0x86>
        printf("day:%d humidity value is:%d\r\n", day, value_int);      //int type
    }else if(my_strcmp(name, "pm25") == 0) {
    1dbe:	491a      	ldr	r1, [pc, #104]	; (1e28 <weather_data_user_handle+0xb0>)
    1dc0:	0028      	movs	r0, r5
    1dc2:	4b17      	ldr	r3, [pc, #92]	; (1e20 <weather_data_user_handle+0xa8>)
    1dc4:	4798      	blx	r3
    1dc6:	2800      	cmp	r0, #0
    1dc8:	d01f      	beq.n	1e0a <weather_data_user_handle+0x92>
        printf("day:%d pm25 value is:%d\r\n", day, value_int);          //int type
    }else if(my_strcmp(name, "condition") == 0) {
    1dca:	4918      	ldr	r1, [pc, #96]	; (1e2c <weather_data_user_handle+0xb4>)
    1dcc:	0028      	movs	r0, r5
    1dce:	4b14      	ldr	r3, [pc, #80]	; (1e20 <weather_data_user_handle+0xa8>)
    1dd0:	4798      	blx	r3
    1dd2:	2800      	cmp	r0, #0
    1dd4:	d111      	bne.n	1dfa <weather_data_user_handle+0x82>
        printf("day:%d condition value is:%s\r\n", day, value_string);  //string type
    1dd6:	aa03      	add	r2, sp, #12
    1dd8:	9901      	ldr	r1, [sp, #4]
    1dda:	4815      	ldr	r0, [pc, #84]	; (1e30 <weather_data_user_handle+0xb8>)
    1ddc:	4b15      	ldr	r3, [pc, #84]	; (1e34 <weather_data_user_handle+0xbc>)
    1dde:	4798      	blx	r3
    }
}
    1de0:	e00b      	b.n	1dfa <weather_data_user_handle+0x82>
    }else if(type == 1) {
    1de2:	2e01      	cmp	r6, #1
    1de4:	d1df      	bne.n	1da6 <weather_data_user_handle+0x2e>
        my_strcpy(value_string, data);
    1de6:	0039      	movs	r1, r7
    1de8:	a803      	add	r0, sp, #12
    1dea:	4b13      	ldr	r3, [pc, #76]	; (1e38 <weather_data_user_handle+0xc0>)
    1dec:	4798      	blx	r3
    1dee:	e7da      	b.n	1da6 <weather_data_user_handle+0x2e>
        printf("day:%d temp value is:%d\r\n", day, value_int);          //int type
    1df0:	0022      	movs	r2, r4
    1df2:	9901      	ldr	r1, [sp, #4]
    1df4:	4811      	ldr	r0, [pc, #68]	; (1e3c <weather_data_user_handle+0xc4>)
    1df6:	4b0f      	ldr	r3, [pc, #60]	; (1e34 <weather_data_user_handle+0xbc>)
    1df8:	4798      	blx	r3
}
    1dfa:	b011      	add	sp, #68	; 0x44
    1dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("day:%d humidity value is:%d\r\n", day, value_int);      //int type
    1dfe:	0022      	movs	r2, r4
    1e00:	9901      	ldr	r1, [sp, #4]
    1e02:	480f      	ldr	r0, [pc, #60]	; (1e40 <weather_data_user_handle+0xc8>)
    1e04:	4b0b      	ldr	r3, [pc, #44]	; (1e34 <weather_data_user_handle+0xbc>)
    1e06:	4798      	blx	r3
    1e08:	e7f7      	b.n	1dfa <weather_data_user_handle+0x82>
        printf("day:%d pm25 value is:%d\r\n", day, value_int);          //int type
    1e0a:	0022      	movs	r2, r4
    1e0c:	9901      	ldr	r1, [sp, #4]
    1e0e:	480d      	ldr	r0, [pc, #52]	; (1e44 <weather_data_user_handle+0xcc>)
    1e10:	4b08      	ldr	r3, [pc, #32]	; (1e34 <weather_data_user_handle+0xbc>)
    1e12:	4798      	blx	r3
    1e14:	e7f1      	b.n	1dfa <weather_data_user_handle+0x82>
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	00001663 	.word	0x00001663
    1e1c:	0000408c 	.word	0x0000408c
    1e20:	000016d9 	.word	0x000016d9
    1e24:	000040b0 	.word	0x000040b0
    1e28:	000040dc 	.word	0x000040dc
    1e2c:	00004100 	.word	0x00004100
    1e30:	0000410c 	.word	0x0000410c
    1e34:	000029d9 	.word	0x000029d9
    1e38:	000016b9 	.word	0x000016b9
    1e3c:	00004094 	.word	0x00004094
    1e40:	000040bc 	.word	0x000040bc
    1e44:	000040e4 	.word	0x000040e4

00001e48 <get_wifi_status>:
            //wifi working state 7
        break;
        
        default:break;
    }
}
    1e48:	4770      	bx	lr

00001e4a <mcu_get_mac>:
    if(mac[0] == 1) {
        //Error getting MAC
    }else {
        //Receive the MAC address returned by wifi module correctly
    }
}
    1e4a:	4770      	bx	lr

00001e4c <wifi_uart_write_data>:
 * @param[in] {in} Send buffer pointer
 * @param[in] {len} Data transmission length
 * @return Null
 */
static void wifi_uart_write_data(unsigned char *in, unsigned short len)
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
    1e4e:	1e05      	subs	r5, r0, #0
    if((NULL == in) || (0 == len)) {
    1e50:	d00b      	beq.n	1e6a <wifi_uart_write_data+0x1e>
    1e52:	2900      	cmp	r1, #0
    1e54:	d105      	bne.n	1e62 <wifi_uart_write_data+0x16>
    1e56:	e008      	b.n	1e6a <wifi_uart_write_data+0x1e>
        return;
    }
    
    while(len --) {
        uart_transmit_output(*in);
    1e58:	7828      	ldrb	r0, [r5, #0]
    1e5a:	4b04      	ldr	r3, [pc, #16]	; (1e6c <wifi_uart_write_data+0x20>)
    1e5c:	4798      	blx	r3
        in ++;
    1e5e:	3501      	adds	r5, #1
    while(len --) {
    1e60:	0021      	movs	r1, r4
    1e62:	1e4c      	subs	r4, r1, #1
    1e64:	b2a4      	uxth	r4, r4
    1e66:	2900      	cmp	r1, #0
    1e68:	d1f6      	bne.n	1e58 <wifi_uart_write_data+0xc>
    }
}
    1e6a:	bd70      	pop	{r4, r5, r6, pc}
    1e6c:	00001b75 	.word	0x00001b75

00001e70 <get_dowmload_dpid_index>:
 * @brief  Get the serial number of the DPID in the array
 * @param[in] {dpid} dpid
 * @return dp number
 */
static unsigned char get_dowmload_dpid_index(unsigned char dpid)
{
    1e70:	b510      	push	{r4, lr}
    1e72:	0004      	movs	r4, r0
    unsigned char index;
    unsigned char total = get_download_cmd_total();
    1e74:	4b07      	ldr	r3, [pc, #28]	; (1e94 <get_dowmload_dpid_index+0x24>)
    1e76:	4798      	blx	r3
    1e78:	0001      	movs	r1, r0
    
    for(index = 0; index < total; index ++) {
    1e7a:	2000      	movs	r0, #0
    1e7c:	4288      	cmp	r0, r1
    1e7e:	d207      	bcs.n	1e90 <get_dowmload_dpid_index+0x20>
        if(download_cmd[index].dp_id == dpid) {
    1e80:	0043      	lsls	r3, r0, #1
    1e82:	4a05      	ldr	r2, [pc, #20]	; (1e98 <get_dowmload_dpid_index+0x28>)
    1e84:	5c9b      	ldrb	r3, [r3, r2]
    1e86:	42a3      	cmp	r3, r4
    1e88:	d002      	beq.n	1e90 <get_dowmload_dpid_index+0x20>
    for(index = 0; index < total; index ++) {
    1e8a:	3001      	adds	r0, #1
    1e8c:	b2c0      	uxtb	r0, r0
    1e8e:	e7f5      	b.n	1e7c <get_dowmload_dpid_index+0xc>
            break;
        }
    }
    
    return index;
}
    1e90:	bd10      	pop	{r4, pc}
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	00001ce9 	.word	0x00001ce9
    1e98:	00004054 	.word	0x00004054

00001e9c <data_point_handle>:
 * @brief  Delivery data processing
 * @param[in] {value} Send data source pointer
 * @return Return data processing result
 */
static unsigned char data_point_handle(const unsigned char value[])
{
    1e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e9e:	0005      	movs	r5, r0
    unsigned char dp_id,index;
    unsigned char dp_type;
    unsigned char ret;
    unsigned short dp_len;
    
    dp_id = value[0];
    1ea0:	7806      	ldrb	r6, [r0, #0]
    dp_type = value[1];
    1ea2:	7847      	ldrb	r7, [r0, #1]
    dp_len = value[2] * 0x100;
    1ea4:	7882      	ldrb	r2, [r0, #2]
    1ea6:	0212      	lsls	r2, r2, #8
    dp_len += value[3];
    1ea8:	78c3      	ldrb	r3, [r0, #3]
    1eaa:	18d2      	adds	r2, r2, r3
    1eac:	b294      	uxth	r4, r2
    
    index = get_dowmload_dpid_index(dp_id);
    1eae:	0030      	movs	r0, r6
    1eb0:	4b07      	ldr	r3, [pc, #28]	; (1ed0 <data_point_handle+0x34>)
    1eb2:	4798      	blx	r3

    if(dp_type != download_cmd[index].dp_type) {
    1eb4:	0043      	lsls	r3, r0, #1
    1eb6:	4807      	ldr	r0, [pc, #28]	; (1ed4 <data_point_handle+0x38>)
    1eb8:	18c0      	adds	r0, r0, r3
    1eba:	7843      	ldrb	r3, [r0, #1]
    1ebc:	429f      	cmp	r7, r3
    1ebe:	d001      	beq.n	1ec4 <data_point_handle+0x28>
        //Error message
        return T_FALSE;
    1ec0:	2000      	movs	r0, #0
    }else {
        ret = dp_download_handle(dp_id,value + 4,dp_len);
    }
    
    return ret;
}
    1ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = dp_download_handle(dp_id,value + 4,dp_len);
    1ec4:	1d29      	adds	r1, r5, #4
    1ec6:	0022      	movs	r2, r4
    1ec8:	0030      	movs	r0, r6
    1eca:	4b03      	ldr	r3, [pc, #12]	; (1ed8 <data_point_handle+0x3c>)
    1ecc:	4798      	blx	r3
    return ret;
    1ece:	e7f8      	b.n	1ec2 <data_point_handle+0x26>
    1ed0:	00001e71 	.word	0x00001e71
    1ed4:	00004054 	.word	0x00004054
    1ed8:	00001bfd 	.word	0x00001bfd

00001edc <set_wifi_uart_byte>:
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
    1edc:	1d83      	adds	r3, r0, #6
    *obj = byte;
    1ede:	4a02      	ldr	r2, [pc, #8]	; (1ee8 <set_wifi_uart_byte+0xc>)
    1ee0:	54d1      	strb	r1, [r2, r3]
    dest += 1;
    1ee2:	3001      	adds	r0, #1
    1ee4:	b280      	uxth	r0, r0
}
    1ee6:	4770      	bx	lr
    1ee8:	2000028c 	.word	0x2000028c

00001eec <set_wifi_uart_buffer>:
{
    1eec:	b570      	push	{r4, r5, r6, lr}
    1eee:	0004      	movs	r4, r0
    1ef0:	0015      	movs	r5, r2
    unsigned char *obj = (unsigned char *)wifi_uart_tx_buf + DATA_START + dest;
    1ef2:	3006      	adds	r0, #6
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <set_wifi_uart_buffer+0x18>)
    1ef6:	18c0      	adds	r0, r0, r3
    my_memcpy(obj,src,len);
    1ef8:	4b03      	ldr	r3, [pc, #12]	; (1f08 <set_wifi_uart_buffer+0x1c>)
    1efa:	4798      	blx	r3
    dest += len;
    1efc:	1964      	adds	r4, r4, r5
    1efe:	b2a0      	uxth	r0, r4
}
    1f00:	bd70      	pop	{r4, r5, r6, pc}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	2000028c 	.word	0x2000028c
    1f08:	0000167d 	.word	0x0000167d

00001f0c <get_check_sum>:
{
    1f0c:	b510      	push	{r4, lr}
    unsigned char check_sum = 0;
    1f0e:	2200      	movs	r2, #0
    for(i = 0; i < pack_len; i ++) {
    1f10:	2300      	movs	r3, #0
    1f12:	e005      	b.n	1f20 <get_check_sum+0x14>
        check_sum += *pack ++;
    1f14:	7804      	ldrb	r4, [r0, #0]
    1f16:	1912      	adds	r2, r2, r4
    1f18:	b2d2      	uxtb	r2, r2
    for(i = 0; i < pack_len; i ++) {
    1f1a:	3301      	adds	r3, #1
    1f1c:	b29b      	uxth	r3, r3
        check_sum += *pack ++;
    1f1e:	3001      	adds	r0, #1
    for(i = 0; i < pack_len; i ++) {
    1f20:	428b      	cmp	r3, r1
    1f22:	d3f7      	bcc.n	1f14 <get_check_sum+0x8>
}
    1f24:	0010      	movs	r0, r2
    1f26:	bd10      	pop	{r4, pc}

00001f28 <wifi_uart_write_frame>:
{
    1f28:	b570      	push	{r4, r5, r6, lr}
    wifi_uart_tx_buf[HEAD_FIRST] = 0x55;
    1f2a:	4c0c      	ldr	r4, [pc, #48]	; (1f5c <wifi_uart_write_frame+0x34>)
    1f2c:	2355      	movs	r3, #85	; 0x55
    1f2e:	7023      	strb	r3, [r4, #0]
    wifi_uart_tx_buf[HEAD_SECOND] = 0xaa;
    1f30:	3355      	adds	r3, #85	; 0x55
    1f32:	7063      	strb	r3, [r4, #1]
    wifi_uart_tx_buf[PROTOCOL_VERSION] = fr_ver;
    1f34:	70a1      	strb	r1, [r4, #2]
    wifi_uart_tx_buf[FRAME_TYPE] = fr_type;
    1f36:	70e0      	strb	r0, [r4, #3]
    wifi_uart_tx_buf[LENGTH_HIGH] = len >> 8;
    1f38:	0a13      	lsrs	r3, r2, #8
    1f3a:	7123      	strb	r3, [r4, #4]
    wifi_uart_tx_buf[LENGTH_LOW] = len & 0xff;
    1f3c:	b2d3      	uxtb	r3, r2
    1f3e:	7163      	strb	r3, [r4, #5]
    len += PROTOCOL_HEAD;
    1f40:	1dd5      	adds	r5, r2, #7
    1f42:	b2ad      	uxth	r5, r5
    check_sum = get_check_sum((unsigned char *)wifi_uart_tx_buf, len - 1);
    1f44:	3206      	adds	r2, #6
    1f46:	b291      	uxth	r1, r2
    1f48:	0020      	movs	r0, r4
    1f4a:	4b05      	ldr	r3, [pc, #20]	; (1f60 <wifi_uart_write_frame+0x38>)
    1f4c:	4798      	blx	r3
    wifi_uart_tx_buf[len - 1] = check_sum;
    1f4e:	1e6b      	subs	r3, r5, #1
    1f50:	54e0      	strb	r0, [r4, r3]
    wifi_uart_write_data((unsigned char *)wifi_uart_tx_buf, len);
    1f52:	0029      	movs	r1, r5
    1f54:	0020      	movs	r0, r4
    1f56:	4b03      	ldr	r3, [pc, #12]	; (1f64 <wifi_uart_write_frame+0x3c>)
    1f58:	4798      	blx	r3
}
    1f5a:	bd70      	pop	{r4, r5, r6, pc}
    1f5c:	2000028c 	.word	0x2000028c
    1f60:	00001f0d 	.word	0x00001f0d
    1f64:	00001e4d 	.word	0x00001e4d

00001f68 <heat_beat_check>:
{
    1f68:	b510      	push	{r4, lr}
    if(T_FALSE == mcu_reset_state) {
    1f6a:	4b0c      	ldr	r3, [pc, #48]	; (1f9c <heat_beat_check+0x34>)
    1f6c:	781b      	ldrb	r3, [r3, #0]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d00a      	beq.n	1f88 <heat_beat_check+0x20>
        length = set_wifi_uart_byte(length, T_TRUE);
    1f72:	2101      	movs	r1, #1
    1f74:	2000      	movs	r0, #0
    1f76:	4b0a      	ldr	r3, [pc, #40]	; (1fa0 <heat_beat_check+0x38>)
    1f78:	4798      	blx	r3
    1f7a:	b2c2      	uxtb	r2, r0
    wifi_uart_write_frame(HEAT_BEAT_CMD, MCU_TX_VER, length);
    1f7c:	b292      	uxth	r2, r2
    1f7e:	2103      	movs	r1, #3
    1f80:	2000      	movs	r0, #0
    1f82:	4b08      	ldr	r3, [pc, #32]	; (1fa4 <heat_beat_check+0x3c>)
    1f84:	4798      	blx	r3
}
    1f86:	bd10      	pop	{r4, pc}
        length = set_wifi_uart_byte(length, T_FALSE);
    1f88:	2100      	movs	r1, #0
    1f8a:	2000      	movs	r0, #0
    1f8c:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <heat_beat_check+0x38>)
    1f8e:	4798      	blx	r3
    1f90:	b2c2      	uxtb	r2, r0
        mcu_reset_state = T_TRUE;
    1f92:	2101      	movs	r1, #1
    1f94:	4b01      	ldr	r3, [pc, #4]	; (1f9c <heat_beat_check+0x34>)
    1f96:	7019      	strb	r1, [r3, #0]
    1f98:	e7f0      	b.n	1f7c <heat_beat_check+0x14>
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	20000132 	.word	0x20000132
    1fa0:	00001edd 	.word	0x00001edd
    1fa4:	00001f29 	.word	0x00001f29

00001fa8 <product_info_update>:
{
    1fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1faa:	46c6      	mov	lr, r8
    1fac:	b500      	push	{lr}
    length = set_wifi_uart_buffer(length, "{\"p\":\"", my_strlen("{\"p\":\""));
    1fae:	4c24      	ldr	r4, [pc, #144]	; (2040 <STACK_SIZE+0x40>)
    1fb0:	0020      	movs	r0, r4
    1fb2:	4e24      	ldr	r6, [pc, #144]	; (2044 <STACK_SIZE+0x44>)
    1fb4:	47b0      	blx	r6
    1fb6:	b282      	uxth	r2, r0
    1fb8:	0021      	movs	r1, r4
    1fba:	2000      	movs	r0, #0
    1fbc:	4d22      	ldr	r5, [pc, #136]	; (2048 <STACK_SIZE+0x48>)
    1fbe:	47a8      	blx	r5
    1fc0:	4680      	mov	r8, r0
    length = set_wifi_uart_buffer(length,(unsigned char *)PRODUCT_KEY,my_strlen((unsigned char *)PRODUCT_KEY));
    1fc2:	4f22      	ldr	r7, [pc, #136]	; (204c <STACK_SIZE+0x4c>)
    1fc4:	0038      	movs	r0, r7
    1fc6:	47b0      	blx	r6
    1fc8:	b282      	uxth	r2, r0
    1fca:	24ff      	movs	r4, #255	; 0xff
    1fcc:	4640      	mov	r0, r8
    1fce:	4020      	ands	r0, r4
    1fd0:	0039      	movs	r1, r7
    1fd2:	47a8      	blx	r5
    1fd4:	4680      	mov	r8, r0
    length = set_wifi_uart_buffer(length, "\",\"v\":\"", my_strlen("\",\"v\":\""));
    1fd6:	4f1e      	ldr	r7, [pc, #120]	; (2050 <STACK_SIZE+0x50>)
    1fd8:	0038      	movs	r0, r7
    1fda:	47b0      	blx	r6
    1fdc:	b282      	uxth	r2, r0
    1fde:	4640      	mov	r0, r8
    1fe0:	4020      	ands	r0, r4
    1fe2:	0039      	movs	r1, r7
    1fe4:	47a8      	blx	r5
    1fe6:	4680      	mov	r8, r0
    length = set_wifi_uart_buffer(length,(unsigned char *)MCU_VER,my_strlen((unsigned char *)MCU_VER));
    1fe8:	4f1a      	ldr	r7, [pc, #104]	; (2054 <STACK_SIZE+0x54>)
    1fea:	0038      	movs	r0, r7
    1fec:	47b0      	blx	r6
    1fee:	b282      	uxth	r2, r0
    1ff0:	4640      	mov	r0, r8
    1ff2:	4020      	ands	r0, r4
    1ff4:	0039      	movs	r1, r7
    1ff6:	47a8      	blx	r5
    1ff8:	4680      	mov	r8, r0
    length = set_wifi_uart_buffer(length, "\",\"m\":", my_strlen("\",\"m\":"));
    1ffa:	4f17      	ldr	r7, [pc, #92]	; (2058 <STACK_SIZE+0x58>)
    1ffc:	0038      	movs	r0, r7
    1ffe:	47b0      	blx	r6
    2000:	b282      	uxth	r2, r0
    2002:	4640      	mov	r0, r8
    2004:	4020      	ands	r0, r4
    2006:	0039      	movs	r1, r7
    2008:	47a8      	blx	r5
    200a:	4680      	mov	r8, r0
    length = set_wifi_uart_buffer(length, (unsigned char *)CONFIG_MODE, my_strlen((unsigned char *)CONFIG_MODE));
    200c:	4f13      	ldr	r7, [pc, #76]	; (205c <STACK_SIZE+0x5c>)
    200e:	0038      	movs	r0, r7
    2010:	47b0      	blx	r6
    2012:	b282      	uxth	r2, r0
    2014:	4640      	mov	r0, r8
    2016:	4020      	ands	r0, r4
    2018:	0039      	movs	r1, r7
    201a:	47a8      	blx	r5
    201c:	4680      	mov	r8, r0
    length = set_wifi_uart_buffer(length, "}", my_strlen("}"));
    201e:	4f10      	ldr	r7, [pc, #64]	; (2060 <STACK_SIZE+0x60>)
    2020:	0038      	movs	r0, r7
    2022:	47b0      	blx	r6
    2024:	b282      	uxth	r2, r0
    2026:	4640      	mov	r0, r8
    2028:	4020      	ands	r0, r4
    202a:	0039      	movs	r1, r7
    202c:	47a8      	blx	r5
    wifi_uart_write_frame(PRODUCT_INFO_CMD, MCU_TX_VER, length);
    202e:	0022      	movs	r2, r4
    2030:	4002      	ands	r2, r0
    2032:	2103      	movs	r1, #3
    2034:	2001      	movs	r0, #1
    2036:	4b0b      	ldr	r3, [pc, #44]	; (2064 <STACK_SIZE+0x64>)
    2038:	4798      	blx	r3
}
    203a:	bc04      	pop	{r2}
    203c:	4690      	mov	r8, r2
    203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2040:	000041e4 	.word	0x000041e4
    2044:	00001649 	.word	0x00001649
    2048:	00001eed 	.word	0x00001eed
    204c:	000041ec 	.word	0x000041ec
    2050:	00004200 	.word	0x00004200
    2054:	00004208 	.word	0x00004208
    2058:	00004210 	.word	0x00004210
    205c:	00004218 	.word	0x00004218
    2060:	0000421c 	.word	0x0000421c
    2064:	00001f29 	.word	0x00001f29

00002068 <get_mcu_wifi_mode>:
{
    2068:	b510      	push	{r4, lr}
    wifi_uart_write_frame(WORK_MODE_CMD, MCU_TX_VER, length);
    206a:	2200      	movs	r2, #0
    206c:	2103      	movs	r1, #3
    206e:	2002      	movs	r0, #2
    2070:	4b01      	ldr	r3, [pc, #4]	; (2078 <get_mcu_wifi_mode+0x10>)
    2072:	4798      	blx	r3
}
    2074:	bd10      	pop	{r4, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	00001f29 	.word	0x00001f29

0000207c <weather_data_raw_handle>:
 * @param[in] {p_data} Receive data pointer
 * @param[in] {data_len} Receive data length
 * @return Null
 */
static void weather_data_raw_handle(const unsigned char p_data[], unsigned short data_len)
{
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	46de      	mov	lr, fp
    2080:	4657      	mov	r7, sl
    2082:	464e      	mov	r6, r9
    2084:	4645      	mov	r5, r8
    2086:	b5e0      	push	{r5, r6, r7, lr}
    2088:	b0a1      	sub	sp, #132	; 0x84
    208a:	0006      	movs	r6, r0
    208c:	4689      	mov	r9, r1
    int i = 1;
    int can_len = 0; 
    char can[15] = {0};
    208e:	220f      	movs	r2, #15
    2090:	2100      	movs	r1, #0
    2092:	a81c      	add	r0, sp, #112	; 0x70
    2094:	4c30      	ldr	r4, [pc, #192]	; (2158 <weather_data_raw_handle+0xdc>)
    2096:	47a0      	blx	r4
    char day = 0;
    int type1 = 0;
    unsigned char value_string[100] = {0};
    2098:	2264      	movs	r2, #100	; 0x64
    209a:	2100      	movs	r1, #0
    209c:	a803      	add	r0, sp, #12
    209e:	47a0      	blx	r4
    int val_cnt = 0;
    int val_len = 0;
    
    if(p_data[0] != 1 || data_len < 1) {
    20a0:	7833      	ldrb	r3, [r6, #0]
    20a2:	2b01      	cmp	r3, #1
    20a4:	d006      	beq.n	20b4 <weather_data_raw_handle+0x38>
            i += 1 + can_len + 1 + 1 + val_len;
        }
        
        wifi_uart_write_frame(WEATHER_DATA_CMD, 0, 0);
    }
}
    20a6:	b021      	add	sp, #132	; 0x84
    20a8:	bc3c      	pop	{r2, r3, r4, r5}
    20aa:	4690      	mov	r8, r2
    20ac:	4699      	mov	r9, r3
    20ae:	46a2      	mov	sl, r4
    20b0:	46ab      	mov	fp, r5
    20b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(p_data[0] != 1 || data_len < 1) {
    20b4:	464b      	mov	r3, r9
    20b6:	2b00      	cmp	r3, #0
    20b8:	d0f5      	beq.n	20a6 <weather_data_raw_handle+0x2a>
    20ba:	2701      	movs	r7, #1
    20bc:	e00e      	b.n	20dc <weather_data_raw_handle+0x60>
                weather_data_user_handle(can+2, type1, p_data+val_cnt+1, day);
    20be:	3201      	adds	r2, #1
    20c0:	18b2      	adds	r2, r6, r2
    20c2:	4643      	mov	r3, r8
    20c4:	4651      	mov	r1, sl
    20c6:	206a      	movs	r0, #106	; 0x6a
    20c8:	ac02      	add	r4, sp, #8
    20ca:	46a4      	mov	ip, r4
    20cc:	4460      	add	r0, ip
    20ce:	4c23      	ldr	r4, [pc, #140]	; (215c <weather_data_raw_handle+0xe0>)
    20d0:	47a0      	blx	r4
            i += 1 + can_len + 1 + 1 + val_len;
    20d2:	3503      	adds	r5, #3
    20d4:	9b01      	ldr	r3, [sp, #4]
    20d6:	469c      	mov	ip, r3
    20d8:	4465      	add	r5, ip
    20da:	197f      	adds	r7, r7, r5
        while (i < data_len) {
    20dc:	454f      	cmp	r7, r9
    20de:	da35      	bge.n	214c <weather_data_raw_handle+0xd0>
            can_len = p_data[i];
    20e0:	5df5      	ldrb	r5, [r6, r7]
            my_memset(can, '\0', 15);
    20e2:	220f      	movs	r2, #15
    20e4:	2100      	movs	r1, #0
    20e6:	a81c      	add	r0, sp, #112	; 0x70
    20e8:	4b1d      	ldr	r3, [pc, #116]	; (2160 <weather_data_raw_handle+0xe4>)
    20ea:	4798      	blx	r3
            my_memcpy(can, p_data + i + 1, can_len - 2);
    20ec:	1c7c      	adds	r4, r7, #1
    20ee:	1931      	adds	r1, r6, r4
    20f0:	1eaa      	subs	r2, r5, #2
    20f2:	b292      	uxth	r2, r2
    20f4:	a81c      	add	r0, sp, #112	; 0x70
    20f6:	4b1b      	ldr	r3, [pc, #108]	; (2164 <weather_data_raw_handle+0xe8>)
    20f8:	4798      	blx	r3
            day = p_data[i + can_len] - '0';
    20fa:	197b      	adds	r3, r7, r5
    20fc:	5cf3      	ldrb	r3, [r6, r3]
    20fe:	3b30      	subs	r3, #48	; 0x30
    2100:	b2db      	uxtb	r3, r3
    2102:	4698      	mov	r8, r3
            type1 = p_data[i + 1 + can_len];
    2104:	192c      	adds	r4, r5, r4
    2106:	5d33      	ldrb	r3, [r6, r4]
    2108:	469a      	mov	sl, r3
            if(type1 != 0 && type1 != 1) {
    210a:	2b01      	cmp	r3, #1
    210c:	d8cb      	bhi.n	20a6 <weather_data_raw_handle+0x2a>
            my_memset(value_string, '\0', 100);
    210e:	2264      	movs	r2, #100	; 0x64
    2110:	2100      	movs	r1, #0
    2112:	a803      	add	r0, sp, #12
    2114:	4b12      	ldr	r3, [pc, #72]	; (2160 <weather_data_raw_handle+0xe4>)
    2116:	4798      	blx	r3
            val_cnt = i + 1 + can_len + 1;
    2118:	1c62      	adds	r2, r4, #1
            val_len = p_data[val_cnt];
    211a:	5cb3      	ldrb	r3, [r6, r2]
    211c:	9301      	str	r3, [sp, #4]
            if (type1 == 0) { //int32
    211e:	4653      	mov	r3, sl
    2120:	2b00      	cmp	r3, #0
    2122:	d0cc      	beq.n	20be <weather_data_raw_handle+0x42>
            else if(type1 == 1) { //string
    2124:	4653      	mov	r3, sl
    2126:	2b01      	cmp	r3, #1
    2128:	d1d3      	bne.n	20d2 <weather_data_raw_handle+0x56>
                my_memcpy(value_string, p_data + val_cnt + 1, val_len);
    212a:	3201      	adds	r2, #1
    212c:	18b1      	adds	r1, r6, r2
    212e:	466b      	mov	r3, sp
    2130:	889a      	ldrh	r2, [r3, #4]
    2132:	a803      	add	r0, sp, #12
    2134:	4b0b      	ldr	r3, [pc, #44]	; (2164 <weather_data_raw_handle+0xe8>)
    2136:	4798      	blx	r3
                weather_data_user_handle(can+2, type1, value_string, day);
    2138:	4643      	mov	r3, r8
    213a:	aa03      	add	r2, sp, #12
    213c:	4651      	mov	r1, sl
    213e:	206a      	movs	r0, #106	; 0x6a
    2140:	ac02      	add	r4, sp, #8
    2142:	46a4      	mov	ip, r4
    2144:	4460      	add	r0, ip
    2146:	4c05      	ldr	r4, [pc, #20]	; (215c <weather_data_raw_handle+0xe0>)
    2148:	47a0      	blx	r4
    214a:	e7c2      	b.n	20d2 <weather_data_raw_handle+0x56>
        wifi_uart_write_frame(WEATHER_DATA_CMD, 0, 0);
    214c:	2200      	movs	r2, #0
    214e:	2100      	movs	r1, #0
    2150:	2021      	movs	r0, #33	; 0x21
    2152:	4b05      	ldr	r3, [pc, #20]	; (2168 <weather_data_raw_handle+0xec>)
    2154:	4798      	blx	r3
    2156:	e7a6      	b.n	20a6 <weather_data_raw_handle+0x2a>
    2158:	000029c9 	.word	0x000029c9
    215c:	00001d79 	.word	0x00001d79
    2160:	00001663 	.word	0x00001663
    2164:	0000167d 	.word	0x0000167d
    2168:	00001f29 	.word	0x00001f29

0000216c <data_handle>:
 * @brief  Data frame processing
 * @param[in] {offset} Data start position
 * @return Null
 */
void data_handle(unsigned short offset)
{
    216c:	b5f0      	push	{r4, r5, r6, r7, lr}
    216e:	b083      	sub	sp, #12
    2170:	0006      	movs	r6, r0
    unsigned short dp_len;
#endif
  
    unsigned char ret;
    unsigned short i,total_len;
    unsigned char cmd_type = wifi_data_process_buf[offset + FRAME_TYPE];
    2172:	9001      	str	r0, [sp, #4]
    2174:	1cc3      	adds	r3, r0, #3
    2176:	4a41      	ldr	r2, [pc, #260]	; (227c <data_handle+0x110>)
    2178:	5cd3      	ldrb	r3, [r2, r3]
    217a:	b2db      	uxtb	r3, r3
    static unsigned short file_package_size = 0;                                //File packet size
    static unsigned char file_download_flag = 0;                                //File download flag
    unsigned int file_download_size = 0;
#endif

    switch(cmd_type)
    217c:	2b2d      	cmp	r3, #45	; 0x2d
    217e:	d805      	bhi.n	218c <data_handle+0x20>
    2180:	009b      	lsls	r3, r3, #2
    2182:	4a3f      	ldr	r2, [pc, #252]	; (2280 <data_handle+0x114>)
    2184:	58d3      	ldr	r3, [r2, r3]
    2186:	469f      	mov	pc, r3
    {
        case HEAT_BEAT_CMD:                                     //Heartbeat package
            heat_beat_check();
    2188:	4b3e      	ldr	r3, [pc, #248]	; (2284 <data_handle+0x118>)
    218a:	4798      	blx	r3
#endif
        

        default:break;
    }
}
    218c:	b003      	add	sp, #12
    218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            product_info_update();
    2190:	4b3d      	ldr	r3, [pc, #244]	; (2288 <data_handle+0x11c>)
    2192:	4798      	blx	r3
        break;
    2194:	e7fa      	b.n	218c <data_handle+0x20>
            get_mcu_wifi_mode();
    2196:	4b3d      	ldr	r3, [pc, #244]	; (228c <data_handle+0x120>)
    2198:	4798      	blx	r3
        break;
    219a:	e7f7      	b.n	218c <data_handle+0x20>
            wifi_work_state = wifi_data_process_buf[offset + DATA_START];
    219c:	3606      	adds	r6, #6
    219e:	4b37      	ldr	r3, [pc, #220]	; (227c <data_handle+0x110>)
    21a0:	5d9b      	ldrb	r3, [r3, r6]
    21a2:	b2db      	uxtb	r3, r3
    21a4:	4c3a      	ldr	r4, [pc, #232]	; (2290 <data_handle+0x124>)
    21a6:	7023      	strb	r3, [r4, #0]
            wifi_uart_write_frame(WIFI_STATE_CMD, MCU_TX_VER, 0);
    21a8:	2200      	movs	r2, #0
    21aa:	2103      	movs	r1, #3
    21ac:	2003      	movs	r0, #3
    21ae:	4b39      	ldr	r3, [pc, #228]	; (2294 <data_handle+0x128>)
    21b0:	4798      	blx	r3
            if(wifi_work_state == WIFI_CONNECTED && isWoSend == 0) { //When the WIFI connection is successful, open the weather data only once
    21b2:	7823      	ldrb	r3, [r4, #0]
    21b4:	2b03      	cmp	r3, #3
    21b6:	d1e9      	bne.n	218c <data_handle+0x20>
    21b8:	4b37      	ldr	r3, [pc, #220]	; (2298 <data_handle+0x12c>)
    21ba:	785b      	ldrb	r3, [r3, #1]
    21bc:	2b00      	cmp	r3, #0
    21be:	d1e5      	bne.n	218c <data_handle+0x20>
                mcu_open_weather();
    21c0:	4b36      	ldr	r3, [pc, #216]	; (229c <data_handle+0x130>)
    21c2:	4798      	blx	r3
                isWoSend = 1;
    21c4:	2201      	movs	r2, #1
    21c6:	4b34      	ldr	r3, [pc, #208]	; (2298 <data_handle+0x12c>)
    21c8:	705a      	strb	r2, [r3, #1]
    21ca:	e7df      	b.n	218c <data_handle+0x20>
            reset_wifi_flag = RESET_WIFI_SUCCESS;
    21cc:	2201      	movs	r2, #1
    21ce:	4b34      	ldr	r3, [pc, #208]	; (22a0 <data_handle+0x134>)
    21d0:	701a      	strb	r2, [r3, #0]
        break;
    21d2:	e7db      	b.n	218c <data_handle+0x20>
            set_wifimode_flag = SET_WIFICONFIG_SUCCESS;
    21d4:	2201      	movs	r2, #1
    21d6:	4b33      	ldr	r3, [pc, #204]	; (22a4 <data_handle+0x138>)
    21d8:	701a      	strb	r2, [r3, #0]
        break;
    21da:	e7d7      	b.n	218c <data_handle+0x20>
            total_len = (wifi_data_process_buf[offset + LENGTH_HIGH] << 8) | wifi_data_process_buf[offset + LENGTH_LOW];
    21dc:	1d03      	adds	r3, r0, #4
    21de:	4a27      	ldr	r2, [pc, #156]	; (227c <data_handle+0x110>)
    21e0:	5cd7      	ldrb	r7, [r2, r3]
    21e2:	023f      	lsls	r7, r7, #8
    21e4:	1d43      	adds	r3, r0, #5
    21e6:	5cd3      	ldrb	r3, [r2, r3]
    21e8:	431f      	orrs	r7, r3
            for(i = 0;i < total_len; ) {
    21ea:	2500      	movs	r5, #0
    21ec:	e013      	b.n	2216 <data_handle+0xaa>
                dp_len = wifi_data_process_buf[offset + DATA_START + i + 2] * 0x100;
    21ee:	9b01      	ldr	r3, [sp, #4]
    21f0:	3306      	adds	r3, #6
    21f2:	18eb      	adds	r3, r5, r3
    21f4:	1c99      	adds	r1, r3, #2
    21f6:	4a21      	ldr	r2, [pc, #132]	; (227c <data_handle+0x110>)
    21f8:	5c54      	ldrb	r4, [r2, r1]
    21fa:	0224      	lsls	r4, r4, #8
                dp_len += wifi_data_process_buf[offset + DATA_START + i + 3];
    21fc:	3303      	adds	r3, #3
    21fe:	5cd3      	ldrb	r3, [r2, r3]
    2200:	18e4      	adds	r4, r4, r3
    2202:	b2a4      	uxth	r4, r4
                ret = data_point_handle((unsigned char *)wifi_data_process_buf + offset + DATA_START + i);
    2204:	1970      	adds	r0, r6, r5
    2206:	3006      	adds	r0, #6
    2208:	1880      	adds	r0, r0, r2
    220a:	4b27      	ldr	r3, [pc, #156]	; (22a8 <data_handle+0x13c>)
    220c:	4798      	blx	r3
                i += (dp_len + 4);
    220e:	192c      	adds	r4, r5, r4
    2210:	b2a4      	uxth	r4, r4
    2212:	3404      	adds	r4, #4
    2214:	b2a5      	uxth	r5, r4
            for(i = 0;i < total_len; ) {
    2216:	42bd      	cmp	r5, r7
    2218:	d3e9      	bcc.n	21ee <data_handle+0x82>
    221a:	e7b7      	b.n	218c <data_handle+0x20>
            all_data_update();                               
    221c:	4b23      	ldr	r3, [pc, #140]	; (22ac <data_handle+0x140>)
    221e:	4798      	blx	r3
        break;
    2220:	e7b4      	b.n	218c <data_handle+0x20>
            result = wifi_data_process_buf[offset + DATA_START];
    2222:	1d82      	adds	r2, r0, #6
    2224:	4b15      	ldr	r3, [pc, #84]	; (227c <data_handle+0x110>)
    2226:	5c98      	ldrb	r0, [r3, r2]
    2228:	b2c0      	uxtb	r0, r0
            rssi = wifi_data_process_buf[offset + DATA_START + 1];
    222a:	3607      	adds	r6, #7
    222c:	5d99      	ldrb	r1, [r3, r6]
    222e:	b2c9      	uxtb	r1, r1
            wifi_test_result(result, rssi);
    2230:	4b1f      	ldr	r3, [pc, #124]	; (22b0 <data_handle+0x144>)
    2232:	4798      	blx	r3
        break;
    2234:	e7aa      	b.n	218c <data_handle+0x20>
            weather_open_return_handle(wifi_data_process_buf[offset + DATA_START], wifi_data_process_buf[offset + DATA_START + 1]);
    2236:	1d82      	adds	r2, r0, #6
    2238:	4b10      	ldr	r3, [pc, #64]	; (227c <data_handle+0x110>)
    223a:	5c98      	ldrb	r0, [r3, r2]
    223c:	b2c0      	uxtb	r0, r0
    223e:	3607      	adds	r6, #7
    2240:	5d99      	ldrb	r1, [r3, r6]
    2242:	b2c9      	uxtb	r1, r1
    2244:	4b1b      	ldr	r3, [pc, #108]	; (22b4 <data_handle+0x148>)
    2246:	4798      	blx	r3
        break;
    2248:	e7a0      	b.n	218c <data_handle+0x20>
            total_len = (wifi_data_process_buf[offset + LENGTH_HIGH] << 8) | wifi_data_process_buf[offset + LENGTH_LOW];
    224a:	1d03      	adds	r3, r0, #4
    224c:	480b      	ldr	r0, [pc, #44]	; (227c <data_handle+0x110>)
    224e:	5cc3      	ldrb	r3, [r0, r3]
    2250:	021b      	lsls	r3, r3, #8
    2252:	1d72      	adds	r2, r6, #5
    2254:	5c81      	ldrb	r1, [r0, r2]
    2256:	4319      	orrs	r1, r3
            weather_data_raw_handle((unsigned char *)wifi_data_process_buf + offset + DATA_START, total_len);
    2258:	3606      	adds	r6, #6
    225a:	1830      	adds	r0, r6, r0
    225c:	4b16      	ldr	r3, [pc, #88]	; (22b8 <data_handle+0x14c>)
    225e:	4798      	blx	r3
        break;
    2260:	e794      	b.n	218c <data_handle+0x20>
            mcu_get_mac((unsigned char *)(wifi_data_process_buf + offset + DATA_START));
    2262:	3606      	adds	r6, #6
    2264:	4805      	ldr	r0, [pc, #20]	; (227c <data_handle+0x110>)
    2266:	1830      	adds	r0, r6, r0
    2268:	4b14      	ldr	r3, [pc, #80]	; (22bc <data_handle+0x150>)
    226a:	4798      	blx	r3
        break;
    226c:	e78e      	b.n	218c <data_handle+0x20>
            result = wifi_data_process_buf[offset + DATA_START];
    226e:	3606      	adds	r6, #6
    2270:	4b02      	ldr	r3, [pc, #8]	; (227c <data_handle+0x110>)
    2272:	5d98      	ldrb	r0, [r3, r6]
    2274:	b2c0      	uxtb	r0, r0
            get_wifi_status(result);
    2276:	4b12      	ldr	r3, [pc, #72]	; (22c0 <data_handle+0x154>)
    2278:	4798      	blx	r3
}
    227a:	e787      	b.n	218c <data_handle+0x20>
    227c:	2000024c 	.word	0x2000024c
    2280:	0000412c 	.word	0x0000412c
    2284:	00001f69 	.word	0x00001f69
    2288:	00001fa9 	.word	0x00001fa9
    228c:	00002069 	.word	0x00002069
    2290:	200002c3 	.word	0x200002c3
    2294:	00001f29 	.word	0x00001f29
    2298:	20000132 	.word	0x20000132
    229c:	00001cf1 	.word	0x00001cf1
    22a0:	200002c4 	.word	0x200002c4
    22a4:	2000026b 	.word	0x2000026b
    22a8:	00001e9d 	.word	0x00001e9d
    22ac:	00001b81 	.word	0x00001b81
    22b0:	00001ced 	.word	0x00001ced
    22b4:	00001d75 	.word	0x00001d75
    22b8:	0000207d 	.word	0x0000207d
    22bc:	00001e4b 	.word	0x00001e4b
    22c0:	00001e49 	.word	0x00001e49

000022c4 <with_data_rxbuff>:
 * @param  Null
 * @return Is there data
 */
unsigned char with_data_rxbuff(void)
{
    if(rx_buf_in != rx_buf_out)
    22c4:	4b04      	ldr	r3, [pc, #16]	; (22d8 <with_data_rxbuff+0x14>)
    22c6:	681a      	ldr	r2, [r3, #0]
    22c8:	4b04      	ldr	r3, [pc, #16]	; (22dc <with_data_rxbuff+0x18>)
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	429a      	cmp	r2, r3
    22ce:	d001      	beq.n	22d4 <with_data_rxbuff+0x10>
        return 1;
    22d0:	2001      	movs	r0, #1
    else
        return 0;
}
    22d2:	4770      	bx	lr
        return 0;
    22d4:	2000      	movs	r0, #0
    22d6:	e7fc      	b.n	22d2 <with_data_rxbuff+0xe>
    22d8:	2000026c 	.word	0x2000026c
    22dc:	20000288 	.word	0x20000288

000022e0 <take_byte_rxbuff>:
 */
unsigned char take_byte_rxbuff(void)
{
    unsigned char value;
    
    if(rx_buf_out != rx_buf_in) {
    22e0:	4b0a      	ldr	r3, [pc, #40]	; (230c <take_byte_rxbuff+0x2c>)
    22e2:	681b      	ldr	r3, [r3, #0]
    22e4:	4a0a      	ldr	r2, [pc, #40]	; (2310 <take_byte_rxbuff+0x30>)
    22e6:	6812      	ldr	r2, [r2, #0]
    22e8:	4293      	cmp	r3, r2
    22ea:	d00c      	beq.n	2306 <take_byte_rxbuff+0x26>
        //With data
        if(rx_buf_out >= (unsigned char *)(wifi_uart_rx_buf + sizeof(wifi_uart_rx_buf))) {
    22ec:	4a09      	ldr	r2, [pc, #36]	; (2314 <take_byte_rxbuff+0x34>)
    22ee:	4293      	cmp	r3, r2
    22f0:	d302      	bcc.n	22f8 <take_byte_rxbuff+0x18>
            //The data has reached the end
            rx_buf_out = (unsigned char *)(wifi_uart_rx_buf);
    22f2:	4a09      	ldr	r2, [pc, #36]	; (2318 <take_byte_rxbuff+0x38>)
    22f4:	4b05      	ldr	r3, [pc, #20]	; (230c <take_byte_rxbuff+0x2c>)
    22f6:	601a      	str	r2, [r3, #0]
        }
        
        value = *rx_buf_out ++;   
    22f8:	4a04      	ldr	r2, [pc, #16]	; (230c <take_byte_rxbuff+0x2c>)
    22fa:	6813      	ldr	r3, [r2, #0]
    22fc:	1c59      	adds	r1, r3, #1
    22fe:	6011      	str	r1, [r2, #0]
    2300:	7818      	ldrb	r0, [r3, #0]
    2302:	b2c0      	uxtb	r0, r0
    }
    
    return value;
}
    2304:	4770      	bx	lr
    2306:	2000      	movs	r0, #0
    2308:	e7fc      	b.n	2304 <take_byte_rxbuff+0x24>
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	20000288 	.word	0x20000288
    2310:	2000026c 	.word	0x2000026c
    2314:	20000287 	.word	0x20000287
    2318:	20000270 	.word	0x20000270

0000231c <serial_rx_callback>:
	//	Write message
	io_write(&SERIAL.io, (uint8_t *)message,length);
}

void serial_rx_callback(const struct usart_async_descriptor *const io_descr)
{
    231c:	b510      	push	{r4, lr}
    231e:	b082      	sub	sp, #8
	//	Counters
	uint8_t ch,count;

	//	Read a Character
	count = io_read(&SERIAL.io,&ch,1);
    2320:	466b      	mov	r3, sp
    2322:	1ddc      	adds	r4, r3, #7
    2324:	2201      	movs	r2, #1
    2326:	0021      	movs	r1, r4
    2328:	4803      	ldr	r0, [pc, #12]	; (2338 <serial_rx_callback+0x1c>)
    232a:	4b04      	ldr	r3, [pc, #16]	; (233c <serial_rx_callback+0x20>)
    232c:	4798      	blx	r3
	uart_receive_input((unsigned char)ch);
    232e:	7820      	ldrb	r0, [r4, #0]
    2330:	4b03      	ldr	r3, [pc, #12]	; (2340 <serial_rx_callback+0x24>)
    2332:	4798      	blx	r3
	
}
    2334:	b002      	add	sp, #8
    2336:	bd10      	pop	{r4, pc}
    2338:	20000154 	.word	0x20000154
    233c:	000004dd 	.word	0x000004dd
    2340:	00001849 	.word	0x00001849

00002344 <uart_init>:
void uart_init()
{
    2344:	b510      	push	{r4, lr}
    2346:	b082      	sub	sp, #8
	struct io_descriptor *io;
	//	Setup RX callback
	usart_async_register_callback(&SERIAL, USART_ASYNC_RXC_CB, serial_rx_callback);
    2348:	4c07      	ldr	r4, [pc, #28]	; (2368 <uart_init+0x24>)
    234a:	4a08      	ldr	r2, [pc, #32]	; (236c <uart_init+0x28>)
    234c:	2100      	movs	r1, #0
    234e:	0020      	movs	r0, r4
    2350:	4b07      	ldr	r3, [pc, #28]	; (2370 <uart_init+0x2c>)
    2352:	4798      	blx	r3
	// 	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb);
	//	Setup USART
	usart_async_get_io_descriptor(&SERIAL, &io);
    2354:	a901      	add	r1, sp, #4
    2356:	0020      	movs	r0, r4
    2358:	4b06      	ldr	r3, [pc, #24]	; (2374 <uart_init+0x30>)
    235a:	4798      	blx	r3
	usart_async_enable(&SERIAL);
    235c:	0020      	movs	r0, r4
    235e:	4b06      	ldr	r3, [pc, #24]	; (2378 <uart_init+0x34>)
    2360:	4798      	blx	r3
}
    2362:	b002      	add	sp, #8
    2364:	bd10      	pop	{r4, pc}
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	20000154 	.word	0x20000154
    236c:	0000231d 	.word	0x0000231d
    2370:	00000a0d 	.word	0x00000a0d
    2374:	000009dd 	.word	0x000009dd
    2378:	000009b1 	.word	0x000009b1

0000237c <Uart_PutChar>:
void Uart_PutChar(unsigned char value){
    237c:	b500      	push	{lr}
    237e:	b083      	sub	sp, #12
		char val[] = { value };
    2380:	a901      	add	r1, sp, #4
    2382:	7008      	strb	r0, [r1, #0]
		io_write(&SERIAL.io, (uint8_t *)val,1);
    2384:	2201      	movs	r2, #1
    2386:	4802      	ldr	r0, [pc, #8]	; (2390 <Uart_PutChar+0x14>)
    2388:	4b02      	ldr	r3, [pc, #8]	; (2394 <Uart_PutChar+0x18>)
    238a:	4798      	blx	r3
    238c:	b003      	add	sp, #12
    238e:	bd00      	pop	{pc}
    2390:	20000154 	.word	0x20000154
    2394:	000004a5 	.word	0x000004a5

00002398 <qtm_update_qtlib_timer>:
    2398:	4a02      	ldr	r2, [pc, #8]	; (23a4 <qtm_update_qtlib_timer+0xc>)
    239a:	8813      	ldrh	r3, [r2, #0]
    239c:	18c0      	adds	r0, r0, r3
    239e:	8010      	strh	r0, [r2, #0]
    23a0:	4770      	bx	lr
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	20000134 	.word	0x20000134

000023a8 <qtm_init_sensor_key>:
    23a8:	b510      	push	{r4, lr}
    23aa:	230b      	movs	r3, #11
    23ac:	2800      	cmp	r0, #0
    23ae:	d00b      	beq.n	23c8 <qtm_init_sensor_key+0x20>
    23b0:	2a00      	cmp	r2, #0
    23b2:	d009      	beq.n	23c8 <qtm_init_sensor_key+0x20>
    23b4:	3301      	adds	r3, #1
    23b6:	000c      	movs	r4, r1
    23b8:	435c      	muls	r4, r3
    23ba:	6881      	ldr	r1, [r0, #8]
    23bc:	3b0b      	subs	r3, #11
    23be:	550b      	strb	r3, [r1, r4]
    23c0:	6883      	ldr	r3, [r0, #8]
    23c2:	1919      	adds	r1, r3, r4
    23c4:	2300      	movs	r3, #0
    23c6:	604a      	str	r2, [r1, #4]
    23c8:	0018      	movs	r0, r3
    23ca:	bc10      	pop	{r4}
    23cc:	bc02      	pop	{r1}
    23ce:	4708      	bx	r1

000023d0 <sync_config>:
    23d0:	217f      	movs	r1, #127	; 0x7f
    23d2:	4a04      	ldr	r2, [pc, #16]	; (23e4 <sync_config+0x14>)
    23d4:	7853      	ldrb	r3, [r2, #1]
    23d6:	438b      	bics	r3, r1
    23d8:	b2db      	uxtb	r3, r3
    23da:	2b00      	cmp	r3, #0
    23dc:	d001      	beq.n	23e2 <sync_config+0x12>
    23de:	7853      	ldrb	r3, [r2, #1]
    23e0:	e7f9      	b.n	23d6 <sync_config+0x6>
    23e2:	4770      	bx	lr
    23e4:	42004c00 	.word	0x42004c00

000023e8 <select_next_channel_to_measure>:
    23e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ea:	2406      	movs	r4, #6
    23ec:	2501      	movs	r5, #1
    23ee:	490c      	ldr	r1, [pc, #48]	; (2420 <select_next_channel_to_measure+0x38>)
    23f0:	4a0c      	ldr	r2, [pc, #48]	; (2424 <select_next_channel_to_measure+0x3c>)
    23f2:	6809      	ldr	r1, [r1, #0]
    23f4:	8813      	ldrh	r3, [r2, #0]
    23f6:	6808      	ldr	r0, [r1, #0]
    23f8:	8800      	ldrh	r0, [r0, #0]
    23fa:	4283      	cmp	r3, r0
    23fc:	d20b      	bcs.n	2416 <select_next_channel_to_measure+0x2e>
    23fe:	0026      	movs	r6, r4
    2400:	435e      	muls	r6, r3
    2402:	688f      	ldr	r7, [r1, #8]
    2404:	5df6      	ldrb	r6, [r6, r7]
    2406:	422e      	tst	r6, r5
    2408:	d102      	bne.n	2410 <select_next_channel_to_measure+0x28>
    240a:	3301      	adds	r3, #1
    240c:	b29b      	uxth	r3, r3
    240e:	e7f4      	b.n	23fa <select_next_channel_to_measure+0x12>
    2410:	8013      	strh	r3, [r2, #0]
    2412:	2000      	movs	r0, #0
    2414:	e002      	b.n	241c <select_next_channel_to_measure+0x34>
    2416:	2300      	movs	r3, #0
    2418:	2001      	movs	r0, #1
    241a:	8013      	strh	r3, [r2, #0]
    241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	200002cc 	.word	0x200002cc
    2424:	20000138 	.word	0x20000138

00002428 <qtm_measure_node>:
    2428:	b5f0      	push	{r4, r5, r6, r7, lr}
    242a:	4c66      	ldr	r4, [pc, #408]	; (25c4 <qtm_measure_node+0x19c>)
    242c:	b087      	sub	sp, #28
    242e:	0007      	movs	r7, r0
    2430:	47a0      	blx	r4
    2432:	2102      	movs	r1, #2
    2434:	4b64      	ldr	r3, [pc, #400]	; (25c8 <qtm_measure_node+0x1a0>)
    2436:	4d65      	ldr	r5, [pc, #404]	; (25cc <qtm_measure_node+0x1a4>)
    2438:	781a      	ldrb	r2, [r3, #0]
    243a:	0026      	movs	r6, r4
    243c:	438a      	bics	r2, r1
    243e:	701a      	strb	r2, [r3, #0]
    2440:	00fa      	lsls	r2, r7, #3
    2442:	9203      	str	r2, [sp, #12]
    2444:	682a      	ldr	r2, [r5, #0]
    2446:	00f9      	lsls	r1, r7, #3
    2448:	6852      	ldr	r2, [r2, #4]
    244a:	001c      	movs	r4, r3
    244c:	1852      	adds	r2, r2, r1
    244e:	7892      	ldrb	r2, [r2, #2]
    2450:	4b5f      	ldr	r3, [pc, #380]	; (25d0 <qtm_measure_node+0x1a8>)
    2452:	0751      	lsls	r1, r2, #29
    2454:	d401      	bmi.n	245a <qtm_measure_node+0x32>
    2456:	6919      	ldr	r1, [r3, #16]
    2458:	e01d      	b.n	2496 <qtm_measure_node+0x6e>
    245a:	0711      	lsls	r1, r2, #28
    245c:	d405      	bmi.n	246a <qtm_measure_node+0x42>
    245e:	2080      	movs	r0, #128	; 0x80
    2460:	6919      	ldr	r1, [r3, #16]
    2462:	4a5c      	ldr	r2, [pc, #368]	; (25d4 <qtm_measure_node+0x1ac>)
    2464:	0140      	lsls	r0, r0, #5
    2466:	4011      	ands	r1, r2
    2468:	e006      	b.n	2478 <qtm_measure_node+0x50>
    246a:	06d1      	lsls	r1, r2, #27
    246c:	d409      	bmi.n	2482 <qtm_measure_node+0x5a>
    246e:	2080      	movs	r0, #128	; 0x80
    2470:	6919      	ldr	r1, [r3, #16]
    2472:	4a58      	ldr	r2, [pc, #352]	; (25d4 <qtm_measure_node+0x1ac>)
    2474:	0180      	lsls	r0, r0, #6
    2476:	4011      	ands	r1, r2
    2478:	4301      	orrs	r1, r0
    247a:	6119      	str	r1, [r3, #16]
    247c:	6959      	ldr	r1, [r3, #20]
    247e:	400a      	ands	r2, r1
    2480:	e007      	b.n	2492 <qtm_measure_node+0x6a>
    2482:	6919      	ldr	r1, [r3, #16]
    2484:	0692      	lsls	r2, r2, #26
    2486:	d406      	bmi.n	2496 <qtm_measure_node+0x6e>
    2488:	20c0      	movs	r0, #192	; 0xc0
    248a:	0180      	lsls	r0, r0, #6
    248c:	4301      	orrs	r1, r0
    248e:	6119      	str	r1, [r3, #16]
    2490:	695a      	ldr	r2, [r3, #20]
    2492:	4302      	orrs	r2, r0
    2494:	e004      	b.n	24a0 <qtm_measure_node+0x78>
    2496:	4a4f      	ldr	r2, [pc, #316]	; (25d4 <qtm_measure_node+0x1ac>)
    2498:	4011      	ands	r1, r2
    249a:	6119      	str	r1, [r3, #16]
    249c:	6959      	ldr	r1, [r3, #20]
    249e:	400a      	ands	r2, r1
    24a0:	615a      	str	r2, [r3, #20]
    24a2:	47b0      	blx	r6
    24a4:	682b      	ldr	r3, [r5, #0]
    24a6:	00fa      	lsls	r2, r7, #3
    24a8:	685b      	ldr	r3, [r3, #4]
    24aa:	189b      	adds	r3, r3, r2
    24ac:	885b      	ldrh	r3, [r3, #2]
    24ae:	8223      	strh	r3, [r4, #16]
    24b0:	47b0      	blx	r6
    24b2:	682b      	ldr	r3, [r5, #0]
    24b4:	00fa      	lsls	r2, r7, #3
    24b6:	685b      	ldr	r3, [r3, #4]
    24b8:	5a9b      	ldrh	r3, [r3, r2]
    24ba:	8263      	strh	r3, [r4, #18]
    24bc:	47b0      	blx	r6
    24be:	2306      	movs	r3, #6
    24c0:	682a      	ldr	r2, [r5, #0]
    24c2:	435f      	muls	r7, r3
    24c4:	6893      	ldr	r3, [r2, #8]
    24c6:	19db      	adds	r3, r3, r7
    24c8:	889b      	ldrh	r3, [r3, #4]
    24ca:	8323      	strh	r3, [r4, #24]
    24cc:	6893      	ldr	r3, [r2, #8]
    24ce:	19db      	adds	r3, r3, r7
    24d0:	7819      	ldrb	r1, [r3, #0]
    24d2:	0789      	lsls	r1, r1, #30
    24d4:	d501      	bpl.n	24da <qtm_measure_node+0xb2>
    24d6:	2105      	movs	r1, #5
    24d8:	7019      	strb	r1, [r3, #0]
    24da:	6893      	ldr	r3, [r2, #8]
    24dc:	5ddf      	ldrb	r7, [r3, r7]
    24de:	47b0      	blx	r6
    24e0:	06ff      	lsls	r7, r7, #27
    24e2:	0f7f      	lsrs	r7, r7, #29
    24e4:	233f      	movs	r3, #63	; 0x3f
    24e6:	2f00      	cmp	r7, #0
    24e8:	d108      	bne.n	24fc <qtm_measure_node+0xd4>
    24ea:	682b      	ldr	r3, [r5, #0]
    24ec:	9a03      	ldr	r2, [sp, #12]
    24ee:	685b      	ldr	r3, [r3, #4]
    24f0:	189b      	adds	r3, r3, r2
    24f2:	795b      	ldrb	r3, [r3, #5]
    24f4:	4a38      	ldr	r2, [pc, #224]	; (25d8 <qtm_measure_node+0x1b0>)
    24f6:	091b      	lsrs	r3, r3, #4
    24f8:	18d3      	adds	r3, r2, r3
    24fa:	7a1b      	ldrb	r3, [r3, #8]
    24fc:	76a3      	strb	r3, [r4, #26]
    24fe:	47b0      	blx	r6
    2500:	682b      	ldr	r3, [r5, #0]
    2502:	9a03      	ldr	r2, [sp, #12]
    2504:	685b      	ldr	r3, [r3, #4]
    2506:	4f30      	ldr	r7, [pc, #192]	; (25c8 <qtm_measure_node+0x1a0>)
    2508:	189b      	adds	r3, r3, r2
    250a:	791b      	ldrb	r3, [r3, #4]
    250c:	091b      	lsrs	r3, r3, #4
    250e:	76e3      	strb	r3, [r4, #27]
    2510:	47b0      	blx	r6
    2512:	2103      	movs	r1, #3
    2514:	682b      	ldr	r3, [r5, #0]
    2516:	9a03      	ldr	r2, [sp, #12]
    2518:	685b      	ldr	r3, [r3, #4]
    251a:	189b      	adds	r3, r3, r2
    251c:	791a      	ldrb	r2, [r3, #4]
    251e:	7923      	ldrb	r3, [r4, #4]
    2520:	400a      	ands	r2, r1
    2522:	438b      	bics	r3, r1
    2524:	4313      	orrs	r3, r2
    2526:	7123      	strb	r3, [r4, #4]
    2528:	47b0      	blx	r6
    252a:	2107      	movs	r1, #7
    252c:	682b      	ldr	r3, [r5, #0]
    252e:	2502      	movs	r5, #2
    2530:	9a03      	ldr	r2, [sp, #12]
    2532:	685b      	ldr	r3, [r3, #4]
    2534:	189b      	adds	r3, r3, r2
    2536:	799a      	ldrb	r2, [r3, #6]
    2538:	7b63      	ldrb	r3, [r4, #13]
    253a:	400a      	ands	r2, r1
    253c:	438b      	bics	r3, r1
    253e:	4313      	orrs	r3, r2
    2540:	7363      	strb	r3, [r4, #13]
    2542:	47b0      	blx	r6
    2544:	7823      	ldrb	r3, [r4, #0]
    2546:	432b      	orrs	r3, r5
    2548:	7023      	strb	r3, [r4, #0]
    254a:	4b24      	ldr	r3, [pc, #144]	; (25dc <qtm_measure_node+0x1b4>)
    254c:	685b      	ldr	r3, [r3, #4]
    254e:	9303      	str	r3, [sp, #12]
    2550:	2b00      	cmp	r3, #0
    2552:	d02e      	beq.n	25b2 <qtm_measure_node+0x18a>
    2554:	2401      	movs	r4, #1
    2556:	47b0      	blx	r6
    2558:	7b3b      	ldrb	r3, [r7, #12]
    255a:	071b      	lsls	r3, r3, #28
    255c:	0f1b      	lsrs	r3, r3, #28
    255e:	9304      	str	r3, [sp, #16]
    2560:	47b0      	blx	r6
    2562:	793b      	ldrb	r3, [r7, #4]
    2564:	079b      	lsls	r3, r3, #30
    2566:	0f9b      	lsrs	r3, r3, #30
    2568:	9305      	str	r3, [sp, #20]
    256a:	47b0      	blx	r6
    256c:	783b      	ldrb	r3, [r7, #0]
    256e:	43ab      	bics	r3, r5
    2570:	703b      	strb	r3, [r7, #0]
    2572:	47b0      	blx	r6
    2574:	797b      	ldrb	r3, [r7, #5]
    2576:	431c      	orrs	r4, r3
    2578:	47b0      	blx	r6
    257a:	2108      	movs	r1, #8
    257c:	432c      	orrs	r4, r5
    257e:	4b18      	ldr	r3, [pc, #96]	; (25e0 <qtm_measure_node+0x1b8>)
    2580:	b2e4      	uxtb	r4, r4
    2582:	717c      	strb	r4, [r7, #5]
    2584:	681a      	ldr	r2, [r3, #0]
    2586:	7813      	ldrb	r3, [r2, #0]
    2588:	430b      	orrs	r3, r1
    258a:	7013      	strb	r3, [r2, #0]
    258c:	47b0      	blx	r6
    258e:	7b7c      	ldrb	r4, [r7, #13]
    2590:	47b0      	blx	r6
    2592:	2207      	movs	r2, #7
    2594:	7b7b      	ldrb	r3, [r7, #13]
    2596:	b2e4      	uxtb	r4, r4
    2598:	4393      	bics	r3, r2
    259a:	737b      	strb	r3, [r7, #13]
    259c:	9a05      	ldr	r2, [sp, #20]
    259e:	4b11      	ldr	r3, [pc, #68]	; (25e4 <qtm_measure_node+0x1bc>)
    25a0:	9400      	str	r4, [sp, #0]
    25a2:	9904      	ldr	r1, [sp, #16]
    25a4:	2000      	movs	r0, #0
    25a6:	9c03      	ldr	r4, [sp, #12]
    25a8:	47a0      	blx	r4
    25aa:	47b0      	blx	r6
    25ac:	783b      	ldrb	r3, [r7, #0]
    25ae:	431d      	orrs	r5, r3
    25b0:	703d      	strb	r5, [r7, #0]
    25b2:	47b0      	blx	r6
    25b4:	2280      	movs	r2, #128	; 0x80
    25b6:	7b7b      	ldrb	r3, [r7, #13]
    25b8:	4252      	negs	r2, r2
    25ba:	4313      	orrs	r3, r2
    25bc:	737b      	strb	r3, [r7, #13]
    25be:	b007      	add	sp, #28
    25c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	000023d1 	.word	0x000023d1
    25c8:	42004c00 	.word	0x42004c00
    25cc:	200002cc 	.word	0x200002cc
    25d0:	42004400 	.word	0x42004400
    25d4:	ffffcfff 	.word	0xffffcfff
    25d8:	00004220 	.word	0x00004220
    25dc:	20000138 	.word	0x20000138
    25e0:	200002c8 	.word	0x200002c8
    25e4:	42004c0d 	.word	0x42004c0d

000025e8 <qtm_ptc_init_acquisition_module>:
    25e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25ea:	2480      	movs	r4, #128	; 0x80
    25ec:	493f      	ldr	r1, [pc, #252]	; (26ec <qtm_ptc_init_acquisition_module+0x104>)
    25ee:	4b40      	ldr	r3, [pc, #256]	; (26f0 <qtm_ptc_init_acquisition_module+0x108>)
    25f0:	690a      	ldr	r2, [r1, #16]
    25f2:	00e4      	lsls	r4, r4, #3
    25f4:	401a      	ands	r2, r3
    25f6:	4322      	orrs	r2, r4
    25f8:	610a      	str	r2, [r1, #16]
    25fa:	694a      	ldr	r2, [r1, #20]
    25fc:	260b      	movs	r6, #11
    25fe:	4013      	ands	r3, r2
    2600:	4323      	orrs	r3, r4
    2602:	614b      	str	r3, [r1, #20]
    2604:	2800      	cmp	r0, #0
    2606:	d06e      	beq.n	26e6 <qtm_ptc_init_acquisition_module+0xfe>
    2608:	6803      	ldr	r3, [r0, #0]
    260a:	8819      	ldrh	r1, [r3, #0]
    260c:	2300      	movs	r3, #0
    260e:	9300      	str	r3, [sp, #0]
    2610:	9301      	str	r3, [sp, #4]
    2612:	b29a      	uxth	r2, r3
    2614:	4291      	cmp	r1, r2
    2616:	d90c      	bls.n	2632 <qtm_ptc_init_acquisition_module+0x4a>
    2618:	6844      	ldr	r4, [r0, #4]
    261a:	00da      	lsls	r2, r3, #3
    261c:	18a2      	adds	r2, r4, r2
    261e:	8814      	ldrh	r4, [r2, #0]
    2620:	9d01      	ldr	r5, [sp, #4]
    2622:	3301      	adds	r3, #1
    2624:	4325      	orrs	r5, r4
    2626:	9501      	str	r5, [sp, #4]
    2628:	8852      	ldrh	r2, [r2, #2]
    262a:	9c00      	ldr	r4, [sp, #0]
    262c:	4314      	orrs	r4, r2
    262e:	9400      	str	r4, [sp, #0]
    2630:	e7ef      	b.n	2612 <qtm_ptc_init_acquisition_module+0x2a>
    2632:	9b00      	ldr	r3, [sp, #0]
    2634:	2602      	movs	r6, #2
    2636:	2b00      	cmp	r3, #0
    2638:	d055      	beq.n	26e6 <qtm_ptc_init_acquisition_module+0xfe>
    263a:	9b01      	ldr	r3, [sp, #4]
    263c:	9a00      	ldr	r2, [sp, #0]
    263e:	041b      	lsls	r3, r3, #16
    2640:	431a      	orrs	r2, r3
    2642:	4694      	mov	ip, r2
    2644:	2000      	movs	r0, #0
    2646:	2101      	movs	r1, #1
    2648:	240f      	movs	r4, #15
    264a:	4f2a      	ldr	r7, [pc, #168]	; (26f4 <qtm_ptc_init_acquisition_module+0x10c>)
    264c:	370e      	adds	r7, #14
    264e:	4663      	mov	r3, ip
    2650:	40c3      	lsrs	r3, r0
    2652:	420b      	tst	r3, r1
    2654:	d025      	beq.n	26a2 <qtm_ptc_init_acquisition_module+0xba>
    2656:	5dc3      	ldrb	r3, [r0, r7]
    2658:	2b1f      	cmp	r3, #31
    265a:	d80e      	bhi.n	267a <qtm_ptc_init_acquisition_module+0x92>
    265c:	4d26      	ldr	r5, [pc, #152]	; (26f8 <qtm_ptc_init_acquisition_module+0x110>)
    265e:	085a      	lsrs	r2, r3, #1
    2660:	1952      	adds	r2, r2, r5
    2662:	7815      	ldrb	r5, [r2, #0]
    2664:	420b      	tst	r3, r1
    2666:	d003      	beq.n	2670 <qtm_ptc_init_acquisition_module+0x88>
    2668:	2610      	movs	r6, #16
    266a:	4025      	ands	r5, r4
    266c:	4335      	orrs	r5, r6
    266e:	e001      	b.n	2674 <qtm_ptc_init_acquisition_module+0x8c>
    2670:	43a5      	bics	r5, r4
    2672:	430d      	orrs	r5, r1
    2674:	7015      	strb	r5, [r2, #0]
    2676:	4a21      	ldr	r2, [pc, #132]	; (26fc <qtm_ptc_init_acquisition_module+0x114>)
    2678:	e00f      	b.n	269a <qtm_ptc_init_acquisition_module+0xb2>
    267a:	3b20      	subs	r3, #32
    267c:	4d20      	ldr	r5, [pc, #128]	; (2700 <qtm_ptc_init_acquisition_module+0x118>)
    267e:	b2db      	uxtb	r3, r3
    2680:	085a      	lsrs	r2, r3, #1
    2682:	1952      	adds	r2, r2, r5
    2684:	7815      	ldrb	r5, [r2, #0]
    2686:	420b      	tst	r3, r1
    2688:	d003      	beq.n	2692 <qtm_ptc_init_acquisition_module+0xaa>
    268a:	2610      	movs	r6, #16
    268c:	4025      	ands	r5, r4
    268e:	4335      	orrs	r5, r6
    2690:	e001      	b.n	2696 <qtm_ptc_init_acquisition_module+0xae>
    2692:	43a5      	bics	r5, r4
    2694:	430d      	orrs	r5, r1
    2696:	7015      	strb	r5, [r2, #0]
    2698:	4a1a      	ldr	r2, [pc, #104]	; (2704 <qtm_ptc_init_acquisition_module+0x11c>)
    269a:	189b      	adds	r3, r3, r2
    269c:	781a      	ldrb	r2, [r3, #0]
    269e:	430a      	orrs	r2, r1
    26a0:	701a      	strb	r2, [r3, #0]
    26a2:	3001      	adds	r0, #1
    26a4:	2820      	cmp	r0, #32
    26a6:	d1d2      	bne.n	264e <qtm_ptc_init_acquisition_module+0x66>
    26a8:	4d17      	ldr	r5, [pc, #92]	; (2708 <qtm_ptc_init_acquisition_module+0x120>)
    26aa:	47a8      	blx	r5
    26ac:	2300      	movs	r3, #0
    26ae:	4c17      	ldr	r4, [pc, #92]	; (270c <qtm_ptc_init_acquisition_module+0x124>)
    26b0:	4f17      	ldr	r7, [pc, #92]	; (2710 <qtm_ptc_init_acquisition_module+0x128>)
    26b2:	7023      	strb	r3, [r4, #0]
    26b4:	7a3e      	ldrb	r6, [r7, #8]
    26b6:	2e00      	cmp	r6, #0
    26b8:	d10a      	bne.n	26d0 <qtm_ptc_init_acquisition_module+0xe8>
    26ba:	47a8      	blx	r5
    26bc:	466b      	mov	r3, sp
    26be:	889b      	ldrh	r3, [r3, #4]
    26c0:	82e3      	strh	r3, [r4, #22]
    26c2:	47a8      	blx	r5
    26c4:	466b      	mov	r3, sp
    26c6:	881b      	ldrh	r3, [r3, #0]
    26c8:	82a3      	strh	r3, [r4, #20]
    26ca:	2301      	movs	r3, #1
    26cc:	723b      	strb	r3, [r7, #8]
    26ce:	e00a      	b.n	26e6 <qtm_ptc_init_acquisition_module+0xfe>
    26d0:	2600      	movs	r6, #0
    26d2:	47a8      	blx	r5
    26d4:	8ae3      	ldrh	r3, [r4, #22]
    26d6:	9a01      	ldr	r2, [sp, #4]
    26d8:	431a      	orrs	r2, r3
    26da:	82e2      	strh	r2, [r4, #22]
    26dc:	47a8      	blx	r5
    26de:	8aa3      	ldrh	r3, [r4, #20]
    26e0:	9a00      	ldr	r2, [sp, #0]
    26e2:	431a      	orrs	r2, r3
    26e4:	82a2      	strh	r2, [r4, #20]
    26e6:	0030      	movs	r0, r6
    26e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	42004400 	.word	0x42004400
    26f0:	fffff8ff 	.word	0xfffff8ff
    26f4:	00004220 	.word	0x00004220
    26f8:	41004430 	.word	0x41004430
    26fc:	41004440 	.word	0x41004440
    2700:	410044b0 	.word	0x410044b0
    2704:	410044c0 	.word	0x410044c0
    2708:	000023d1 	.word	0x000023d1
    270c:	42004c00 	.word	0x42004c00
    2710:	20000138 	.word	0x20000138

00002714 <qtm_ptc_qtlib_assign_signal_memory>:
    2714:	230b      	movs	r3, #11
    2716:	2800      	cmp	r0, #0
    2718:	d002      	beq.n	2720 <qtm_ptc_qtlib_assign_signal_memory+0xc>
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <qtm_ptc_qtlib_assign_signal_memory+0x10>)
    271c:	6018      	str	r0, [r3, #0]
    271e:	2300      	movs	r3, #0
    2720:	0018      	movs	r0, r3
    2722:	4770      	bx	lr
    2724:	200002d0 	.word	0x200002d0

00002728 <qtm_enable_sensor_node>:
    2728:	230b      	movs	r3, #11
    272a:	2800      	cmp	r0, #0
    272c:	d00a      	beq.n	2744 <qtm_enable_sensor_node+0x1c>
    272e:	6803      	ldr	r3, [r0, #0]
    2730:	881a      	ldrh	r2, [r3, #0]
    2732:	2302      	movs	r3, #2
    2734:	428a      	cmp	r2, r1
    2736:	d305      	bcc.n	2744 <qtm_enable_sensor_node+0x1c>
    2738:	3304      	adds	r3, #4
    273a:	4359      	muls	r1, r3
    273c:	6882      	ldr	r2, [r0, #8]
    273e:	3b05      	subs	r3, #5
    2740:	548b      	strb	r3, [r1, r2]
    2742:	2300      	movs	r3, #0
    2744:	0018      	movs	r0, r3
    2746:	4770      	bx	lr

00002748 <qtm_calibrate_sensor_node>:
    2748:	0002      	movs	r2, r0
    274a:	b510      	push	{r4, lr}
    274c:	200b      	movs	r0, #11
    274e:	2a00      	cmp	r2, #0
    2750:	d01f      	beq.n	2792 <qtm_calibrate_sensor_node+0x4a>
    2752:	6813      	ldr	r3, [r2, #0]
    2754:	3809      	subs	r0, #9
    2756:	881c      	ldrh	r4, [r3, #0]
    2758:	428c      	cmp	r4, r1
    275a:	d31a      	bcc.n	2792 <qtm_calibrate_sensor_node+0x4a>
    275c:	789b      	ldrb	r3, [r3, #2]
    275e:	6892      	ldr	r2, [r2, #8]
    2760:	2b40      	cmp	r3, #64	; 0x40
    2762:	d105      	bne.n	2770 <qtm_calibrate_sensor_node+0x28>
    2764:	208d      	movs	r0, #141	; 0x8d
    2766:	3b3a      	subs	r3, #58	; 0x3a
    2768:	434b      	muls	r3, r1
    276a:	0080      	lsls	r0, r0, #2
    276c:	18d3      	adds	r3, r2, r3
    276e:	e007      	b.n	2780 <qtm_calibrate_sensor_node+0x38>
    2770:	3b80      	subs	r3, #128	; 0x80
    2772:	b2db      	uxtb	r3, r3
    2774:	2b01      	cmp	r3, #1
    2776:	d805      	bhi.n	2784 <qtm_calibrate_sensor_node+0x3c>
    2778:	2306      	movs	r3, #6
    277a:	434b      	muls	r3, r1
    277c:	4805      	ldr	r0, [pc, #20]	; (2794 <qtm_calibrate_sensor_node+0x4c>)
    277e:	18d3      	adds	r3, r2, r3
    2780:	8098      	strh	r0, [r3, #4]
    2782:	2000      	movs	r0, #0
    2784:	2306      	movs	r3, #6
    2786:	4359      	muls	r1, r3
    2788:	1851      	adds	r1, r2, r1
    278a:	2202      	movs	r2, #2
    278c:	780b      	ldrb	r3, [r1, #0]
    278e:	4313      	orrs	r3, r2
    2790:	700b      	strb	r3, [r1, #0]
    2792:	bd10      	pop	{r4, pc}
    2794:	00000567 	.word	0x00000567

00002798 <qtm_ptc_clear_interrupt>:
    2798:	2002      	movs	r0, #2
    279a:	4b07      	ldr	r3, [pc, #28]	; (27b8 <qtm_ptc_clear_interrupt+0x20>)
    279c:	7a9a      	ldrb	r2, [r3, #10]
    279e:	b2d2      	uxtb	r2, r2
    27a0:	4202      	tst	r2, r0
    27a2:	d002      	beq.n	27aa <qtm_ptc_clear_interrupt+0x12>
    27a4:	7a99      	ldrb	r1, [r3, #10]
    27a6:	4301      	orrs	r1, r0
    27a8:	7299      	strb	r1, [r3, #10]
    27aa:	2101      	movs	r1, #1
    27ac:	420a      	tst	r2, r1
    27ae:	d002      	beq.n	27b6 <qtm_ptc_clear_interrupt+0x1e>
    27b0:	7a9a      	ldrb	r2, [r3, #10]
    27b2:	430a      	orrs	r2, r1
    27b4:	729a      	strb	r2, [r3, #10]
    27b6:	4770      	bx	lr
    27b8:	42004c00 	.word	0x42004c00

000027bc <qtm_samd21_ptc_handler_eoc>:
    27bc:	b570      	push	{r4, r5, r6, lr}
    27be:	4b21      	ldr	r3, [pc, #132]	; (2844 <qtm_samd21_ptc_handler_eoc+0x88>)
    27c0:	4798      	blx	r3
    27c2:	2202      	movs	r2, #2
    27c4:	4c20      	ldr	r4, [pc, #128]	; (2848 <qtm_samd21_ptc_handler_eoc+0x8c>)
    27c6:	7823      	ldrb	r3, [r4, #0]
    27c8:	4393      	bics	r3, r2
    27ca:	7023      	strb	r3, [r4, #0]
    27cc:	4b1f      	ldr	r3, [pc, #124]	; (284c <qtm_samd21_ptc_handler_eoc+0x90>)
    27ce:	4798      	blx	r3
    27d0:	8ba1      	ldrh	r1, [r4, #28]
    27d2:	8ba0      	ldrh	r0, [r4, #28]
    27d4:	4c1e      	ldr	r4, [pc, #120]	; (2850 <qtm_samd21_ptc_handler_eoc+0x94>)
    27d6:	4a1f      	ldr	r2, [pc, #124]	; (2854 <qtm_samd21_ptc_handler_eoc+0x98>)
    27d8:	8823      	ldrh	r3, [r4, #0]
    27da:	6812      	ldr	r2, [r2, #0]
    27dc:	005b      	lsls	r3, r3, #1
    27de:	52d0      	strh	r0, [r2, r3]
    27e0:	4b1d      	ldr	r3, [pc, #116]	; (2858 <qtm_samd21_ptc_handler_eoc+0x9c>)
    27e2:	b289      	uxth	r1, r1
    27e4:	781b      	ldrb	r3, [r3, #0]
    27e6:	0025      	movs	r5, r4
    27e8:	2b01      	cmp	r3, #1
    27ea:	d002      	beq.n	27f2 <qtm_samd21_ptc_handler_eoc+0x36>
    27ec:	2b02      	cmp	r3, #2
    27ee:	d00f      	beq.n	2810 <qtm_samd21_ptc_handler_eoc+0x54>
    27f0:	e027      	b.n	2842 <qtm_samd21_ptc_handler_eoc+0x86>
    27f2:	8823      	ldrh	r3, [r4, #0]
    27f4:	3301      	adds	r3, #1
    27f6:	8023      	strh	r3, [r4, #0]
    27f8:	4b18      	ldr	r3, [pc, #96]	; (285c <qtm_samd21_ptc_handler_eoc+0xa0>)
    27fa:	4798      	blx	r3
    27fc:	2800      	cmp	r0, #0
    27fe:	d105      	bne.n	280c <qtm_samd21_ptc_handler_eoc+0x50>
    2800:	4b17      	ldr	r3, [pc, #92]	; (2860 <qtm_samd21_ptc_handler_eoc+0xa4>)
    2802:	8820      	ldrh	r0, [r4, #0]
    2804:	4798      	blx	r3
    2806:	2304      	movs	r3, #4
    2808:	7223      	strb	r3, [r4, #8]
    280a:	e01a      	b.n	2842 <qtm_samd21_ptc_handler_eoc+0x86>
    280c:	68e3      	ldr	r3, [r4, #12]
    280e:	e017      	b.n	2840 <qtm_samd21_ptc_handler_eoc+0x84>
    2810:	4b14      	ldr	r3, [pc, #80]	; (2864 <qtm_samd21_ptc_handler_eoc+0xa8>)
    2812:	681e      	ldr	r6, [r3, #0]
    2814:	8823      	ldrh	r3, [r4, #0]
    2816:	6872      	ldr	r2, [r6, #4]
    2818:	00dc      	lsls	r4, r3, #3
    281a:	1914      	adds	r4, r2, r4
    281c:	220f      	movs	r2, #15
    281e:	7960      	ldrb	r0, [r4, #5]
    2820:	4010      	ands	r0, r2
    2822:	79a2      	ldrb	r2, [r4, #6]
    2824:	2400      	movs	r4, #0
    2826:	4290      	cmp	r0, r2
    2828:	d201      	bcs.n	282e <qtm_samd21_ptc_handler_eoc+0x72>
    282a:	1a12      	subs	r2, r2, r0
    282c:	b2d4      	uxtb	r4, r2
    282e:	2206      	movs	r2, #6
    2830:	40e1      	lsrs	r1, r4
    2832:	4353      	muls	r3, r2
    2834:	68b0      	ldr	r0, [r6, #8]
    2836:	18c3      	adds	r3, r0, r3
    2838:	8059      	strh	r1, [r3, #2]
    283a:	2302      	movs	r3, #2
    283c:	722b      	strb	r3, [r5, #8]
    283e:	692b      	ldr	r3, [r5, #16]
    2840:	4798      	blx	r3
    2842:	bd70      	pop	{r4, r5, r6, pc}
    2844:	000023d1 	.word	0x000023d1
    2848:	42004c00 	.word	0x42004c00
    284c:	00002799 	.word	0x00002799
    2850:	20000138 	.word	0x20000138
    2854:	200002d0 	.word	0x200002d0
    2858:	20000058 	.word	0x20000058
    285c:	000023e9 	.word	0x000023e9
    2860:	00002429 	.word	0x00002429
    2864:	200002cc 	.word	0x200002cc

00002868 <__udivsi3>:
    2868:	2200      	movs	r2, #0
    286a:	0843      	lsrs	r3, r0, #1
    286c:	428b      	cmp	r3, r1
    286e:	d374      	bcc.n	295a <__udivsi3+0xf2>
    2870:	0903      	lsrs	r3, r0, #4
    2872:	428b      	cmp	r3, r1
    2874:	d35f      	bcc.n	2936 <__udivsi3+0xce>
    2876:	0a03      	lsrs	r3, r0, #8
    2878:	428b      	cmp	r3, r1
    287a:	d344      	bcc.n	2906 <__udivsi3+0x9e>
    287c:	0b03      	lsrs	r3, r0, #12
    287e:	428b      	cmp	r3, r1
    2880:	d328      	bcc.n	28d4 <__udivsi3+0x6c>
    2882:	0c03      	lsrs	r3, r0, #16
    2884:	428b      	cmp	r3, r1
    2886:	d30d      	bcc.n	28a4 <__udivsi3+0x3c>
    2888:	22ff      	movs	r2, #255	; 0xff
    288a:	0209      	lsls	r1, r1, #8
    288c:	ba12      	rev	r2, r2
    288e:	0c03      	lsrs	r3, r0, #16
    2890:	428b      	cmp	r3, r1
    2892:	d302      	bcc.n	289a <__udivsi3+0x32>
    2894:	1212      	asrs	r2, r2, #8
    2896:	0209      	lsls	r1, r1, #8
    2898:	d065      	beq.n	2966 <__udivsi3+0xfe>
    289a:	0b03      	lsrs	r3, r0, #12
    289c:	428b      	cmp	r3, r1
    289e:	d319      	bcc.n	28d4 <__udivsi3+0x6c>
    28a0:	e000      	b.n	28a4 <__udivsi3+0x3c>
    28a2:	0a09      	lsrs	r1, r1, #8
    28a4:	0bc3      	lsrs	r3, r0, #15
    28a6:	428b      	cmp	r3, r1
    28a8:	d301      	bcc.n	28ae <__udivsi3+0x46>
    28aa:	03cb      	lsls	r3, r1, #15
    28ac:	1ac0      	subs	r0, r0, r3
    28ae:	4152      	adcs	r2, r2
    28b0:	0b83      	lsrs	r3, r0, #14
    28b2:	428b      	cmp	r3, r1
    28b4:	d301      	bcc.n	28ba <__udivsi3+0x52>
    28b6:	038b      	lsls	r3, r1, #14
    28b8:	1ac0      	subs	r0, r0, r3
    28ba:	4152      	adcs	r2, r2
    28bc:	0b43      	lsrs	r3, r0, #13
    28be:	428b      	cmp	r3, r1
    28c0:	d301      	bcc.n	28c6 <__udivsi3+0x5e>
    28c2:	034b      	lsls	r3, r1, #13
    28c4:	1ac0      	subs	r0, r0, r3
    28c6:	4152      	adcs	r2, r2
    28c8:	0b03      	lsrs	r3, r0, #12
    28ca:	428b      	cmp	r3, r1
    28cc:	d301      	bcc.n	28d2 <__udivsi3+0x6a>
    28ce:	030b      	lsls	r3, r1, #12
    28d0:	1ac0      	subs	r0, r0, r3
    28d2:	4152      	adcs	r2, r2
    28d4:	0ac3      	lsrs	r3, r0, #11
    28d6:	428b      	cmp	r3, r1
    28d8:	d301      	bcc.n	28de <__udivsi3+0x76>
    28da:	02cb      	lsls	r3, r1, #11
    28dc:	1ac0      	subs	r0, r0, r3
    28de:	4152      	adcs	r2, r2
    28e0:	0a83      	lsrs	r3, r0, #10
    28e2:	428b      	cmp	r3, r1
    28e4:	d301      	bcc.n	28ea <__udivsi3+0x82>
    28e6:	028b      	lsls	r3, r1, #10
    28e8:	1ac0      	subs	r0, r0, r3
    28ea:	4152      	adcs	r2, r2
    28ec:	0a43      	lsrs	r3, r0, #9
    28ee:	428b      	cmp	r3, r1
    28f0:	d301      	bcc.n	28f6 <__udivsi3+0x8e>
    28f2:	024b      	lsls	r3, r1, #9
    28f4:	1ac0      	subs	r0, r0, r3
    28f6:	4152      	adcs	r2, r2
    28f8:	0a03      	lsrs	r3, r0, #8
    28fa:	428b      	cmp	r3, r1
    28fc:	d301      	bcc.n	2902 <__udivsi3+0x9a>
    28fe:	020b      	lsls	r3, r1, #8
    2900:	1ac0      	subs	r0, r0, r3
    2902:	4152      	adcs	r2, r2
    2904:	d2cd      	bcs.n	28a2 <__udivsi3+0x3a>
    2906:	09c3      	lsrs	r3, r0, #7
    2908:	428b      	cmp	r3, r1
    290a:	d301      	bcc.n	2910 <__udivsi3+0xa8>
    290c:	01cb      	lsls	r3, r1, #7
    290e:	1ac0      	subs	r0, r0, r3
    2910:	4152      	adcs	r2, r2
    2912:	0983      	lsrs	r3, r0, #6
    2914:	428b      	cmp	r3, r1
    2916:	d301      	bcc.n	291c <__udivsi3+0xb4>
    2918:	018b      	lsls	r3, r1, #6
    291a:	1ac0      	subs	r0, r0, r3
    291c:	4152      	adcs	r2, r2
    291e:	0943      	lsrs	r3, r0, #5
    2920:	428b      	cmp	r3, r1
    2922:	d301      	bcc.n	2928 <__udivsi3+0xc0>
    2924:	014b      	lsls	r3, r1, #5
    2926:	1ac0      	subs	r0, r0, r3
    2928:	4152      	adcs	r2, r2
    292a:	0903      	lsrs	r3, r0, #4
    292c:	428b      	cmp	r3, r1
    292e:	d301      	bcc.n	2934 <__udivsi3+0xcc>
    2930:	010b      	lsls	r3, r1, #4
    2932:	1ac0      	subs	r0, r0, r3
    2934:	4152      	adcs	r2, r2
    2936:	08c3      	lsrs	r3, r0, #3
    2938:	428b      	cmp	r3, r1
    293a:	d301      	bcc.n	2940 <__udivsi3+0xd8>
    293c:	00cb      	lsls	r3, r1, #3
    293e:	1ac0      	subs	r0, r0, r3
    2940:	4152      	adcs	r2, r2
    2942:	0883      	lsrs	r3, r0, #2
    2944:	428b      	cmp	r3, r1
    2946:	d301      	bcc.n	294c <__udivsi3+0xe4>
    2948:	008b      	lsls	r3, r1, #2
    294a:	1ac0      	subs	r0, r0, r3
    294c:	4152      	adcs	r2, r2
    294e:	0843      	lsrs	r3, r0, #1
    2950:	428b      	cmp	r3, r1
    2952:	d301      	bcc.n	2958 <__udivsi3+0xf0>
    2954:	004b      	lsls	r3, r1, #1
    2956:	1ac0      	subs	r0, r0, r3
    2958:	4152      	adcs	r2, r2
    295a:	1a41      	subs	r1, r0, r1
    295c:	d200      	bcs.n	2960 <__udivsi3+0xf8>
    295e:	4601      	mov	r1, r0
    2960:	4152      	adcs	r2, r2
    2962:	4610      	mov	r0, r2
    2964:	4770      	bx	lr
    2966:	e7ff      	b.n	2968 <__udivsi3+0x100>
    2968:	b501      	push	{r0, lr}
    296a:	2000      	movs	r0, #0
    296c:	f000 f806 	bl	297c <__aeabi_idiv0>
    2970:	bd02      	pop	{r1, pc}
    2972:	46c0      	nop			; (mov r8, r8)

00002974 <__aeabi_uidivmod>:
    2974:	2900      	cmp	r1, #0
    2976:	d0f7      	beq.n	2968 <__udivsi3+0x100>
    2978:	e776      	b.n	2868 <__udivsi3>
    297a:	4770      	bx	lr

0000297c <__aeabi_idiv0>:
    297c:	4770      	bx	lr
    297e:	46c0      	nop			; (mov r8, r8)

00002980 <__libc_init_array>:
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	2600      	movs	r6, #0
    2984:	4d0c      	ldr	r5, [pc, #48]	; (29b8 <__libc_init_array+0x38>)
    2986:	4c0d      	ldr	r4, [pc, #52]	; (29bc <__libc_init_array+0x3c>)
    2988:	1b64      	subs	r4, r4, r5
    298a:	10a4      	asrs	r4, r4, #2
    298c:	42a6      	cmp	r6, r4
    298e:	d109      	bne.n	29a4 <__libc_init_array+0x24>
    2990:	2600      	movs	r6, #0
    2992:	f001 fca9 	bl	42e8 <_init>
    2996:	4d0a      	ldr	r5, [pc, #40]	; (29c0 <__libc_init_array+0x40>)
    2998:	4c0a      	ldr	r4, [pc, #40]	; (29c4 <__libc_init_array+0x44>)
    299a:	1b64      	subs	r4, r4, r5
    299c:	10a4      	asrs	r4, r4, #2
    299e:	42a6      	cmp	r6, r4
    29a0:	d105      	bne.n	29ae <__libc_init_array+0x2e>
    29a2:	bd70      	pop	{r4, r5, r6, pc}
    29a4:	00b3      	lsls	r3, r6, #2
    29a6:	58eb      	ldr	r3, [r5, r3]
    29a8:	4798      	blx	r3
    29aa:	3601      	adds	r6, #1
    29ac:	e7ee      	b.n	298c <__libc_init_array+0xc>
    29ae:	00b3      	lsls	r3, r6, #2
    29b0:	58eb      	ldr	r3, [r5, r3]
    29b2:	4798      	blx	r3
    29b4:	3601      	adds	r6, #1
    29b6:	e7f2      	b.n	299e <__libc_init_array+0x1e>
    29b8:	000042f4 	.word	0x000042f4
    29bc:	000042f4 	.word	0x000042f4
    29c0:	000042f4 	.word	0x000042f4
    29c4:	000042f8 	.word	0x000042f8

000029c8 <memset>:
    29c8:	0003      	movs	r3, r0
    29ca:	1882      	adds	r2, r0, r2
    29cc:	4293      	cmp	r3, r2
    29ce:	d100      	bne.n	29d2 <memset+0xa>
    29d0:	4770      	bx	lr
    29d2:	7019      	strb	r1, [r3, #0]
    29d4:	3301      	adds	r3, #1
    29d6:	e7f9      	b.n	29cc <memset+0x4>

000029d8 <iprintf>:
    29d8:	b40f      	push	{r0, r1, r2, r3}
    29da:	4b0b      	ldr	r3, [pc, #44]	; (2a08 <iprintf+0x30>)
    29dc:	b513      	push	{r0, r1, r4, lr}
    29de:	681c      	ldr	r4, [r3, #0]
    29e0:	2c00      	cmp	r4, #0
    29e2:	d005      	beq.n	29f0 <iprintf+0x18>
    29e4:	69a3      	ldr	r3, [r4, #24]
    29e6:	2b00      	cmp	r3, #0
    29e8:	d102      	bne.n	29f0 <iprintf+0x18>
    29ea:	0020      	movs	r0, r4
    29ec:	f000 faaa 	bl	2f44 <__sinit>
    29f0:	ab05      	add	r3, sp, #20
    29f2:	9a04      	ldr	r2, [sp, #16]
    29f4:	68a1      	ldr	r1, [r4, #8]
    29f6:	0020      	movs	r0, r4
    29f8:	9301      	str	r3, [sp, #4]
    29fa:	f000 fde5 	bl	35c8 <_vfiprintf_r>
    29fe:	bc16      	pop	{r1, r2, r4}
    2a00:	bc08      	pop	{r3}
    2a02:	b004      	add	sp, #16
    2a04:	4718      	bx	r3
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	2000005c 	.word	0x2000005c

00002a0c <setbuf>:
    2a0c:	424a      	negs	r2, r1
    2a0e:	414a      	adcs	r2, r1
    2a10:	2380      	movs	r3, #128	; 0x80
    2a12:	b510      	push	{r4, lr}
    2a14:	0052      	lsls	r2, r2, #1
    2a16:	00db      	lsls	r3, r3, #3
    2a18:	f000 f802 	bl	2a20 <setvbuf>
    2a1c:	bd10      	pop	{r4, pc}
	...

00002a20 <setvbuf>:
    2a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a22:	001d      	movs	r5, r3
    2a24:	4b4f      	ldr	r3, [pc, #316]	; (2b64 <setvbuf+0x144>)
    2a26:	b085      	sub	sp, #20
    2a28:	681e      	ldr	r6, [r3, #0]
    2a2a:	0004      	movs	r4, r0
    2a2c:	000f      	movs	r7, r1
    2a2e:	9200      	str	r2, [sp, #0]
    2a30:	2e00      	cmp	r6, #0
    2a32:	d005      	beq.n	2a40 <setvbuf+0x20>
    2a34:	69b3      	ldr	r3, [r6, #24]
    2a36:	2b00      	cmp	r3, #0
    2a38:	d102      	bne.n	2a40 <setvbuf+0x20>
    2a3a:	0030      	movs	r0, r6
    2a3c:	f000 fa82 	bl	2f44 <__sinit>
    2a40:	4b49      	ldr	r3, [pc, #292]	; (2b68 <setvbuf+0x148>)
    2a42:	429c      	cmp	r4, r3
    2a44:	d150      	bne.n	2ae8 <setvbuf+0xc8>
    2a46:	6874      	ldr	r4, [r6, #4]
    2a48:	9b00      	ldr	r3, [sp, #0]
    2a4a:	2b02      	cmp	r3, #2
    2a4c:	d005      	beq.n	2a5a <setvbuf+0x3a>
    2a4e:	2b01      	cmp	r3, #1
    2a50:	d900      	bls.n	2a54 <setvbuf+0x34>
    2a52:	e084      	b.n	2b5e <setvbuf+0x13e>
    2a54:	2d00      	cmp	r5, #0
    2a56:	da00      	bge.n	2a5a <setvbuf+0x3a>
    2a58:	e081      	b.n	2b5e <setvbuf+0x13e>
    2a5a:	0021      	movs	r1, r4
    2a5c:	0030      	movs	r0, r6
    2a5e:	f000 fa03 	bl	2e68 <_fflush_r>
    2a62:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2a64:	2900      	cmp	r1, #0
    2a66:	d008      	beq.n	2a7a <setvbuf+0x5a>
    2a68:	0023      	movs	r3, r4
    2a6a:	3344      	adds	r3, #68	; 0x44
    2a6c:	4299      	cmp	r1, r3
    2a6e:	d002      	beq.n	2a76 <setvbuf+0x56>
    2a70:	0030      	movs	r0, r6
    2a72:	f000 fb73 	bl	315c <_free_r>
    2a76:	2300      	movs	r3, #0
    2a78:	6363      	str	r3, [r4, #52]	; 0x34
    2a7a:	2300      	movs	r3, #0
    2a7c:	61a3      	str	r3, [r4, #24]
    2a7e:	6063      	str	r3, [r4, #4]
    2a80:	89a3      	ldrh	r3, [r4, #12]
    2a82:	061b      	lsls	r3, r3, #24
    2a84:	d503      	bpl.n	2a8e <setvbuf+0x6e>
    2a86:	6921      	ldr	r1, [r4, #16]
    2a88:	0030      	movs	r0, r6
    2a8a:	f000 fb67 	bl	315c <_free_r>
    2a8e:	89a3      	ldrh	r3, [r4, #12]
    2a90:	4a36      	ldr	r2, [pc, #216]	; (2b6c <setvbuf+0x14c>)
    2a92:	4013      	ands	r3, r2
    2a94:	81a3      	strh	r3, [r4, #12]
    2a96:	9b00      	ldr	r3, [sp, #0]
    2a98:	2b02      	cmp	r3, #2
    2a9a:	d05a      	beq.n	2b52 <setvbuf+0x132>
    2a9c:	ab03      	add	r3, sp, #12
    2a9e:	aa02      	add	r2, sp, #8
    2aa0:	0021      	movs	r1, r4
    2aa2:	0030      	movs	r0, r6
    2aa4:	f000 fae4 	bl	3070 <__swhatbuf_r>
    2aa8:	89a3      	ldrh	r3, [r4, #12]
    2aaa:	4318      	orrs	r0, r3
    2aac:	81a0      	strh	r0, [r4, #12]
    2aae:	2d00      	cmp	r5, #0
    2ab0:	d124      	bne.n	2afc <setvbuf+0xdc>
    2ab2:	9d02      	ldr	r5, [sp, #8]
    2ab4:	0028      	movs	r0, r5
    2ab6:	f000 fb47 	bl	3148 <malloc>
    2aba:	9501      	str	r5, [sp, #4]
    2abc:	1e07      	subs	r7, r0, #0
    2abe:	d142      	bne.n	2b46 <setvbuf+0x126>
    2ac0:	9b02      	ldr	r3, [sp, #8]
    2ac2:	9301      	str	r3, [sp, #4]
    2ac4:	42ab      	cmp	r3, r5
    2ac6:	d139      	bne.n	2b3c <setvbuf+0x11c>
    2ac8:	2001      	movs	r0, #1
    2aca:	4240      	negs	r0, r0
    2acc:	2302      	movs	r3, #2
    2ace:	89a2      	ldrh	r2, [r4, #12]
    2ad0:	4313      	orrs	r3, r2
    2ad2:	81a3      	strh	r3, [r4, #12]
    2ad4:	2300      	movs	r3, #0
    2ad6:	60a3      	str	r3, [r4, #8]
    2ad8:	0023      	movs	r3, r4
    2ada:	3347      	adds	r3, #71	; 0x47
    2adc:	6023      	str	r3, [r4, #0]
    2ade:	6123      	str	r3, [r4, #16]
    2ae0:	2301      	movs	r3, #1
    2ae2:	6163      	str	r3, [r4, #20]
    2ae4:	b005      	add	sp, #20
    2ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae8:	4b21      	ldr	r3, [pc, #132]	; (2b70 <setvbuf+0x150>)
    2aea:	429c      	cmp	r4, r3
    2aec:	d101      	bne.n	2af2 <setvbuf+0xd2>
    2aee:	68b4      	ldr	r4, [r6, #8]
    2af0:	e7aa      	b.n	2a48 <setvbuf+0x28>
    2af2:	4b20      	ldr	r3, [pc, #128]	; (2b74 <setvbuf+0x154>)
    2af4:	429c      	cmp	r4, r3
    2af6:	d1a7      	bne.n	2a48 <setvbuf+0x28>
    2af8:	68f4      	ldr	r4, [r6, #12]
    2afa:	e7a5      	b.n	2a48 <setvbuf+0x28>
    2afc:	2f00      	cmp	r7, #0
    2afe:	d0d9      	beq.n	2ab4 <setvbuf+0x94>
    2b00:	69b3      	ldr	r3, [r6, #24]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d102      	bne.n	2b0c <setvbuf+0xec>
    2b06:	0030      	movs	r0, r6
    2b08:	f000 fa1c 	bl	2f44 <__sinit>
    2b0c:	9b00      	ldr	r3, [sp, #0]
    2b0e:	2b01      	cmp	r3, #1
    2b10:	d103      	bne.n	2b1a <setvbuf+0xfa>
    2b12:	89a3      	ldrh	r3, [r4, #12]
    2b14:	9a00      	ldr	r2, [sp, #0]
    2b16:	431a      	orrs	r2, r3
    2b18:	81a2      	strh	r2, [r4, #12]
    2b1a:	2008      	movs	r0, #8
    2b1c:	89a3      	ldrh	r3, [r4, #12]
    2b1e:	6027      	str	r7, [r4, #0]
    2b20:	6127      	str	r7, [r4, #16]
    2b22:	6165      	str	r5, [r4, #20]
    2b24:	4018      	ands	r0, r3
    2b26:	d018      	beq.n	2b5a <setvbuf+0x13a>
    2b28:	2001      	movs	r0, #1
    2b2a:	4018      	ands	r0, r3
    2b2c:	2300      	movs	r3, #0
    2b2e:	4298      	cmp	r0, r3
    2b30:	d011      	beq.n	2b56 <setvbuf+0x136>
    2b32:	426d      	negs	r5, r5
    2b34:	60a3      	str	r3, [r4, #8]
    2b36:	61a5      	str	r5, [r4, #24]
    2b38:	0018      	movs	r0, r3
    2b3a:	e7d3      	b.n	2ae4 <setvbuf+0xc4>
    2b3c:	9801      	ldr	r0, [sp, #4]
    2b3e:	f000 fb03 	bl	3148 <malloc>
    2b42:	1e07      	subs	r7, r0, #0
    2b44:	d0c0      	beq.n	2ac8 <setvbuf+0xa8>
    2b46:	2380      	movs	r3, #128	; 0x80
    2b48:	89a2      	ldrh	r2, [r4, #12]
    2b4a:	9d01      	ldr	r5, [sp, #4]
    2b4c:	4313      	orrs	r3, r2
    2b4e:	81a3      	strh	r3, [r4, #12]
    2b50:	e7d6      	b.n	2b00 <setvbuf+0xe0>
    2b52:	2000      	movs	r0, #0
    2b54:	e7ba      	b.n	2acc <setvbuf+0xac>
    2b56:	60a5      	str	r5, [r4, #8]
    2b58:	e7c4      	b.n	2ae4 <setvbuf+0xc4>
    2b5a:	60a0      	str	r0, [r4, #8]
    2b5c:	e7c2      	b.n	2ae4 <setvbuf+0xc4>
    2b5e:	2001      	movs	r0, #1
    2b60:	4240      	negs	r0, r0
    2b62:	e7bf      	b.n	2ae4 <setvbuf+0xc4>
    2b64:	2000005c 	.word	0x2000005c
    2b68:	00004274 	.word	0x00004274
    2b6c:	fffff35c 	.word	0xfffff35c
    2b70:	00004294 	.word	0x00004294
    2b74:	00004254 	.word	0x00004254

00002b78 <siprintf>:
    2b78:	b40e      	push	{r1, r2, r3}
    2b7a:	b510      	push	{r4, lr}
    2b7c:	b09d      	sub	sp, #116	; 0x74
    2b7e:	a902      	add	r1, sp, #8
    2b80:	9002      	str	r0, [sp, #8]
    2b82:	6108      	str	r0, [r1, #16]
    2b84:	480b      	ldr	r0, [pc, #44]	; (2bb4 <siprintf+0x3c>)
    2b86:	2482      	movs	r4, #130	; 0x82
    2b88:	6088      	str	r0, [r1, #8]
    2b8a:	6148      	str	r0, [r1, #20]
    2b8c:	2001      	movs	r0, #1
    2b8e:	4240      	negs	r0, r0
    2b90:	ab1f      	add	r3, sp, #124	; 0x7c
    2b92:	81c8      	strh	r0, [r1, #14]
    2b94:	4808      	ldr	r0, [pc, #32]	; (2bb8 <siprintf+0x40>)
    2b96:	cb04      	ldmia	r3!, {r2}
    2b98:	00a4      	lsls	r4, r4, #2
    2b9a:	6800      	ldr	r0, [r0, #0]
    2b9c:	9301      	str	r3, [sp, #4]
    2b9e:	818c      	strh	r4, [r1, #12]
    2ba0:	f000 fbe6 	bl	3370 <_svfiprintf_r>
    2ba4:	2300      	movs	r3, #0
    2ba6:	9a02      	ldr	r2, [sp, #8]
    2ba8:	7013      	strb	r3, [r2, #0]
    2baa:	b01d      	add	sp, #116	; 0x74
    2bac:	bc10      	pop	{r4}
    2bae:	bc08      	pop	{r3}
    2bb0:	b003      	add	sp, #12
    2bb2:	4718      	bx	r3
    2bb4:	7fffffff 	.word	0x7fffffff
    2bb8:	2000005c 	.word	0x2000005c

00002bbc <__swbuf_r>:
    2bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bbe:	0005      	movs	r5, r0
    2bc0:	000e      	movs	r6, r1
    2bc2:	0014      	movs	r4, r2
    2bc4:	2800      	cmp	r0, #0
    2bc6:	d004      	beq.n	2bd2 <__swbuf_r+0x16>
    2bc8:	6983      	ldr	r3, [r0, #24]
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d101      	bne.n	2bd2 <__swbuf_r+0x16>
    2bce:	f000 f9b9 	bl	2f44 <__sinit>
    2bd2:	4b22      	ldr	r3, [pc, #136]	; (2c5c <__swbuf_r+0xa0>)
    2bd4:	429c      	cmp	r4, r3
    2bd6:	d12d      	bne.n	2c34 <__swbuf_r+0x78>
    2bd8:	686c      	ldr	r4, [r5, #4]
    2bda:	69a3      	ldr	r3, [r4, #24]
    2bdc:	60a3      	str	r3, [r4, #8]
    2bde:	89a3      	ldrh	r3, [r4, #12]
    2be0:	071b      	lsls	r3, r3, #28
    2be2:	d531      	bpl.n	2c48 <__swbuf_r+0x8c>
    2be4:	6923      	ldr	r3, [r4, #16]
    2be6:	2b00      	cmp	r3, #0
    2be8:	d02e      	beq.n	2c48 <__swbuf_r+0x8c>
    2bea:	6823      	ldr	r3, [r4, #0]
    2bec:	6922      	ldr	r2, [r4, #16]
    2bee:	b2f7      	uxtb	r7, r6
    2bf0:	1a98      	subs	r0, r3, r2
    2bf2:	6963      	ldr	r3, [r4, #20]
    2bf4:	b2f6      	uxtb	r6, r6
    2bf6:	4298      	cmp	r0, r3
    2bf8:	db05      	blt.n	2c06 <__swbuf_r+0x4a>
    2bfa:	0021      	movs	r1, r4
    2bfc:	0028      	movs	r0, r5
    2bfe:	f000 f933 	bl	2e68 <_fflush_r>
    2c02:	2800      	cmp	r0, #0
    2c04:	d126      	bne.n	2c54 <__swbuf_r+0x98>
    2c06:	68a3      	ldr	r3, [r4, #8]
    2c08:	3001      	adds	r0, #1
    2c0a:	3b01      	subs	r3, #1
    2c0c:	60a3      	str	r3, [r4, #8]
    2c0e:	6823      	ldr	r3, [r4, #0]
    2c10:	1c5a      	adds	r2, r3, #1
    2c12:	6022      	str	r2, [r4, #0]
    2c14:	701f      	strb	r7, [r3, #0]
    2c16:	6963      	ldr	r3, [r4, #20]
    2c18:	4298      	cmp	r0, r3
    2c1a:	d004      	beq.n	2c26 <__swbuf_r+0x6a>
    2c1c:	89a3      	ldrh	r3, [r4, #12]
    2c1e:	07db      	lsls	r3, r3, #31
    2c20:	d51a      	bpl.n	2c58 <__swbuf_r+0x9c>
    2c22:	2e0a      	cmp	r6, #10
    2c24:	d118      	bne.n	2c58 <__swbuf_r+0x9c>
    2c26:	0021      	movs	r1, r4
    2c28:	0028      	movs	r0, r5
    2c2a:	f000 f91d 	bl	2e68 <_fflush_r>
    2c2e:	2800      	cmp	r0, #0
    2c30:	d012      	beq.n	2c58 <__swbuf_r+0x9c>
    2c32:	e00f      	b.n	2c54 <__swbuf_r+0x98>
    2c34:	4b0a      	ldr	r3, [pc, #40]	; (2c60 <__swbuf_r+0xa4>)
    2c36:	429c      	cmp	r4, r3
    2c38:	d101      	bne.n	2c3e <__swbuf_r+0x82>
    2c3a:	68ac      	ldr	r4, [r5, #8]
    2c3c:	e7cd      	b.n	2bda <__swbuf_r+0x1e>
    2c3e:	4b09      	ldr	r3, [pc, #36]	; (2c64 <__swbuf_r+0xa8>)
    2c40:	429c      	cmp	r4, r3
    2c42:	d1ca      	bne.n	2bda <__swbuf_r+0x1e>
    2c44:	68ec      	ldr	r4, [r5, #12]
    2c46:	e7c8      	b.n	2bda <__swbuf_r+0x1e>
    2c48:	0021      	movs	r1, r4
    2c4a:	0028      	movs	r0, r5
    2c4c:	f000 f80c 	bl	2c68 <__swsetup_r>
    2c50:	2800      	cmp	r0, #0
    2c52:	d0ca      	beq.n	2bea <__swbuf_r+0x2e>
    2c54:	2601      	movs	r6, #1
    2c56:	4276      	negs	r6, r6
    2c58:	0030      	movs	r0, r6
    2c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c5c:	00004274 	.word	0x00004274
    2c60:	00004294 	.word	0x00004294
    2c64:	00004254 	.word	0x00004254

00002c68 <__swsetup_r>:
    2c68:	4b36      	ldr	r3, [pc, #216]	; (2d44 <__swsetup_r+0xdc>)
    2c6a:	b570      	push	{r4, r5, r6, lr}
    2c6c:	681d      	ldr	r5, [r3, #0]
    2c6e:	0006      	movs	r6, r0
    2c70:	000c      	movs	r4, r1
    2c72:	2d00      	cmp	r5, #0
    2c74:	d005      	beq.n	2c82 <__swsetup_r+0x1a>
    2c76:	69ab      	ldr	r3, [r5, #24]
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d102      	bne.n	2c82 <__swsetup_r+0x1a>
    2c7c:	0028      	movs	r0, r5
    2c7e:	f000 f961 	bl	2f44 <__sinit>
    2c82:	4b31      	ldr	r3, [pc, #196]	; (2d48 <__swsetup_r+0xe0>)
    2c84:	429c      	cmp	r4, r3
    2c86:	d10f      	bne.n	2ca8 <__swsetup_r+0x40>
    2c88:	686c      	ldr	r4, [r5, #4]
    2c8a:	230c      	movs	r3, #12
    2c8c:	5ee2      	ldrsh	r2, [r4, r3]
    2c8e:	b293      	uxth	r3, r2
    2c90:	0719      	lsls	r1, r3, #28
    2c92:	d42d      	bmi.n	2cf0 <__swsetup_r+0x88>
    2c94:	06d9      	lsls	r1, r3, #27
    2c96:	d411      	bmi.n	2cbc <__swsetup_r+0x54>
    2c98:	2309      	movs	r3, #9
    2c9a:	2001      	movs	r0, #1
    2c9c:	6033      	str	r3, [r6, #0]
    2c9e:	3337      	adds	r3, #55	; 0x37
    2ca0:	4313      	orrs	r3, r2
    2ca2:	81a3      	strh	r3, [r4, #12]
    2ca4:	4240      	negs	r0, r0
    2ca6:	bd70      	pop	{r4, r5, r6, pc}
    2ca8:	4b28      	ldr	r3, [pc, #160]	; (2d4c <__swsetup_r+0xe4>)
    2caa:	429c      	cmp	r4, r3
    2cac:	d101      	bne.n	2cb2 <__swsetup_r+0x4a>
    2cae:	68ac      	ldr	r4, [r5, #8]
    2cb0:	e7eb      	b.n	2c8a <__swsetup_r+0x22>
    2cb2:	4b27      	ldr	r3, [pc, #156]	; (2d50 <__swsetup_r+0xe8>)
    2cb4:	429c      	cmp	r4, r3
    2cb6:	d1e8      	bne.n	2c8a <__swsetup_r+0x22>
    2cb8:	68ec      	ldr	r4, [r5, #12]
    2cba:	e7e6      	b.n	2c8a <__swsetup_r+0x22>
    2cbc:	075b      	lsls	r3, r3, #29
    2cbe:	d513      	bpl.n	2ce8 <__swsetup_r+0x80>
    2cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2cc2:	2900      	cmp	r1, #0
    2cc4:	d008      	beq.n	2cd8 <__swsetup_r+0x70>
    2cc6:	0023      	movs	r3, r4
    2cc8:	3344      	adds	r3, #68	; 0x44
    2cca:	4299      	cmp	r1, r3
    2ccc:	d002      	beq.n	2cd4 <__swsetup_r+0x6c>
    2cce:	0030      	movs	r0, r6
    2cd0:	f000 fa44 	bl	315c <_free_r>
    2cd4:	2300      	movs	r3, #0
    2cd6:	6363      	str	r3, [r4, #52]	; 0x34
    2cd8:	2224      	movs	r2, #36	; 0x24
    2cda:	89a3      	ldrh	r3, [r4, #12]
    2cdc:	4393      	bics	r3, r2
    2cde:	81a3      	strh	r3, [r4, #12]
    2ce0:	2300      	movs	r3, #0
    2ce2:	6063      	str	r3, [r4, #4]
    2ce4:	6923      	ldr	r3, [r4, #16]
    2ce6:	6023      	str	r3, [r4, #0]
    2ce8:	2308      	movs	r3, #8
    2cea:	89a2      	ldrh	r2, [r4, #12]
    2cec:	4313      	orrs	r3, r2
    2cee:	81a3      	strh	r3, [r4, #12]
    2cf0:	6923      	ldr	r3, [r4, #16]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d10b      	bne.n	2d0e <__swsetup_r+0xa6>
    2cf6:	21a0      	movs	r1, #160	; 0xa0
    2cf8:	2280      	movs	r2, #128	; 0x80
    2cfa:	89a3      	ldrh	r3, [r4, #12]
    2cfc:	0089      	lsls	r1, r1, #2
    2cfe:	0092      	lsls	r2, r2, #2
    2d00:	400b      	ands	r3, r1
    2d02:	4293      	cmp	r3, r2
    2d04:	d003      	beq.n	2d0e <__swsetup_r+0xa6>
    2d06:	0021      	movs	r1, r4
    2d08:	0030      	movs	r0, r6
    2d0a:	f000 f9d9 	bl	30c0 <__smakebuf_r>
    2d0e:	2301      	movs	r3, #1
    2d10:	89a2      	ldrh	r2, [r4, #12]
    2d12:	4013      	ands	r3, r2
    2d14:	d011      	beq.n	2d3a <__swsetup_r+0xd2>
    2d16:	2300      	movs	r3, #0
    2d18:	60a3      	str	r3, [r4, #8]
    2d1a:	6963      	ldr	r3, [r4, #20]
    2d1c:	425b      	negs	r3, r3
    2d1e:	61a3      	str	r3, [r4, #24]
    2d20:	2000      	movs	r0, #0
    2d22:	6923      	ldr	r3, [r4, #16]
    2d24:	4283      	cmp	r3, r0
    2d26:	d1be      	bne.n	2ca6 <__swsetup_r+0x3e>
    2d28:	230c      	movs	r3, #12
    2d2a:	5ee2      	ldrsh	r2, [r4, r3]
    2d2c:	0613      	lsls	r3, r2, #24
    2d2e:	d5ba      	bpl.n	2ca6 <__swsetup_r+0x3e>
    2d30:	2340      	movs	r3, #64	; 0x40
    2d32:	4313      	orrs	r3, r2
    2d34:	81a3      	strh	r3, [r4, #12]
    2d36:	3801      	subs	r0, #1
    2d38:	e7b5      	b.n	2ca6 <__swsetup_r+0x3e>
    2d3a:	0792      	lsls	r2, r2, #30
    2d3c:	d400      	bmi.n	2d40 <__swsetup_r+0xd8>
    2d3e:	6963      	ldr	r3, [r4, #20]
    2d40:	60a3      	str	r3, [r4, #8]
    2d42:	e7ed      	b.n	2d20 <__swsetup_r+0xb8>
    2d44:	2000005c 	.word	0x2000005c
    2d48:	00004274 	.word	0x00004274
    2d4c:	00004294 	.word	0x00004294
    2d50:	00004254 	.word	0x00004254

00002d54 <__sflush_r>:
    2d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2d56:	898a      	ldrh	r2, [r1, #12]
    2d58:	0005      	movs	r5, r0
    2d5a:	000c      	movs	r4, r1
    2d5c:	0713      	lsls	r3, r2, #28
    2d5e:	d460      	bmi.n	2e22 <__sflush_r+0xce>
    2d60:	684b      	ldr	r3, [r1, #4]
    2d62:	2b00      	cmp	r3, #0
    2d64:	dc04      	bgt.n	2d70 <__sflush_r+0x1c>
    2d66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2d68:	2b00      	cmp	r3, #0
    2d6a:	dc01      	bgt.n	2d70 <__sflush_r+0x1c>
    2d6c:	2000      	movs	r0, #0
    2d6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2d70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2d72:	2f00      	cmp	r7, #0
    2d74:	d0fa      	beq.n	2d6c <__sflush_r+0x18>
    2d76:	2300      	movs	r3, #0
    2d78:	682e      	ldr	r6, [r5, #0]
    2d7a:	602b      	str	r3, [r5, #0]
    2d7c:	2380      	movs	r3, #128	; 0x80
    2d7e:	015b      	lsls	r3, r3, #5
    2d80:	401a      	ands	r2, r3
    2d82:	d034      	beq.n	2dee <__sflush_r+0x9a>
    2d84:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2d86:	89a3      	ldrh	r3, [r4, #12]
    2d88:	075b      	lsls	r3, r3, #29
    2d8a:	d506      	bpl.n	2d9a <__sflush_r+0x46>
    2d8c:	6863      	ldr	r3, [r4, #4]
    2d8e:	1ac0      	subs	r0, r0, r3
    2d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2d92:	2b00      	cmp	r3, #0
    2d94:	d001      	beq.n	2d9a <__sflush_r+0x46>
    2d96:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2d98:	1ac0      	subs	r0, r0, r3
    2d9a:	0002      	movs	r2, r0
    2d9c:	6a21      	ldr	r1, [r4, #32]
    2d9e:	2300      	movs	r3, #0
    2da0:	0028      	movs	r0, r5
    2da2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2da4:	47b8      	blx	r7
    2da6:	89a1      	ldrh	r1, [r4, #12]
    2da8:	1c43      	adds	r3, r0, #1
    2daa:	d106      	bne.n	2dba <__sflush_r+0x66>
    2dac:	682b      	ldr	r3, [r5, #0]
    2dae:	2b1d      	cmp	r3, #29
    2db0:	d831      	bhi.n	2e16 <__sflush_r+0xc2>
    2db2:	4a2c      	ldr	r2, [pc, #176]	; (2e64 <__sflush_r+0x110>)
    2db4:	40da      	lsrs	r2, r3
    2db6:	07d3      	lsls	r3, r2, #31
    2db8:	d52d      	bpl.n	2e16 <__sflush_r+0xc2>
    2dba:	2300      	movs	r3, #0
    2dbc:	6063      	str	r3, [r4, #4]
    2dbe:	6923      	ldr	r3, [r4, #16]
    2dc0:	6023      	str	r3, [r4, #0]
    2dc2:	04cb      	lsls	r3, r1, #19
    2dc4:	d505      	bpl.n	2dd2 <__sflush_r+0x7e>
    2dc6:	1c43      	adds	r3, r0, #1
    2dc8:	d102      	bne.n	2dd0 <__sflush_r+0x7c>
    2dca:	682b      	ldr	r3, [r5, #0]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d100      	bne.n	2dd2 <__sflush_r+0x7e>
    2dd0:	6560      	str	r0, [r4, #84]	; 0x54
    2dd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2dd4:	602e      	str	r6, [r5, #0]
    2dd6:	2900      	cmp	r1, #0
    2dd8:	d0c8      	beq.n	2d6c <__sflush_r+0x18>
    2dda:	0023      	movs	r3, r4
    2ddc:	3344      	adds	r3, #68	; 0x44
    2dde:	4299      	cmp	r1, r3
    2de0:	d002      	beq.n	2de8 <__sflush_r+0x94>
    2de2:	0028      	movs	r0, r5
    2de4:	f000 f9ba 	bl	315c <_free_r>
    2de8:	2000      	movs	r0, #0
    2dea:	6360      	str	r0, [r4, #52]	; 0x34
    2dec:	e7bf      	b.n	2d6e <__sflush_r+0x1a>
    2dee:	2301      	movs	r3, #1
    2df0:	6a21      	ldr	r1, [r4, #32]
    2df2:	0028      	movs	r0, r5
    2df4:	47b8      	blx	r7
    2df6:	1c43      	adds	r3, r0, #1
    2df8:	d1c5      	bne.n	2d86 <__sflush_r+0x32>
    2dfa:	682b      	ldr	r3, [r5, #0]
    2dfc:	2b00      	cmp	r3, #0
    2dfe:	d0c2      	beq.n	2d86 <__sflush_r+0x32>
    2e00:	2b1d      	cmp	r3, #29
    2e02:	d001      	beq.n	2e08 <__sflush_r+0xb4>
    2e04:	2b16      	cmp	r3, #22
    2e06:	d101      	bne.n	2e0c <__sflush_r+0xb8>
    2e08:	602e      	str	r6, [r5, #0]
    2e0a:	e7af      	b.n	2d6c <__sflush_r+0x18>
    2e0c:	2340      	movs	r3, #64	; 0x40
    2e0e:	89a2      	ldrh	r2, [r4, #12]
    2e10:	4313      	orrs	r3, r2
    2e12:	81a3      	strh	r3, [r4, #12]
    2e14:	e7ab      	b.n	2d6e <__sflush_r+0x1a>
    2e16:	2340      	movs	r3, #64	; 0x40
    2e18:	430b      	orrs	r3, r1
    2e1a:	2001      	movs	r0, #1
    2e1c:	81a3      	strh	r3, [r4, #12]
    2e1e:	4240      	negs	r0, r0
    2e20:	e7a5      	b.n	2d6e <__sflush_r+0x1a>
    2e22:	690f      	ldr	r7, [r1, #16]
    2e24:	2f00      	cmp	r7, #0
    2e26:	d0a1      	beq.n	2d6c <__sflush_r+0x18>
    2e28:	680b      	ldr	r3, [r1, #0]
    2e2a:	600f      	str	r7, [r1, #0]
    2e2c:	1bdb      	subs	r3, r3, r7
    2e2e:	9301      	str	r3, [sp, #4]
    2e30:	2300      	movs	r3, #0
    2e32:	0792      	lsls	r2, r2, #30
    2e34:	d100      	bne.n	2e38 <__sflush_r+0xe4>
    2e36:	694b      	ldr	r3, [r1, #20]
    2e38:	60a3      	str	r3, [r4, #8]
    2e3a:	9b01      	ldr	r3, [sp, #4]
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	dc00      	bgt.n	2e42 <__sflush_r+0xee>
    2e40:	e794      	b.n	2d6c <__sflush_r+0x18>
    2e42:	9b01      	ldr	r3, [sp, #4]
    2e44:	003a      	movs	r2, r7
    2e46:	6a21      	ldr	r1, [r4, #32]
    2e48:	0028      	movs	r0, r5
    2e4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2e4c:	47b0      	blx	r6
    2e4e:	2800      	cmp	r0, #0
    2e50:	dc03      	bgt.n	2e5a <__sflush_r+0x106>
    2e52:	2340      	movs	r3, #64	; 0x40
    2e54:	89a2      	ldrh	r2, [r4, #12]
    2e56:	4313      	orrs	r3, r2
    2e58:	e7df      	b.n	2e1a <__sflush_r+0xc6>
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	183f      	adds	r7, r7, r0
    2e5e:	1a1b      	subs	r3, r3, r0
    2e60:	9301      	str	r3, [sp, #4]
    2e62:	e7ea      	b.n	2e3a <__sflush_r+0xe6>
    2e64:	20400001 	.word	0x20400001

00002e68 <_fflush_r>:
    2e68:	690b      	ldr	r3, [r1, #16]
    2e6a:	b570      	push	{r4, r5, r6, lr}
    2e6c:	0005      	movs	r5, r0
    2e6e:	000c      	movs	r4, r1
    2e70:	2b00      	cmp	r3, #0
    2e72:	d101      	bne.n	2e78 <_fflush_r+0x10>
    2e74:	2000      	movs	r0, #0
    2e76:	bd70      	pop	{r4, r5, r6, pc}
    2e78:	2800      	cmp	r0, #0
    2e7a:	d004      	beq.n	2e86 <_fflush_r+0x1e>
    2e7c:	6983      	ldr	r3, [r0, #24]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d101      	bne.n	2e86 <_fflush_r+0x1e>
    2e82:	f000 f85f 	bl	2f44 <__sinit>
    2e86:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <_fflush_r+0x4c>)
    2e88:	429c      	cmp	r4, r3
    2e8a:	d109      	bne.n	2ea0 <_fflush_r+0x38>
    2e8c:	686c      	ldr	r4, [r5, #4]
    2e8e:	220c      	movs	r2, #12
    2e90:	5ea3      	ldrsh	r3, [r4, r2]
    2e92:	2b00      	cmp	r3, #0
    2e94:	d0ee      	beq.n	2e74 <_fflush_r+0xc>
    2e96:	0021      	movs	r1, r4
    2e98:	0028      	movs	r0, r5
    2e9a:	f7ff ff5b 	bl	2d54 <__sflush_r>
    2e9e:	e7ea      	b.n	2e76 <_fflush_r+0xe>
    2ea0:	4b05      	ldr	r3, [pc, #20]	; (2eb8 <_fflush_r+0x50>)
    2ea2:	429c      	cmp	r4, r3
    2ea4:	d101      	bne.n	2eaa <_fflush_r+0x42>
    2ea6:	68ac      	ldr	r4, [r5, #8]
    2ea8:	e7f1      	b.n	2e8e <_fflush_r+0x26>
    2eaa:	4b04      	ldr	r3, [pc, #16]	; (2ebc <_fflush_r+0x54>)
    2eac:	429c      	cmp	r4, r3
    2eae:	d1ee      	bne.n	2e8e <_fflush_r+0x26>
    2eb0:	68ec      	ldr	r4, [r5, #12]
    2eb2:	e7ec      	b.n	2e8e <_fflush_r+0x26>
    2eb4:	00004274 	.word	0x00004274
    2eb8:	00004294 	.word	0x00004294
    2ebc:	00004254 	.word	0x00004254

00002ec0 <_cleanup_r>:
    2ec0:	b510      	push	{r4, lr}
    2ec2:	4902      	ldr	r1, [pc, #8]	; (2ecc <_cleanup_r+0xc>)
    2ec4:	f000 f8b2 	bl	302c <_fwalk_reent>
    2ec8:	bd10      	pop	{r4, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	00002e69 	.word	0x00002e69

00002ed0 <std.isra.0>:
    2ed0:	2300      	movs	r3, #0
    2ed2:	b510      	push	{r4, lr}
    2ed4:	0004      	movs	r4, r0
    2ed6:	6003      	str	r3, [r0, #0]
    2ed8:	6043      	str	r3, [r0, #4]
    2eda:	6083      	str	r3, [r0, #8]
    2edc:	8181      	strh	r1, [r0, #12]
    2ede:	6643      	str	r3, [r0, #100]	; 0x64
    2ee0:	81c2      	strh	r2, [r0, #14]
    2ee2:	6103      	str	r3, [r0, #16]
    2ee4:	6143      	str	r3, [r0, #20]
    2ee6:	6183      	str	r3, [r0, #24]
    2ee8:	0019      	movs	r1, r3
    2eea:	2208      	movs	r2, #8
    2eec:	305c      	adds	r0, #92	; 0x5c
    2eee:	f7ff fd6b 	bl	29c8 <memset>
    2ef2:	4b05      	ldr	r3, [pc, #20]	; (2f08 <std.isra.0+0x38>)
    2ef4:	6224      	str	r4, [r4, #32]
    2ef6:	6263      	str	r3, [r4, #36]	; 0x24
    2ef8:	4b04      	ldr	r3, [pc, #16]	; (2f0c <std.isra.0+0x3c>)
    2efa:	62a3      	str	r3, [r4, #40]	; 0x28
    2efc:	4b04      	ldr	r3, [pc, #16]	; (2f10 <std.isra.0+0x40>)
    2efe:	62e3      	str	r3, [r4, #44]	; 0x2c
    2f00:	4b04      	ldr	r3, [pc, #16]	; (2f14 <std.isra.0+0x44>)
    2f02:	6323      	str	r3, [r4, #48]	; 0x30
    2f04:	bd10      	pop	{r4, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	00003b35 	.word	0x00003b35
    2f0c:	00003b5d 	.word	0x00003b5d
    2f10:	00003b95 	.word	0x00003b95
    2f14:	00003bc1 	.word	0x00003bc1

00002f18 <__sfmoreglue>:
    2f18:	b570      	push	{r4, r5, r6, lr}
    2f1a:	2568      	movs	r5, #104	; 0x68
    2f1c:	1e4a      	subs	r2, r1, #1
    2f1e:	4355      	muls	r5, r2
    2f20:	000e      	movs	r6, r1
    2f22:	0029      	movs	r1, r5
    2f24:	3174      	adds	r1, #116	; 0x74
    2f26:	f000 f963 	bl	31f0 <_malloc_r>
    2f2a:	1e04      	subs	r4, r0, #0
    2f2c:	d008      	beq.n	2f40 <__sfmoreglue+0x28>
    2f2e:	2100      	movs	r1, #0
    2f30:	002a      	movs	r2, r5
    2f32:	6001      	str	r1, [r0, #0]
    2f34:	6046      	str	r6, [r0, #4]
    2f36:	300c      	adds	r0, #12
    2f38:	60a0      	str	r0, [r4, #8]
    2f3a:	3268      	adds	r2, #104	; 0x68
    2f3c:	f7ff fd44 	bl	29c8 <memset>
    2f40:	0020      	movs	r0, r4
    2f42:	bd70      	pop	{r4, r5, r6, pc}

00002f44 <__sinit>:
    2f44:	6983      	ldr	r3, [r0, #24]
    2f46:	b513      	push	{r0, r1, r4, lr}
    2f48:	0004      	movs	r4, r0
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d128      	bne.n	2fa0 <__sinit+0x5c>
    2f4e:	6483      	str	r3, [r0, #72]	; 0x48
    2f50:	64c3      	str	r3, [r0, #76]	; 0x4c
    2f52:	6503      	str	r3, [r0, #80]	; 0x50
    2f54:	4b13      	ldr	r3, [pc, #76]	; (2fa4 <__sinit+0x60>)
    2f56:	4a14      	ldr	r2, [pc, #80]	; (2fa8 <__sinit+0x64>)
    2f58:	681b      	ldr	r3, [r3, #0]
    2f5a:	6282      	str	r2, [r0, #40]	; 0x28
    2f5c:	9301      	str	r3, [sp, #4]
    2f5e:	4298      	cmp	r0, r3
    2f60:	d101      	bne.n	2f66 <__sinit+0x22>
    2f62:	2301      	movs	r3, #1
    2f64:	6183      	str	r3, [r0, #24]
    2f66:	0020      	movs	r0, r4
    2f68:	f000 f820 	bl	2fac <__sfp>
    2f6c:	6060      	str	r0, [r4, #4]
    2f6e:	0020      	movs	r0, r4
    2f70:	f000 f81c 	bl	2fac <__sfp>
    2f74:	60a0      	str	r0, [r4, #8]
    2f76:	0020      	movs	r0, r4
    2f78:	f000 f818 	bl	2fac <__sfp>
    2f7c:	2200      	movs	r2, #0
    2f7e:	60e0      	str	r0, [r4, #12]
    2f80:	2104      	movs	r1, #4
    2f82:	6860      	ldr	r0, [r4, #4]
    2f84:	f7ff ffa4 	bl	2ed0 <std.isra.0>
    2f88:	2201      	movs	r2, #1
    2f8a:	2109      	movs	r1, #9
    2f8c:	68a0      	ldr	r0, [r4, #8]
    2f8e:	f7ff ff9f 	bl	2ed0 <std.isra.0>
    2f92:	2202      	movs	r2, #2
    2f94:	2112      	movs	r1, #18
    2f96:	68e0      	ldr	r0, [r4, #12]
    2f98:	f7ff ff9a 	bl	2ed0 <std.isra.0>
    2f9c:	2301      	movs	r3, #1
    2f9e:	61a3      	str	r3, [r4, #24]
    2fa0:	bd13      	pop	{r0, r1, r4, pc}
    2fa2:	46c0      	nop			; (mov r8, r8)
    2fa4:	00004250 	.word	0x00004250
    2fa8:	00002ec1 	.word	0x00002ec1

00002fac <__sfp>:
    2fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fae:	4b1e      	ldr	r3, [pc, #120]	; (3028 <__sfp+0x7c>)
    2fb0:	0007      	movs	r7, r0
    2fb2:	681e      	ldr	r6, [r3, #0]
    2fb4:	69b3      	ldr	r3, [r6, #24]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d102      	bne.n	2fc0 <__sfp+0x14>
    2fba:	0030      	movs	r0, r6
    2fbc:	f7ff ffc2 	bl	2f44 <__sinit>
    2fc0:	3648      	adds	r6, #72	; 0x48
    2fc2:	68b4      	ldr	r4, [r6, #8]
    2fc4:	6873      	ldr	r3, [r6, #4]
    2fc6:	3b01      	subs	r3, #1
    2fc8:	d504      	bpl.n	2fd4 <__sfp+0x28>
    2fca:	6833      	ldr	r3, [r6, #0]
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d007      	beq.n	2fe0 <__sfp+0x34>
    2fd0:	6836      	ldr	r6, [r6, #0]
    2fd2:	e7f6      	b.n	2fc2 <__sfp+0x16>
    2fd4:	220c      	movs	r2, #12
    2fd6:	5ea5      	ldrsh	r5, [r4, r2]
    2fd8:	2d00      	cmp	r5, #0
    2fda:	d00d      	beq.n	2ff8 <__sfp+0x4c>
    2fdc:	3468      	adds	r4, #104	; 0x68
    2fde:	e7f2      	b.n	2fc6 <__sfp+0x1a>
    2fe0:	2104      	movs	r1, #4
    2fe2:	0038      	movs	r0, r7
    2fe4:	f7ff ff98 	bl	2f18 <__sfmoreglue>
    2fe8:	6030      	str	r0, [r6, #0]
    2fea:	2800      	cmp	r0, #0
    2fec:	d1f0      	bne.n	2fd0 <__sfp+0x24>
    2fee:	230c      	movs	r3, #12
    2ff0:	0004      	movs	r4, r0
    2ff2:	603b      	str	r3, [r7, #0]
    2ff4:	0020      	movs	r0, r4
    2ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ff8:	2301      	movs	r3, #1
    2ffa:	0020      	movs	r0, r4
    2ffc:	425b      	negs	r3, r3
    2ffe:	81e3      	strh	r3, [r4, #14]
    3000:	3302      	adds	r3, #2
    3002:	81a3      	strh	r3, [r4, #12]
    3004:	6665      	str	r5, [r4, #100]	; 0x64
    3006:	6025      	str	r5, [r4, #0]
    3008:	60a5      	str	r5, [r4, #8]
    300a:	6065      	str	r5, [r4, #4]
    300c:	6125      	str	r5, [r4, #16]
    300e:	6165      	str	r5, [r4, #20]
    3010:	61a5      	str	r5, [r4, #24]
    3012:	2208      	movs	r2, #8
    3014:	0029      	movs	r1, r5
    3016:	305c      	adds	r0, #92	; 0x5c
    3018:	f7ff fcd6 	bl	29c8 <memset>
    301c:	6365      	str	r5, [r4, #52]	; 0x34
    301e:	63a5      	str	r5, [r4, #56]	; 0x38
    3020:	64a5      	str	r5, [r4, #72]	; 0x48
    3022:	64e5      	str	r5, [r4, #76]	; 0x4c
    3024:	e7e6      	b.n	2ff4 <__sfp+0x48>
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	00004250 	.word	0x00004250

0000302c <_fwalk_reent>:
    302c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    302e:	0004      	movs	r4, r0
    3030:	0007      	movs	r7, r0
    3032:	2600      	movs	r6, #0
    3034:	9101      	str	r1, [sp, #4]
    3036:	3448      	adds	r4, #72	; 0x48
    3038:	2c00      	cmp	r4, #0
    303a:	d101      	bne.n	3040 <_fwalk_reent+0x14>
    303c:	0030      	movs	r0, r6
    303e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3040:	6863      	ldr	r3, [r4, #4]
    3042:	68a5      	ldr	r5, [r4, #8]
    3044:	9300      	str	r3, [sp, #0]
    3046:	9b00      	ldr	r3, [sp, #0]
    3048:	3b01      	subs	r3, #1
    304a:	9300      	str	r3, [sp, #0]
    304c:	d501      	bpl.n	3052 <_fwalk_reent+0x26>
    304e:	6824      	ldr	r4, [r4, #0]
    3050:	e7f2      	b.n	3038 <_fwalk_reent+0xc>
    3052:	89ab      	ldrh	r3, [r5, #12]
    3054:	2b01      	cmp	r3, #1
    3056:	d908      	bls.n	306a <_fwalk_reent+0x3e>
    3058:	220e      	movs	r2, #14
    305a:	5eab      	ldrsh	r3, [r5, r2]
    305c:	3301      	adds	r3, #1
    305e:	d004      	beq.n	306a <_fwalk_reent+0x3e>
    3060:	0029      	movs	r1, r5
    3062:	0038      	movs	r0, r7
    3064:	9b01      	ldr	r3, [sp, #4]
    3066:	4798      	blx	r3
    3068:	4306      	orrs	r6, r0
    306a:	3568      	adds	r5, #104	; 0x68
    306c:	e7eb      	b.n	3046 <_fwalk_reent+0x1a>
	...

00003070 <__swhatbuf_r>:
    3070:	b570      	push	{r4, r5, r6, lr}
    3072:	000e      	movs	r6, r1
    3074:	001d      	movs	r5, r3
    3076:	230e      	movs	r3, #14
    3078:	5ec9      	ldrsh	r1, [r1, r3]
    307a:	b090      	sub	sp, #64	; 0x40
    307c:	0014      	movs	r4, r2
    307e:	2900      	cmp	r1, #0
    3080:	da07      	bge.n	3092 <__swhatbuf_r+0x22>
    3082:	2300      	movs	r3, #0
    3084:	602b      	str	r3, [r5, #0]
    3086:	89b3      	ldrh	r3, [r6, #12]
    3088:	061b      	lsls	r3, r3, #24
    308a:	d411      	bmi.n	30b0 <__swhatbuf_r+0x40>
    308c:	2380      	movs	r3, #128	; 0x80
    308e:	00db      	lsls	r3, r3, #3
    3090:	e00f      	b.n	30b2 <__swhatbuf_r+0x42>
    3092:	aa01      	add	r2, sp, #4
    3094:	f000 fdc0 	bl	3c18 <_fstat_r>
    3098:	2800      	cmp	r0, #0
    309a:	dbf2      	blt.n	3082 <__swhatbuf_r+0x12>
    309c:	22f0      	movs	r2, #240	; 0xf0
    309e:	9b02      	ldr	r3, [sp, #8]
    30a0:	0212      	lsls	r2, r2, #8
    30a2:	4013      	ands	r3, r2
    30a4:	4a05      	ldr	r2, [pc, #20]	; (30bc <__swhatbuf_r+0x4c>)
    30a6:	189b      	adds	r3, r3, r2
    30a8:	425a      	negs	r2, r3
    30aa:	4153      	adcs	r3, r2
    30ac:	602b      	str	r3, [r5, #0]
    30ae:	e7ed      	b.n	308c <__swhatbuf_r+0x1c>
    30b0:	2340      	movs	r3, #64	; 0x40
    30b2:	2000      	movs	r0, #0
    30b4:	6023      	str	r3, [r4, #0]
    30b6:	b010      	add	sp, #64	; 0x40
    30b8:	bd70      	pop	{r4, r5, r6, pc}
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	ffffe000 	.word	0xffffe000

000030c0 <__smakebuf_r>:
    30c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    30c2:	2602      	movs	r6, #2
    30c4:	898b      	ldrh	r3, [r1, #12]
    30c6:	0005      	movs	r5, r0
    30c8:	000c      	movs	r4, r1
    30ca:	4233      	tst	r3, r6
    30cc:	d006      	beq.n	30dc <__smakebuf_r+0x1c>
    30ce:	0023      	movs	r3, r4
    30d0:	3347      	adds	r3, #71	; 0x47
    30d2:	6023      	str	r3, [r4, #0]
    30d4:	6123      	str	r3, [r4, #16]
    30d6:	2301      	movs	r3, #1
    30d8:	6163      	str	r3, [r4, #20]
    30da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    30dc:	ab01      	add	r3, sp, #4
    30de:	466a      	mov	r2, sp
    30e0:	f7ff ffc6 	bl	3070 <__swhatbuf_r>
    30e4:	9900      	ldr	r1, [sp, #0]
    30e6:	0007      	movs	r7, r0
    30e8:	0028      	movs	r0, r5
    30ea:	f000 f881 	bl	31f0 <_malloc_r>
    30ee:	2800      	cmp	r0, #0
    30f0:	d108      	bne.n	3104 <__smakebuf_r+0x44>
    30f2:	220c      	movs	r2, #12
    30f4:	5ea3      	ldrsh	r3, [r4, r2]
    30f6:	059a      	lsls	r2, r3, #22
    30f8:	d4ef      	bmi.n	30da <__smakebuf_r+0x1a>
    30fa:	2203      	movs	r2, #3
    30fc:	4393      	bics	r3, r2
    30fe:	431e      	orrs	r6, r3
    3100:	81a6      	strh	r6, [r4, #12]
    3102:	e7e4      	b.n	30ce <__smakebuf_r+0xe>
    3104:	4b0f      	ldr	r3, [pc, #60]	; (3144 <__smakebuf_r+0x84>)
    3106:	62ab      	str	r3, [r5, #40]	; 0x28
    3108:	2380      	movs	r3, #128	; 0x80
    310a:	89a2      	ldrh	r2, [r4, #12]
    310c:	6020      	str	r0, [r4, #0]
    310e:	4313      	orrs	r3, r2
    3110:	81a3      	strh	r3, [r4, #12]
    3112:	9b00      	ldr	r3, [sp, #0]
    3114:	6120      	str	r0, [r4, #16]
    3116:	6163      	str	r3, [r4, #20]
    3118:	9b01      	ldr	r3, [sp, #4]
    311a:	2b00      	cmp	r3, #0
    311c:	d00d      	beq.n	313a <__smakebuf_r+0x7a>
    311e:	230e      	movs	r3, #14
    3120:	5ee1      	ldrsh	r1, [r4, r3]
    3122:	0028      	movs	r0, r5
    3124:	f000 fd8a 	bl	3c3c <_isatty_r>
    3128:	2800      	cmp	r0, #0
    312a:	d006      	beq.n	313a <__smakebuf_r+0x7a>
    312c:	2203      	movs	r2, #3
    312e:	89a3      	ldrh	r3, [r4, #12]
    3130:	4393      	bics	r3, r2
    3132:	001a      	movs	r2, r3
    3134:	2301      	movs	r3, #1
    3136:	4313      	orrs	r3, r2
    3138:	81a3      	strh	r3, [r4, #12]
    313a:	89a0      	ldrh	r0, [r4, #12]
    313c:	4338      	orrs	r0, r7
    313e:	81a0      	strh	r0, [r4, #12]
    3140:	e7cb      	b.n	30da <__smakebuf_r+0x1a>
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	00002ec1 	.word	0x00002ec1

00003148 <malloc>:
    3148:	b510      	push	{r4, lr}
    314a:	4b03      	ldr	r3, [pc, #12]	; (3158 <malloc+0x10>)
    314c:	0001      	movs	r1, r0
    314e:	6818      	ldr	r0, [r3, #0]
    3150:	f000 f84e 	bl	31f0 <_malloc_r>
    3154:	bd10      	pop	{r4, pc}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	2000005c 	.word	0x2000005c

0000315c <_free_r>:
    315c:	b570      	push	{r4, r5, r6, lr}
    315e:	0005      	movs	r5, r0
    3160:	2900      	cmp	r1, #0
    3162:	d010      	beq.n	3186 <_free_r+0x2a>
    3164:	1f0c      	subs	r4, r1, #4
    3166:	6823      	ldr	r3, [r4, #0]
    3168:	2b00      	cmp	r3, #0
    316a:	da00      	bge.n	316e <_free_r+0x12>
    316c:	18e4      	adds	r4, r4, r3
    316e:	0028      	movs	r0, r5
    3170:	f000 fdb0 	bl	3cd4 <__malloc_lock>
    3174:	4a1d      	ldr	r2, [pc, #116]	; (31ec <_free_r+0x90>)
    3176:	6813      	ldr	r3, [r2, #0]
    3178:	2b00      	cmp	r3, #0
    317a:	d105      	bne.n	3188 <_free_r+0x2c>
    317c:	6063      	str	r3, [r4, #4]
    317e:	6014      	str	r4, [r2, #0]
    3180:	0028      	movs	r0, r5
    3182:	f000 fda8 	bl	3cd6 <__malloc_unlock>
    3186:	bd70      	pop	{r4, r5, r6, pc}
    3188:	42a3      	cmp	r3, r4
    318a:	d909      	bls.n	31a0 <_free_r+0x44>
    318c:	6821      	ldr	r1, [r4, #0]
    318e:	1860      	adds	r0, r4, r1
    3190:	4283      	cmp	r3, r0
    3192:	d1f3      	bne.n	317c <_free_r+0x20>
    3194:	6818      	ldr	r0, [r3, #0]
    3196:	685b      	ldr	r3, [r3, #4]
    3198:	1841      	adds	r1, r0, r1
    319a:	6021      	str	r1, [r4, #0]
    319c:	e7ee      	b.n	317c <_free_r+0x20>
    319e:	0013      	movs	r3, r2
    31a0:	685a      	ldr	r2, [r3, #4]
    31a2:	2a00      	cmp	r2, #0
    31a4:	d001      	beq.n	31aa <_free_r+0x4e>
    31a6:	42a2      	cmp	r2, r4
    31a8:	d9f9      	bls.n	319e <_free_r+0x42>
    31aa:	6819      	ldr	r1, [r3, #0]
    31ac:	1858      	adds	r0, r3, r1
    31ae:	42a0      	cmp	r0, r4
    31b0:	d10b      	bne.n	31ca <_free_r+0x6e>
    31b2:	6820      	ldr	r0, [r4, #0]
    31b4:	1809      	adds	r1, r1, r0
    31b6:	1858      	adds	r0, r3, r1
    31b8:	6019      	str	r1, [r3, #0]
    31ba:	4282      	cmp	r2, r0
    31bc:	d1e0      	bne.n	3180 <_free_r+0x24>
    31be:	6810      	ldr	r0, [r2, #0]
    31c0:	6852      	ldr	r2, [r2, #4]
    31c2:	1841      	adds	r1, r0, r1
    31c4:	6019      	str	r1, [r3, #0]
    31c6:	605a      	str	r2, [r3, #4]
    31c8:	e7da      	b.n	3180 <_free_r+0x24>
    31ca:	42a0      	cmp	r0, r4
    31cc:	d902      	bls.n	31d4 <_free_r+0x78>
    31ce:	230c      	movs	r3, #12
    31d0:	602b      	str	r3, [r5, #0]
    31d2:	e7d5      	b.n	3180 <_free_r+0x24>
    31d4:	6821      	ldr	r1, [r4, #0]
    31d6:	1860      	adds	r0, r4, r1
    31d8:	4282      	cmp	r2, r0
    31da:	d103      	bne.n	31e4 <_free_r+0x88>
    31dc:	6810      	ldr	r0, [r2, #0]
    31de:	6852      	ldr	r2, [r2, #4]
    31e0:	1841      	adds	r1, r0, r1
    31e2:	6021      	str	r1, [r4, #0]
    31e4:	6062      	str	r2, [r4, #4]
    31e6:	605c      	str	r4, [r3, #4]
    31e8:	e7ca      	b.n	3180 <_free_r+0x24>
    31ea:	46c0      	nop			; (mov r8, r8)
    31ec:	2000014c 	.word	0x2000014c

000031f0 <_malloc_r>:
    31f0:	2303      	movs	r3, #3
    31f2:	b570      	push	{r4, r5, r6, lr}
    31f4:	1ccd      	adds	r5, r1, #3
    31f6:	439d      	bics	r5, r3
    31f8:	3508      	adds	r5, #8
    31fa:	0006      	movs	r6, r0
    31fc:	2d0c      	cmp	r5, #12
    31fe:	d21e      	bcs.n	323e <_malloc_r+0x4e>
    3200:	250c      	movs	r5, #12
    3202:	42a9      	cmp	r1, r5
    3204:	d81d      	bhi.n	3242 <_malloc_r+0x52>
    3206:	0030      	movs	r0, r6
    3208:	f000 fd64 	bl	3cd4 <__malloc_lock>
    320c:	4a25      	ldr	r2, [pc, #148]	; (32a4 <_malloc_r+0xb4>)
    320e:	6814      	ldr	r4, [r2, #0]
    3210:	0021      	movs	r1, r4
    3212:	2900      	cmp	r1, #0
    3214:	d119      	bne.n	324a <_malloc_r+0x5a>
    3216:	4c24      	ldr	r4, [pc, #144]	; (32a8 <_malloc_r+0xb8>)
    3218:	6823      	ldr	r3, [r4, #0]
    321a:	2b00      	cmp	r3, #0
    321c:	d103      	bne.n	3226 <_malloc_r+0x36>
    321e:	0030      	movs	r0, r6
    3220:	f000 fc76 	bl	3b10 <_sbrk_r>
    3224:	6020      	str	r0, [r4, #0]
    3226:	0029      	movs	r1, r5
    3228:	0030      	movs	r0, r6
    322a:	f000 fc71 	bl	3b10 <_sbrk_r>
    322e:	1c43      	adds	r3, r0, #1
    3230:	d12c      	bne.n	328c <_malloc_r+0x9c>
    3232:	230c      	movs	r3, #12
    3234:	0030      	movs	r0, r6
    3236:	6033      	str	r3, [r6, #0]
    3238:	f000 fd4d 	bl	3cd6 <__malloc_unlock>
    323c:	e003      	b.n	3246 <_malloc_r+0x56>
    323e:	2d00      	cmp	r5, #0
    3240:	dadf      	bge.n	3202 <_malloc_r+0x12>
    3242:	230c      	movs	r3, #12
    3244:	6033      	str	r3, [r6, #0]
    3246:	2000      	movs	r0, #0
    3248:	bd70      	pop	{r4, r5, r6, pc}
    324a:	680b      	ldr	r3, [r1, #0]
    324c:	1b5b      	subs	r3, r3, r5
    324e:	d41a      	bmi.n	3286 <_malloc_r+0x96>
    3250:	2b0b      	cmp	r3, #11
    3252:	d903      	bls.n	325c <_malloc_r+0x6c>
    3254:	600b      	str	r3, [r1, #0]
    3256:	18cc      	adds	r4, r1, r3
    3258:	6025      	str	r5, [r4, #0]
    325a:	e003      	b.n	3264 <_malloc_r+0x74>
    325c:	428c      	cmp	r4, r1
    325e:	d10e      	bne.n	327e <_malloc_r+0x8e>
    3260:	6863      	ldr	r3, [r4, #4]
    3262:	6013      	str	r3, [r2, #0]
    3264:	0030      	movs	r0, r6
    3266:	f000 fd36 	bl	3cd6 <__malloc_unlock>
    326a:	0020      	movs	r0, r4
    326c:	2207      	movs	r2, #7
    326e:	300b      	adds	r0, #11
    3270:	1d23      	adds	r3, r4, #4
    3272:	4390      	bics	r0, r2
    3274:	1ac3      	subs	r3, r0, r3
    3276:	d0e7      	beq.n	3248 <_malloc_r+0x58>
    3278:	425a      	negs	r2, r3
    327a:	50e2      	str	r2, [r4, r3]
    327c:	e7e4      	b.n	3248 <_malloc_r+0x58>
    327e:	684b      	ldr	r3, [r1, #4]
    3280:	6063      	str	r3, [r4, #4]
    3282:	000c      	movs	r4, r1
    3284:	e7ee      	b.n	3264 <_malloc_r+0x74>
    3286:	000c      	movs	r4, r1
    3288:	6849      	ldr	r1, [r1, #4]
    328a:	e7c2      	b.n	3212 <_malloc_r+0x22>
    328c:	2303      	movs	r3, #3
    328e:	1cc4      	adds	r4, r0, #3
    3290:	439c      	bics	r4, r3
    3292:	42a0      	cmp	r0, r4
    3294:	d0e0      	beq.n	3258 <_malloc_r+0x68>
    3296:	1a21      	subs	r1, r4, r0
    3298:	0030      	movs	r0, r6
    329a:	f000 fc39 	bl	3b10 <_sbrk_r>
    329e:	1c43      	adds	r3, r0, #1
    32a0:	d1da      	bne.n	3258 <_malloc_r+0x68>
    32a2:	e7c6      	b.n	3232 <_malloc_r+0x42>
    32a4:	2000014c 	.word	0x2000014c
    32a8:	20000150 	.word	0x20000150

000032ac <__ssputs_r>:
    32ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ae:	688e      	ldr	r6, [r1, #8]
    32b0:	b085      	sub	sp, #20
    32b2:	0007      	movs	r7, r0
    32b4:	000c      	movs	r4, r1
    32b6:	9203      	str	r2, [sp, #12]
    32b8:	9301      	str	r3, [sp, #4]
    32ba:	429e      	cmp	r6, r3
    32bc:	d839      	bhi.n	3332 <__ssputs_r+0x86>
    32be:	2390      	movs	r3, #144	; 0x90
    32c0:	898a      	ldrh	r2, [r1, #12]
    32c2:	00db      	lsls	r3, r3, #3
    32c4:	421a      	tst	r2, r3
    32c6:	d034      	beq.n	3332 <__ssputs_r+0x86>
    32c8:	2503      	movs	r5, #3
    32ca:	6909      	ldr	r1, [r1, #16]
    32cc:	6823      	ldr	r3, [r4, #0]
    32ce:	1a5b      	subs	r3, r3, r1
    32d0:	9302      	str	r3, [sp, #8]
    32d2:	6963      	ldr	r3, [r4, #20]
    32d4:	9802      	ldr	r0, [sp, #8]
    32d6:	435d      	muls	r5, r3
    32d8:	0feb      	lsrs	r3, r5, #31
    32da:	195d      	adds	r5, r3, r5
    32dc:	9b01      	ldr	r3, [sp, #4]
    32de:	106d      	asrs	r5, r5, #1
    32e0:	3301      	adds	r3, #1
    32e2:	181b      	adds	r3, r3, r0
    32e4:	42ab      	cmp	r3, r5
    32e6:	d900      	bls.n	32ea <__ssputs_r+0x3e>
    32e8:	001d      	movs	r5, r3
    32ea:	0553      	lsls	r3, r2, #21
    32ec:	d532      	bpl.n	3354 <__ssputs_r+0xa8>
    32ee:	0029      	movs	r1, r5
    32f0:	0038      	movs	r0, r7
    32f2:	f7ff ff7d 	bl	31f0 <_malloc_r>
    32f6:	1e06      	subs	r6, r0, #0
    32f8:	d109      	bne.n	330e <__ssputs_r+0x62>
    32fa:	230c      	movs	r3, #12
    32fc:	603b      	str	r3, [r7, #0]
    32fe:	2340      	movs	r3, #64	; 0x40
    3300:	2001      	movs	r0, #1
    3302:	89a2      	ldrh	r2, [r4, #12]
    3304:	4240      	negs	r0, r0
    3306:	4313      	orrs	r3, r2
    3308:	81a3      	strh	r3, [r4, #12]
    330a:	b005      	add	sp, #20
    330c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    330e:	9a02      	ldr	r2, [sp, #8]
    3310:	6921      	ldr	r1, [r4, #16]
    3312:	f000 fcc4 	bl	3c9e <memcpy>
    3316:	89a3      	ldrh	r3, [r4, #12]
    3318:	4a14      	ldr	r2, [pc, #80]	; (336c <__ssputs_r+0xc0>)
    331a:	401a      	ands	r2, r3
    331c:	2380      	movs	r3, #128	; 0x80
    331e:	4313      	orrs	r3, r2
    3320:	81a3      	strh	r3, [r4, #12]
    3322:	9b02      	ldr	r3, [sp, #8]
    3324:	6126      	str	r6, [r4, #16]
    3326:	18f6      	adds	r6, r6, r3
    3328:	6026      	str	r6, [r4, #0]
    332a:	6165      	str	r5, [r4, #20]
    332c:	9e01      	ldr	r6, [sp, #4]
    332e:	1aed      	subs	r5, r5, r3
    3330:	60a5      	str	r5, [r4, #8]
    3332:	9b01      	ldr	r3, [sp, #4]
    3334:	42b3      	cmp	r3, r6
    3336:	d200      	bcs.n	333a <__ssputs_r+0x8e>
    3338:	001e      	movs	r6, r3
    333a:	0032      	movs	r2, r6
    333c:	9903      	ldr	r1, [sp, #12]
    333e:	6820      	ldr	r0, [r4, #0]
    3340:	f000 fcb6 	bl	3cb0 <memmove>
    3344:	68a3      	ldr	r3, [r4, #8]
    3346:	2000      	movs	r0, #0
    3348:	1b9b      	subs	r3, r3, r6
    334a:	60a3      	str	r3, [r4, #8]
    334c:	6823      	ldr	r3, [r4, #0]
    334e:	199e      	adds	r6, r3, r6
    3350:	6026      	str	r6, [r4, #0]
    3352:	e7da      	b.n	330a <__ssputs_r+0x5e>
    3354:	002a      	movs	r2, r5
    3356:	0038      	movs	r0, r7
    3358:	f000 fcbe 	bl	3cd8 <_realloc_r>
    335c:	1e06      	subs	r6, r0, #0
    335e:	d1e0      	bne.n	3322 <__ssputs_r+0x76>
    3360:	6921      	ldr	r1, [r4, #16]
    3362:	0038      	movs	r0, r7
    3364:	f7ff fefa 	bl	315c <_free_r>
    3368:	e7c7      	b.n	32fa <__ssputs_r+0x4e>
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	fffffb7f 	.word	0xfffffb7f

00003370 <_svfiprintf_r>:
    3370:	b5f0      	push	{r4, r5, r6, r7, lr}
    3372:	b09f      	sub	sp, #124	; 0x7c
    3374:	9002      	str	r0, [sp, #8]
    3376:	9305      	str	r3, [sp, #20]
    3378:	898b      	ldrh	r3, [r1, #12]
    337a:	000f      	movs	r7, r1
    337c:	0016      	movs	r6, r2
    337e:	061b      	lsls	r3, r3, #24
    3380:	d511      	bpl.n	33a6 <_svfiprintf_r+0x36>
    3382:	690b      	ldr	r3, [r1, #16]
    3384:	2b00      	cmp	r3, #0
    3386:	d10e      	bne.n	33a6 <_svfiprintf_r+0x36>
    3388:	2140      	movs	r1, #64	; 0x40
    338a:	f7ff ff31 	bl	31f0 <_malloc_r>
    338e:	6038      	str	r0, [r7, #0]
    3390:	6138      	str	r0, [r7, #16]
    3392:	2800      	cmp	r0, #0
    3394:	d105      	bne.n	33a2 <_svfiprintf_r+0x32>
    3396:	230c      	movs	r3, #12
    3398:	9a02      	ldr	r2, [sp, #8]
    339a:	3801      	subs	r0, #1
    339c:	6013      	str	r3, [r2, #0]
    339e:	b01f      	add	sp, #124	; 0x7c
    33a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33a2:	2340      	movs	r3, #64	; 0x40
    33a4:	617b      	str	r3, [r7, #20]
    33a6:	2300      	movs	r3, #0
    33a8:	ad06      	add	r5, sp, #24
    33aa:	616b      	str	r3, [r5, #20]
    33ac:	3320      	adds	r3, #32
    33ae:	766b      	strb	r3, [r5, #25]
    33b0:	3310      	adds	r3, #16
    33b2:	76ab      	strb	r3, [r5, #26]
    33b4:	0034      	movs	r4, r6
    33b6:	7823      	ldrb	r3, [r4, #0]
    33b8:	2b00      	cmp	r3, #0
    33ba:	d147      	bne.n	344c <_svfiprintf_r+0xdc>
    33bc:	1ba3      	subs	r3, r4, r6
    33be:	9304      	str	r3, [sp, #16]
    33c0:	d00d      	beq.n	33de <_svfiprintf_r+0x6e>
    33c2:	1ba3      	subs	r3, r4, r6
    33c4:	0032      	movs	r2, r6
    33c6:	0039      	movs	r1, r7
    33c8:	9802      	ldr	r0, [sp, #8]
    33ca:	f7ff ff6f 	bl	32ac <__ssputs_r>
    33ce:	1c43      	adds	r3, r0, #1
    33d0:	d100      	bne.n	33d4 <_svfiprintf_r+0x64>
    33d2:	e0b5      	b.n	3540 <_svfiprintf_r+0x1d0>
    33d4:	696a      	ldr	r2, [r5, #20]
    33d6:	9b04      	ldr	r3, [sp, #16]
    33d8:	4694      	mov	ip, r2
    33da:	4463      	add	r3, ip
    33dc:	616b      	str	r3, [r5, #20]
    33de:	7823      	ldrb	r3, [r4, #0]
    33e0:	2b00      	cmp	r3, #0
    33e2:	d100      	bne.n	33e6 <_svfiprintf_r+0x76>
    33e4:	e0ac      	b.n	3540 <_svfiprintf_r+0x1d0>
    33e6:	2201      	movs	r2, #1
    33e8:	2300      	movs	r3, #0
    33ea:	4252      	negs	r2, r2
    33ec:	606a      	str	r2, [r5, #4]
    33ee:	a902      	add	r1, sp, #8
    33f0:	3254      	adds	r2, #84	; 0x54
    33f2:	1852      	adds	r2, r2, r1
    33f4:	3401      	adds	r4, #1
    33f6:	602b      	str	r3, [r5, #0]
    33f8:	60eb      	str	r3, [r5, #12]
    33fa:	60ab      	str	r3, [r5, #8]
    33fc:	7013      	strb	r3, [r2, #0]
    33fe:	65ab      	str	r3, [r5, #88]	; 0x58
    3400:	4e58      	ldr	r6, [pc, #352]	; (3564 <_svfiprintf_r+0x1f4>)
    3402:	2205      	movs	r2, #5
    3404:	7821      	ldrb	r1, [r4, #0]
    3406:	0030      	movs	r0, r6
    3408:	f000 fc3e 	bl	3c88 <memchr>
    340c:	1c62      	adds	r2, r4, #1
    340e:	2800      	cmp	r0, #0
    3410:	d120      	bne.n	3454 <_svfiprintf_r+0xe4>
    3412:	6829      	ldr	r1, [r5, #0]
    3414:	06cb      	lsls	r3, r1, #27
    3416:	d504      	bpl.n	3422 <_svfiprintf_r+0xb2>
    3418:	2353      	movs	r3, #83	; 0x53
    341a:	ae02      	add	r6, sp, #8
    341c:	3020      	adds	r0, #32
    341e:	199b      	adds	r3, r3, r6
    3420:	7018      	strb	r0, [r3, #0]
    3422:	070b      	lsls	r3, r1, #28
    3424:	d504      	bpl.n	3430 <_svfiprintf_r+0xc0>
    3426:	2353      	movs	r3, #83	; 0x53
    3428:	202b      	movs	r0, #43	; 0x2b
    342a:	ae02      	add	r6, sp, #8
    342c:	199b      	adds	r3, r3, r6
    342e:	7018      	strb	r0, [r3, #0]
    3430:	7823      	ldrb	r3, [r4, #0]
    3432:	2b2a      	cmp	r3, #42	; 0x2a
    3434:	d016      	beq.n	3464 <_svfiprintf_r+0xf4>
    3436:	2000      	movs	r0, #0
    3438:	210a      	movs	r1, #10
    343a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    343c:	7822      	ldrb	r2, [r4, #0]
    343e:	3a30      	subs	r2, #48	; 0x30
    3440:	2a09      	cmp	r2, #9
    3442:	d955      	bls.n	34f0 <_svfiprintf_r+0x180>
    3444:	2800      	cmp	r0, #0
    3446:	d015      	beq.n	3474 <_svfiprintf_r+0x104>
    3448:	9309      	str	r3, [sp, #36]	; 0x24
    344a:	e013      	b.n	3474 <_svfiprintf_r+0x104>
    344c:	2b25      	cmp	r3, #37	; 0x25
    344e:	d0b5      	beq.n	33bc <_svfiprintf_r+0x4c>
    3450:	3401      	adds	r4, #1
    3452:	e7b0      	b.n	33b6 <_svfiprintf_r+0x46>
    3454:	2301      	movs	r3, #1
    3456:	1b80      	subs	r0, r0, r6
    3458:	4083      	lsls	r3, r0
    345a:	6829      	ldr	r1, [r5, #0]
    345c:	0014      	movs	r4, r2
    345e:	430b      	orrs	r3, r1
    3460:	602b      	str	r3, [r5, #0]
    3462:	e7cd      	b.n	3400 <_svfiprintf_r+0x90>
    3464:	9b05      	ldr	r3, [sp, #20]
    3466:	1d18      	adds	r0, r3, #4
    3468:	681b      	ldr	r3, [r3, #0]
    346a:	9005      	str	r0, [sp, #20]
    346c:	2b00      	cmp	r3, #0
    346e:	db39      	blt.n	34e4 <_svfiprintf_r+0x174>
    3470:	9309      	str	r3, [sp, #36]	; 0x24
    3472:	0014      	movs	r4, r2
    3474:	7823      	ldrb	r3, [r4, #0]
    3476:	2b2e      	cmp	r3, #46	; 0x2e
    3478:	d10b      	bne.n	3492 <_svfiprintf_r+0x122>
    347a:	7863      	ldrb	r3, [r4, #1]
    347c:	1c62      	adds	r2, r4, #1
    347e:	2b2a      	cmp	r3, #42	; 0x2a
    3480:	d13e      	bne.n	3500 <_svfiprintf_r+0x190>
    3482:	9b05      	ldr	r3, [sp, #20]
    3484:	3402      	adds	r4, #2
    3486:	1d1a      	adds	r2, r3, #4
    3488:	681b      	ldr	r3, [r3, #0]
    348a:	9205      	str	r2, [sp, #20]
    348c:	2b00      	cmp	r3, #0
    348e:	db34      	blt.n	34fa <_svfiprintf_r+0x18a>
    3490:	9307      	str	r3, [sp, #28]
    3492:	4e35      	ldr	r6, [pc, #212]	; (3568 <_svfiprintf_r+0x1f8>)
    3494:	7821      	ldrb	r1, [r4, #0]
    3496:	2203      	movs	r2, #3
    3498:	0030      	movs	r0, r6
    349a:	f000 fbf5 	bl	3c88 <memchr>
    349e:	2800      	cmp	r0, #0
    34a0:	d006      	beq.n	34b0 <_svfiprintf_r+0x140>
    34a2:	2340      	movs	r3, #64	; 0x40
    34a4:	1b80      	subs	r0, r0, r6
    34a6:	4083      	lsls	r3, r0
    34a8:	682a      	ldr	r2, [r5, #0]
    34aa:	3401      	adds	r4, #1
    34ac:	4313      	orrs	r3, r2
    34ae:	602b      	str	r3, [r5, #0]
    34b0:	7821      	ldrb	r1, [r4, #0]
    34b2:	2206      	movs	r2, #6
    34b4:	482d      	ldr	r0, [pc, #180]	; (356c <_svfiprintf_r+0x1fc>)
    34b6:	1c66      	adds	r6, r4, #1
    34b8:	7629      	strb	r1, [r5, #24]
    34ba:	f000 fbe5 	bl	3c88 <memchr>
    34be:	2800      	cmp	r0, #0
    34c0:	d046      	beq.n	3550 <_svfiprintf_r+0x1e0>
    34c2:	4b2b      	ldr	r3, [pc, #172]	; (3570 <_svfiprintf_r+0x200>)
    34c4:	2b00      	cmp	r3, #0
    34c6:	d12f      	bne.n	3528 <_svfiprintf_r+0x1b8>
    34c8:	6829      	ldr	r1, [r5, #0]
    34ca:	9b05      	ldr	r3, [sp, #20]
    34cc:	2207      	movs	r2, #7
    34ce:	05c9      	lsls	r1, r1, #23
    34d0:	d528      	bpl.n	3524 <_svfiprintf_r+0x1b4>
    34d2:	189b      	adds	r3, r3, r2
    34d4:	4393      	bics	r3, r2
    34d6:	3308      	adds	r3, #8
    34d8:	9305      	str	r3, [sp, #20]
    34da:	696b      	ldr	r3, [r5, #20]
    34dc:	9a03      	ldr	r2, [sp, #12]
    34de:	189b      	adds	r3, r3, r2
    34e0:	616b      	str	r3, [r5, #20]
    34e2:	e767      	b.n	33b4 <_svfiprintf_r+0x44>
    34e4:	425b      	negs	r3, r3
    34e6:	60eb      	str	r3, [r5, #12]
    34e8:	2302      	movs	r3, #2
    34ea:	430b      	orrs	r3, r1
    34ec:	602b      	str	r3, [r5, #0]
    34ee:	e7c0      	b.n	3472 <_svfiprintf_r+0x102>
    34f0:	434b      	muls	r3, r1
    34f2:	3401      	adds	r4, #1
    34f4:	189b      	adds	r3, r3, r2
    34f6:	2001      	movs	r0, #1
    34f8:	e7a0      	b.n	343c <_svfiprintf_r+0xcc>
    34fa:	2301      	movs	r3, #1
    34fc:	425b      	negs	r3, r3
    34fe:	e7c7      	b.n	3490 <_svfiprintf_r+0x120>
    3500:	2300      	movs	r3, #0
    3502:	0014      	movs	r4, r2
    3504:	200a      	movs	r0, #10
    3506:	001a      	movs	r2, r3
    3508:	606b      	str	r3, [r5, #4]
    350a:	7821      	ldrb	r1, [r4, #0]
    350c:	3930      	subs	r1, #48	; 0x30
    350e:	2909      	cmp	r1, #9
    3510:	d903      	bls.n	351a <_svfiprintf_r+0x1aa>
    3512:	2b00      	cmp	r3, #0
    3514:	d0bd      	beq.n	3492 <_svfiprintf_r+0x122>
    3516:	9207      	str	r2, [sp, #28]
    3518:	e7bb      	b.n	3492 <_svfiprintf_r+0x122>
    351a:	4342      	muls	r2, r0
    351c:	3401      	adds	r4, #1
    351e:	1852      	adds	r2, r2, r1
    3520:	2301      	movs	r3, #1
    3522:	e7f2      	b.n	350a <_svfiprintf_r+0x19a>
    3524:	3307      	adds	r3, #7
    3526:	e7d5      	b.n	34d4 <_svfiprintf_r+0x164>
    3528:	ab05      	add	r3, sp, #20
    352a:	9300      	str	r3, [sp, #0]
    352c:	003a      	movs	r2, r7
    352e:	4b11      	ldr	r3, [pc, #68]	; (3574 <_svfiprintf_r+0x204>)
    3530:	0029      	movs	r1, r5
    3532:	9802      	ldr	r0, [sp, #8]
    3534:	e000      	b.n	3538 <_svfiprintf_r+0x1c8>
    3536:	bf00      	nop
    3538:	9003      	str	r0, [sp, #12]
    353a:	9b03      	ldr	r3, [sp, #12]
    353c:	3301      	adds	r3, #1
    353e:	d1cc      	bne.n	34da <_svfiprintf_r+0x16a>
    3540:	89bb      	ldrh	r3, [r7, #12]
    3542:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3544:	065b      	lsls	r3, r3, #25
    3546:	d400      	bmi.n	354a <_svfiprintf_r+0x1da>
    3548:	e729      	b.n	339e <_svfiprintf_r+0x2e>
    354a:	2001      	movs	r0, #1
    354c:	4240      	negs	r0, r0
    354e:	e726      	b.n	339e <_svfiprintf_r+0x2e>
    3550:	ab05      	add	r3, sp, #20
    3552:	9300      	str	r3, [sp, #0]
    3554:	003a      	movs	r2, r7
    3556:	4b07      	ldr	r3, [pc, #28]	; (3574 <_svfiprintf_r+0x204>)
    3558:	0029      	movs	r1, r5
    355a:	9802      	ldr	r0, [sp, #8]
    355c:	f000 f9be 	bl	38dc <_printf_i>
    3560:	e7ea      	b.n	3538 <_svfiprintf_r+0x1c8>
    3562:	46c0      	nop			; (mov r8, r8)
    3564:	000042b4 	.word	0x000042b4
    3568:	000042ba 	.word	0x000042ba
    356c:	000042be 	.word	0x000042be
    3570:	00000000 	.word	0x00000000
    3574:	000032ad 	.word	0x000032ad

00003578 <__sfputc_r>:
    3578:	6893      	ldr	r3, [r2, #8]
    357a:	b510      	push	{r4, lr}
    357c:	3b01      	subs	r3, #1
    357e:	6093      	str	r3, [r2, #8]
    3580:	2b00      	cmp	r3, #0
    3582:	da05      	bge.n	3590 <__sfputc_r+0x18>
    3584:	6994      	ldr	r4, [r2, #24]
    3586:	42a3      	cmp	r3, r4
    3588:	db08      	blt.n	359c <__sfputc_r+0x24>
    358a:	b2cb      	uxtb	r3, r1
    358c:	2b0a      	cmp	r3, #10
    358e:	d005      	beq.n	359c <__sfputc_r+0x24>
    3590:	6813      	ldr	r3, [r2, #0]
    3592:	1c58      	adds	r0, r3, #1
    3594:	6010      	str	r0, [r2, #0]
    3596:	7019      	strb	r1, [r3, #0]
    3598:	b2c8      	uxtb	r0, r1
    359a:	bd10      	pop	{r4, pc}
    359c:	f7ff fb0e 	bl	2bbc <__swbuf_r>
    35a0:	e7fb      	b.n	359a <__sfputc_r+0x22>

000035a2 <__sfputs_r>:
    35a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35a4:	0006      	movs	r6, r0
    35a6:	000f      	movs	r7, r1
    35a8:	0014      	movs	r4, r2
    35aa:	18d5      	adds	r5, r2, r3
    35ac:	42ac      	cmp	r4, r5
    35ae:	d101      	bne.n	35b4 <__sfputs_r+0x12>
    35b0:	2000      	movs	r0, #0
    35b2:	e007      	b.n	35c4 <__sfputs_r+0x22>
    35b4:	7821      	ldrb	r1, [r4, #0]
    35b6:	003a      	movs	r2, r7
    35b8:	0030      	movs	r0, r6
    35ba:	f7ff ffdd 	bl	3578 <__sfputc_r>
    35be:	3401      	adds	r4, #1
    35c0:	1c43      	adds	r3, r0, #1
    35c2:	d1f3      	bne.n	35ac <__sfputs_r+0xa>
    35c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000035c8 <_vfiprintf_r>:
    35c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ca:	b09f      	sub	sp, #124	; 0x7c
    35cc:	0006      	movs	r6, r0
    35ce:	000f      	movs	r7, r1
    35d0:	0014      	movs	r4, r2
    35d2:	9305      	str	r3, [sp, #20]
    35d4:	2800      	cmp	r0, #0
    35d6:	d004      	beq.n	35e2 <_vfiprintf_r+0x1a>
    35d8:	6983      	ldr	r3, [r0, #24]
    35da:	2b00      	cmp	r3, #0
    35dc:	d101      	bne.n	35e2 <_vfiprintf_r+0x1a>
    35de:	f7ff fcb1 	bl	2f44 <__sinit>
    35e2:	4b7f      	ldr	r3, [pc, #508]	; (37e0 <_vfiprintf_r+0x218>)
    35e4:	429f      	cmp	r7, r3
    35e6:	d15c      	bne.n	36a2 <_vfiprintf_r+0xda>
    35e8:	6877      	ldr	r7, [r6, #4]
    35ea:	89bb      	ldrh	r3, [r7, #12]
    35ec:	071b      	lsls	r3, r3, #28
    35ee:	d562      	bpl.n	36b6 <_vfiprintf_r+0xee>
    35f0:	693b      	ldr	r3, [r7, #16]
    35f2:	2b00      	cmp	r3, #0
    35f4:	d05f      	beq.n	36b6 <_vfiprintf_r+0xee>
    35f6:	2300      	movs	r3, #0
    35f8:	ad06      	add	r5, sp, #24
    35fa:	616b      	str	r3, [r5, #20]
    35fc:	3320      	adds	r3, #32
    35fe:	766b      	strb	r3, [r5, #25]
    3600:	3310      	adds	r3, #16
    3602:	76ab      	strb	r3, [r5, #26]
    3604:	9402      	str	r4, [sp, #8]
    3606:	9c02      	ldr	r4, [sp, #8]
    3608:	7823      	ldrb	r3, [r4, #0]
    360a:	2b00      	cmp	r3, #0
    360c:	d15d      	bne.n	36ca <_vfiprintf_r+0x102>
    360e:	9b02      	ldr	r3, [sp, #8]
    3610:	1ae3      	subs	r3, r4, r3
    3612:	9304      	str	r3, [sp, #16]
    3614:	d00d      	beq.n	3632 <_vfiprintf_r+0x6a>
    3616:	9b04      	ldr	r3, [sp, #16]
    3618:	9a02      	ldr	r2, [sp, #8]
    361a:	0039      	movs	r1, r7
    361c:	0030      	movs	r0, r6
    361e:	f7ff ffc0 	bl	35a2 <__sfputs_r>
    3622:	1c43      	adds	r3, r0, #1
    3624:	d100      	bne.n	3628 <_vfiprintf_r+0x60>
    3626:	e0cc      	b.n	37c2 <_vfiprintf_r+0x1fa>
    3628:	696a      	ldr	r2, [r5, #20]
    362a:	9b04      	ldr	r3, [sp, #16]
    362c:	4694      	mov	ip, r2
    362e:	4463      	add	r3, ip
    3630:	616b      	str	r3, [r5, #20]
    3632:	7823      	ldrb	r3, [r4, #0]
    3634:	2b00      	cmp	r3, #0
    3636:	d100      	bne.n	363a <_vfiprintf_r+0x72>
    3638:	e0c3      	b.n	37c2 <_vfiprintf_r+0x1fa>
    363a:	2201      	movs	r2, #1
    363c:	2300      	movs	r3, #0
    363e:	4252      	negs	r2, r2
    3640:	606a      	str	r2, [r5, #4]
    3642:	a902      	add	r1, sp, #8
    3644:	3254      	adds	r2, #84	; 0x54
    3646:	1852      	adds	r2, r2, r1
    3648:	3401      	adds	r4, #1
    364a:	602b      	str	r3, [r5, #0]
    364c:	60eb      	str	r3, [r5, #12]
    364e:	60ab      	str	r3, [r5, #8]
    3650:	7013      	strb	r3, [r2, #0]
    3652:	65ab      	str	r3, [r5, #88]	; 0x58
    3654:	7821      	ldrb	r1, [r4, #0]
    3656:	2205      	movs	r2, #5
    3658:	4862      	ldr	r0, [pc, #392]	; (37e4 <_vfiprintf_r+0x21c>)
    365a:	f000 fb15 	bl	3c88 <memchr>
    365e:	1c63      	adds	r3, r4, #1
    3660:	469c      	mov	ip, r3
    3662:	2800      	cmp	r0, #0
    3664:	d135      	bne.n	36d2 <_vfiprintf_r+0x10a>
    3666:	6829      	ldr	r1, [r5, #0]
    3668:	06cb      	lsls	r3, r1, #27
    366a:	d504      	bpl.n	3676 <_vfiprintf_r+0xae>
    366c:	2353      	movs	r3, #83	; 0x53
    366e:	aa02      	add	r2, sp, #8
    3670:	3020      	adds	r0, #32
    3672:	189b      	adds	r3, r3, r2
    3674:	7018      	strb	r0, [r3, #0]
    3676:	070b      	lsls	r3, r1, #28
    3678:	d504      	bpl.n	3684 <_vfiprintf_r+0xbc>
    367a:	2353      	movs	r3, #83	; 0x53
    367c:	202b      	movs	r0, #43	; 0x2b
    367e:	aa02      	add	r2, sp, #8
    3680:	189b      	adds	r3, r3, r2
    3682:	7018      	strb	r0, [r3, #0]
    3684:	7823      	ldrb	r3, [r4, #0]
    3686:	2b2a      	cmp	r3, #42	; 0x2a
    3688:	d02c      	beq.n	36e4 <_vfiprintf_r+0x11c>
    368a:	2000      	movs	r0, #0
    368c:	210a      	movs	r1, #10
    368e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3690:	7822      	ldrb	r2, [r4, #0]
    3692:	3a30      	subs	r2, #48	; 0x30
    3694:	2a09      	cmp	r2, #9
    3696:	d800      	bhi.n	369a <_vfiprintf_r+0xd2>
    3698:	e06b      	b.n	3772 <_vfiprintf_r+0x1aa>
    369a:	2800      	cmp	r0, #0
    369c:	d02a      	beq.n	36f4 <_vfiprintf_r+0x12c>
    369e:	9309      	str	r3, [sp, #36]	; 0x24
    36a0:	e028      	b.n	36f4 <_vfiprintf_r+0x12c>
    36a2:	4b51      	ldr	r3, [pc, #324]	; (37e8 <_vfiprintf_r+0x220>)
    36a4:	429f      	cmp	r7, r3
    36a6:	d101      	bne.n	36ac <_vfiprintf_r+0xe4>
    36a8:	68b7      	ldr	r7, [r6, #8]
    36aa:	e79e      	b.n	35ea <_vfiprintf_r+0x22>
    36ac:	4b4f      	ldr	r3, [pc, #316]	; (37ec <_vfiprintf_r+0x224>)
    36ae:	429f      	cmp	r7, r3
    36b0:	d19b      	bne.n	35ea <_vfiprintf_r+0x22>
    36b2:	68f7      	ldr	r7, [r6, #12]
    36b4:	e799      	b.n	35ea <_vfiprintf_r+0x22>
    36b6:	0039      	movs	r1, r7
    36b8:	0030      	movs	r0, r6
    36ba:	f7ff fad5 	bl	2c68 <__swsetup_r>
    36be:	2800      	cmp	r0, #0
    36c0:	d099      	beq.n	35f6 <_vfiprintf_r+0x2e>
    36c2:	2001      	movs	r0, #1
    36c4:	4240      	negs	r0, r0
    36c6:	b01f      	add	sp, #124	; 0x7c
    36c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36ca:	2b25      	cmp	r3, #37	; 0x25
    36cc:	d09f      	beq.n	360e <_vfiprintf_r+0x46>
    36ce:	3401      	adds	r4, #1
    36d0:	e79a      	b.n	3608 <_vfiprintf_r+0x40>
    36d2:	4b44      	ldr	r3, [pc, #272]	; (37e4 <_vfiprintf_r+0x21c>)
    36d4:	6829      	ldr	r1, [r5, #0]
    36d6:	1ac0      	subs	r0, r0, r3
    36d8:	2301      	movs	r3, #1
    36da:	4083      	lsls	r3, r0
    36dc:	430b      	orrs	r3, r1
    36de:	602b      	str	r3, [r5, #0]
    36e0:	4664      	mov	r4, ip
    36e2:	e7b7      	b.n	3654 <_vfiprintf_r+0x8c>
    36e4:	9b05      	ldr	r3, [sp, #20]
    36e6:	1d18      	adds	r0, r3, #4
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	9005      	str	r0, [sp, #20]
    36ec:	2b00      	cmp	r3, #0
    36ee:	db3a      	blt.n	3766 <_vfiprintf_r+0x19e>
    36f0:	9309      	str	r3, [sp, #36]	; 0x24
    36f2:	4664      	mov	r4, ip
    36f4:	7823      	ldrb	r3, [r4, #0]
    36f6:	2b2e      	cmp	r3, #46	; 0x2e
    36f8:	d10b      	bne.n	3712 <_vfiprintf_r+0x14a>
    36fa:	7863      	ldrb	r3, [r4, #1]
    36fc:	1c62      	adds	r2, r4, #1
    36fe:	2b2a      	cmp	r3, #42	; 0x2a
    3700:	d13f      	bne.n	3782 <_vfiprintf_r+0x1ba>
    3702:	9b05      	ldr	r3, [sp, #20]
    3704:	3402      	adds	r4, #2
    3706:	1d1a      	adds	r2, r3, #4
    3708:	681b      	ldr	r3, [r3, #0]
    370a:	9205      	str	r2, [sp, #20]
    370c:	2b00      	cmp	r3, #0
    370e:	db35      	blt.n	377c <_vfiprintf_r+0x1b4>
    3710:	9307      	str	r3, [sp, #28]
    3712:	7821      	ldrb	r1, [r4, #0]
    3714:	2203      	movs	r2, #3
    3716:	4836      	ldr	r0, [pc, #216]	; (37f0 <_vfiprintf_r+0x228>)
    3718:	f000 fab6 	bl	3c88 <memchr>
    371c:	2800      	cmp	r0, #0
    371e:	d007      	beq.n	3730 <_vfiprintf_r+0x168>
    3720:	4b33      	ldr	r3, [pc, #204]	; (37f0 <_vfiprintf_r+0x228>)
    3722:	682a      	ldr	r2, [r5, #0]
    3724:	1ac0      	subs	r0, r0, r3
    3726:	2340      	movs	r3, #64	; 0x40
    3728:	4083      	lsls	r3, r0
    372a:	4313      	orrs	r3, r2
    372c:	602b      	str	r3, [r5, #0]
    372e:	3401      	adds	r4, #1
    3730:	7821      	ldrb	r1, [r4, #0]
    3732:	1c63      	adds	r3, r4, #1
    3734:	2206      	movs	r2, #6
    3736:	482f      	ldr	r0, [pc, #188]	; (37f4 <_vfiprintf_r+0x22c>)
    3738:	9302      	str	r3, [sp, #8]
    373a:	7629      	strb	r1, [r5, #24]
    373c:	f000 faa4 	bl	3c88 <memchr>
    3740:	2800      	cmp	r0, #0
    3742:	d044      	beq.n	37ce <_vfiprintf_r+0x206>
    3744:	4b2c      	ldr	r3, [pc, #176]	; (37f8 <_vfiprintf_r+0x230>)
    3746:	2b00      	cmp	r3, #0
    3748:	d12f      	bne.n	37aa <_vfiprintf_r+0x1e2>
    374a:	6829      	ldr	r1, [r5, #0]
    374c:	9b05      	ldr	r3, [sp, #20]
    374e:	2207      	movs	r2, #7
    3750:	05c9      	lsls	r1, r1, #23
    3752:	d528      	bpl.n	37a6 <_vfiprintf_r+0x1de>
    3754:	189b      	adds	r3, r3, r2
    3756:	4393      	bics	r3, r2
    3758:	3308      	adds	r3, #8
    375a:	9305      	str	r3, [sp, #20]
    375c:	696b      	ldr	r3, [r5, #20]
    375e:	9a03      	ldr	r2, [sp, #12]
    3760:	189b      	adds	r3, r3, r2
    3762:	616b      	str	r3, [r5, #20]
    3764:	e74f      	b.n	3606 <_vfiprintf_r+0x3e>
    3766:	425b      	negs	r3, r3
    3768:	60eb      	str	r3, [r5, #12]
    376a:	2302      	movs	r3, #2
    376c:	430b      	orrs	r3, r1
    376e:	602b      	str	r3, [r5, #0]
    3770:	e7bf      	b.n	36f2 <_vfiprintf_r+0x12a>
    3772:	434b      	muls	r3, r1
    3774:	3401      	adds	r4, #1
    3776:	189b      	adds	r3, r3, r2
    3778:	2001      	movs	r0, #1
    377a:	e789      	b.n	3690 <_vfiprintf_r+0xc8>
    377c:	2301      	movs	r3, #1
    377e:	425b      	negs	r3, r3
    3780:	e7c6      	b.n	3710 <_vfiprintf_r+0x148>
    3782:	2300      	movs	r3, #0
    3784:	0014      	movs	r4, r2
    3786:	200a      	movs	r0, #10
    3788:	001a      	movs	r2, r3
    378a:	606b      	str	r3, [r5, #4]
    378c:	7821      	ldrb	r1, [r4, #0]
    378e:	3930      	subs	r1, #48	; 0x30
    3790:	2909      	cmp	r1, #9
    3792:	d903      	bls.n	379c <_vfiprintf_r+0x1d4>
    3794:	2b00      	cmp	r3, #0
    3796:	d0bc      	beq.n	3712 <_vfiprintf_r+0x14a>
    3798:	9207      	str	r2, [sp, #28]
    379a:	e7ba      	b.n	3712 <_vfiprintf_r+0x14a>
    379c:	4342      	muls	r2, r0
    379e:	3401      	adds	r4, #1
    37a0:	1852      	adds	r2, r2, r1
    37a2:	2301      	movs	r3, #1
    37a4:	e7f2      	b.n	378c <_vfiprintf_r+0x1c4>
    37a6:	3307      	adds	r3, #7
    37a8:	e7d5      	b.n	3756 <_vfiprintf_r+0x18e>
    37aa:	ab05      	add	r3, sp, #20
    37ac:	9300      	str	r3, [sp, #0]
    37ae:	003a      	movs	r2, r7
    37b0:	4b12      	ldr	r3, [pc, #72]	; (37fc <_vfiprintf_r+0x234>)
    37b2:	0029      	movs	r1, r5
    37b4:	0030      	movs	r0, r6
    37b6:	e000      	b.n	37ba <_vfiprintf_r+0x1f2>
    37b8:	bf00      	nop
    37ba:	9003      	str	r0, [sp, #12]
    37bc:	9b03      	ldr	r3, [sp, #12]
    37be:	3301      	adds	r3, #1
    37c0:	d1cc      	bne.n	375c <_vfiprintf_r+0x194>
    37c2:	89bb      	ldrh	r3, [r7, #12]
    37c4:	065b      	lsls	r3, r3, #25
    37c6:	d500      	bpl.n	37ca <_vfiprintf_r+0x202>
    37c8:	e77b      	b.n	36c2 <_vfiprintf_r+0xfa>
    37ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    37cc:	e77b      	b.n	36c6 <_vfiprintf_r+0xfe>
    37ce:	ab05      	add	r3, sp, #20
    37d0:	9300      	str	r3, [sp, #0]
    37d2:	003a      	movs	r2, r7
    37d4:	4b09      	ldr	r3, [pc, #36]	; (37fc <_vfiprintf_r+0x234>)
    37d6:	0029      	movs	r1, r5
    37d8:	0030      	movs	r0, r6
    37da:	f000 f87f 	bl	38dc <_printf_i>
    37de:	e7ec      	b.n	37ba <_vfiprintf_r+0x1f2>
    37e0:	00004274 	.word	0x00004274
    37e4:	000042b4 	.word	0x000042b4
    37e8:	00004294 	.word	0x00004294
    37ec:	00004254 	.word	0x00004254
    37f0:	000042ba 	.word	0x000042ba
    37f4:	000042be 	.word	0x000042be
    37f8:	00000000 	.word	0x00000000
    37fc:	000035a3 	.word	0x000035a3

00003800 <_printf_common>:
    3800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3802:	0015      	movs	r5, r2
    3804:	9301      	str	r3, [sp, #4]
    3806:	688a      	ldr	r2, [r1, #8]
    3808:	690b      	ldr	r3, [r1, #16]
    380a:	9000      	str	r0, [sp, #0]
    380c:	000c      	movs	r4, r1
    380e:	4293      	cmp	r3, r2
    3810:	da00      	bge.n	3814 <_printf_common+0x14>
    3812:	0013      	movs	r3, r2
    3814:	0022      	movs	r2, r4
    3816:	602b      	str	r3, [r5, #0]
    3818:	3243      	adds	r2, #67	; 0x43
    381a:	7812      	ldrb	r2, [r2, #0]
    381c:	2a00      	cmp	r2, #0
    381e:	d001      	beq.n	3824 <_printf_common+0x24>
    3820:	3301      	adds	r3, #1
    3822:	602b      	str	r3, [r5, #0]
    3824:	6823      	ldr	r3, [r4, #0]
    3826:	069b      	lsls	r3, r3, #26
    3828:	d502      	bpl.n	3830 <_printf_common+0x30>
    382a:	682b      	ldr	r3, [r5, #0]
    382c:	3302      	adds	r3, #2
    382e:	602b      	str	r3, [r5, #0]
    3830:	2706      	movs	r7, #6
    3832:	6823      	ldr	r3, [r4, #0]
    3834:	401f      	ands	r7, r3
    3836:	d027      	beq.n	3888 <_printf_common+0x88>
    3838:	0023      	movs	r3, r4
    383a:	3343      	adds	r3, #67	; 0x43
    383c:	781b      	ldrb	r3, [r3, #0]
    383e:	1e5a      	subs	r2, r3, #1
    3840:	4193      	sbcs	r3, r2
    3842:	6822      	ldr	r2, [r4, #0]
    3844:	0692      	lsls	r2, r2, #26
    3846:	d430      	bmi.n	38aa <_printf_common+0xaa>
    3848:	0022      	movs	r2, r4
    384a:	9901      	ldr	r1, [sp, #4]
    384c:	3243      	adds	r2, #67	; 0x43
    384e:	9800      	ldr	r0, [sp, #0]
    3850:	9e08      	ldr	r6, [sp, #32]
    3852:	47b0      	blx	r6
    3854:	1c43      	adds	r3, r0, #1
    3856:	d025      	beq.n	38a4 <_printf_common+0xa4>
    3858:	2306      	movs	r3, #6
    385a:	6820      	ldr	r0, [r4, #0]
    385c:	682a      	ldr	r2, [r5, #0]
    385e:	68e1      	ldr	r1, [r4, #12]
    3860:	4003      	ands	r3, r0
    3862:	2500      	movs	r5, #0
    3864:	2b04      	cmp	r3, #4
    3866:	d103      	bne.n	3870 <_printf_common+0x70>
    3868:	1a8d      	subs	r5, r1, r2
    386a:	43eb      	mvns	r3, r5
    386c:	17db      	asrs	r3, r3, #31
    386e:	401d      	ands	r5, r3
    3870:	68a3      	ldr	r3, [r4, #8]
    3872:	6922      	ldr	r2, [r4, #16]
    3874:	4293      	cmp	r3, r2
    3876:	dd01      	ble.n	387c <_printf_common+0x7c>
    3878:	1a9b      	subs	r3, r3, r2
    387a:	18ed      	adds	r5, r5, r3
    387c:	2700      	movs	r7, #0
    387e:	42bd      	cmp	r5, r7
    3880:	d120      	bne.n	38c4 <_printf_common+0xc4>
    3882:	2000      	movs	r0, #0
    3884:	e010      	b.n	38a8 <_printf_common+0xa8>
    3886:	3701      	adds	r7, #1
    3888:	68e3      	ldr	r3, [r4, #12]
    388a:	682a      	ldr	r2, [r5, #0]
    388c:	1a9b      	subs	r3, r3, r2
    388e:	429f      	cmp	r7, r3
    3890:	dad2      	bge.n	3838 <_printf_common+0x38>
    3892:	0022      	movs	r2, r4
    3894:	2301      	movs	r3, #1
    3896:	3219      	adds	r2, #25
    3898:	9901      	ldr	r1, [sp, #4]
    389a:	9800      	ldr	r0, [sp, #0]
    389c:	9e08      	ldr	r6, [sp, #32]
    389e:	47b0      	blx	r6
    38a0:	1c43      	adds	r3, r0, #1
    38a2:	d1f0      	bne.n	3886 <_printf_common+0x86>
    38a4:	2001      	movs	r0, #1
    38a6:	4240      	negs	r0, r0
    38a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    38aa:	2030      	movs	r0, #48	; 0x30
    38ac:	18e1      	adds	r1, r4, r3
    38ae:	3143      	adds	r1, #67	; 0x43
    38b0:	7008      	strb	r0, [r1, #0]
    38b2:	0021      	movs	r1, r4
    38b4:	1c5a      	adds	r2, r3, #1
    38b6:	3145      	adds	r1, #69	; 0x45
    38b8:	7809      	ldrb	r1, [r1, #0]
    38ba:	18a2      	adds	r2, r4, r2
    38bc:	3243      	adds	r2, #67	; 0x43
    38be:	3302      	adds	r3, #2
    38c0:	7011      	strb	r1, [r2, #0]
    38c2:	e7c1      	b.n	3848 <_printf_common+0x48>
    38c4:	0022      	movs	r2, r4
    38c6:	2301      	movs	r3, #1
    38c8:	321a      	adds	r2, #26
    38ca:	9901      	ldr	r1, [sp, #4]
    38cc:	9800      	ldr	r0, [sp, #0]
    38ce:	9e08      	ldr	r6, [sp, #32]
    38d0:	47b0      	blx	r6
    38d2:	1c43      	adds	r3, r0, #1
    38d4:	d0e6      	beq.n	38a4 <_printf_common+0xa4>
    38d6:	3701      	adds	r7, #1
    38d8:	e7d1      	b.n	387e <_printf_common+0x7e>
	...

000038dc <_printf_i>:
    38dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38de:	b08b      	sub	sp, #44	; 0x2c
    38e0:	9206      	str	r2, [sp, #24]
    38e2:	000a      	movs	r2, r1
    38e4:	3243      	adds	r2, #67	; 0x43
    38e6:	9307      	str	r3, [sp, #28]
    38e8:	9005      	str	r0, [sp, #20]
    38ea:	9204      	str	r2, [sp, #16]
    38ec:	7e0a      	ldrb	r2, [r1, #24]
    38ee:	000c      	movs	r4, r1
    38f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    38f2:	2a6e      	cmp	r2, #110	; 0x6e
    38f4:	d100      	bne.n	38f8 <_printf_i+0x1c>
    38f6:	e08f      	b.n	3a18 <_printf_i+0x13c>
    38f8:	d817      	bhi.n	392a <_printf_i+0x4e>
    38fa:	2a63      	cmp	r2, #99	; 0x63
    38fc:	d02c      	beq.n	3958 <_printf_i+0x7c>
    38fe:	d808      	bhi.n	3912 <_printf_i+0x36>
    3900:	2a00      	cmp	r2, #0
    3902:	d100      	bne.n	3906 <_printf_i+0x2a>
    3904:	e099      	b.n	3a3a <_printf_i+0x15e>
    3906:	2a58      	cmp	r2, #88	; 0x58
    3908:	d054      	beq.n	39b4 <_printf_i+0xd8>
    390a:	0026      	movs	r6, r4
    390c:	3642      	adds	r6, #66	; 0x42
    390e:	7032      	strb	r2, [r6, #0]
    3910:	e029      	b.n	3966 <_printf_i+0x8a>
    3912:	2a64      	cmp	r2, #100	; 0x64
    3914:	d001      	beq.n	391a <_printf_i+0x3e>
    3916:	2a69      	cmp	r2, #105	; 0x69
    3918:	d1f7      	bne.n	390a <_printf_i+0x2e>
    391a:	6821      	ldr	r1, [r4, #0]
    391c:	681a      	ldr	r2, [r3, #0]
    391e:	0608      	lsls	r0, r1, #24
    3920:	d523      	bpl.n	396a <_printf_i+0x8e>
    3922:	1d11      	adds	r1, r2, #4
    3924:	6019      	str	r1, [r3, #0]
    3926:	6815      	ldr	r5, [r2, #0]
    3928:	e025      	b.n	3976 <_printf_i+0x9a>
    392a:	2a73      	cmp	r2, #115	; 0x73
    392c:	d100      	bne.n	3930 <_printf_i+0x54>
    392e:	e088      	b.n	3a42 <_printf_i+0x166>
    3930:	d808      	bhi.n	3944 <_printf_i+0x68>
    3932:	2a6f      	cmp	r2, #111	; 0x6f
    3934:	d029      	beq.n	398a <_printf_i+0xae>
    3936:	2a70      	cmp	r2, #112	; 0x70
    3938:	d1e7      	bne.n	390a <_printf_i+0x2e>
    393a:	2220      	movs	r2, #32
    393c:	6809      	ldr	r1, [r1, #0]
    393e:	430a      	orrs	r2, r1
    3940:	6022      	str	r2, [r4, #0]
    3942:	e003      	b.n	394c <_printf_i+0x70>
    3944:	2a75      	cmp	r2, #117	; 0x75
    3946:	d020      	beq.n	398a <_printf_i+0xae>
    3948:	2a78      	cmp	r2, #120	; 0x78
    394a:	d1de      	bne.n	390a <_printf_i+0x2e>
    394c:	0022      	movs	r2, r4
    394e:	2178      	movs	r1, #120	; 0x78
    3950:	3245      	adds	r2, #69	; 0x45
    3952:	7011      	strb	r1, [r2, #0]
    3954:	4a6c      	ldr	r2, [pc, #432]	; (3b08 <_printf_i+0x22c>)
    3956:	e030      	b.n	39ba <_printf_i+0xde>
    3958:	000e      	movs	r6, r1
    395a:	681a      	ldr	r2, [r3, #0]
    395c:	3642      	adds	r6, #66	; 0x42
    395e:	1d11      	adds	r1, r2, #4
    3960:	6019      	str	r1, [r3, #0]
    3962:	6813      	ldr	r3, [r2, #0]
    3964:	7033      	strb	r3, [r6, #0]
    3966:	2301      	movs	r3, #1
    3968:	e079      	b.n	3a5e <_printf_i+0x182>
    396a:	0649      	lsls	r1, r1, #25
    396c:	d5d9      	bpl.n	3922 <_printf_i+0x46>
    396e:	1d11      	adds	r1, r2, #4
    3970:	6019      	str	r1, [r3, #0]
    3972:	2300      	movs	r3, #0
    3974:	5ed5      	ldrsh	r5, [r2, r3]
    3976:	2d00      	cmp	r5, #0
    3978:	da03      	bge.n	3982 <_printf_i+0xa6>
    397a:	232d      	movs	r3, #45	; 0x2d
    397c:	9a04      	ldr	r2, [sp, #16]
    397e:	426d      	negs	r5, r5
    3980:	7013      	strb	r3, [r2, #0]
    3982:	4b62      	ldr	r3, [pc, #392]	; (3b0c <_printf_i+0x230>)
    3984:	270a      	movs	r7, #10
    3986:	9303      	str	r3, [sp, #12]
    3988:	e02f      	b.n	39ea <_printf_i+0x10e>
    398a:	6820      	ldr	r0, [r4, #0]
    398c:	6819      	ldr	r1, [r3, #0]
    398e:	0605      	lsls	r5, r0, #24
    3990:	d503      	bpl.n	399a <_printf_i+0xbe>
    3992:	1d08      	adds	r0, r1, #4
    3994:	6018      	str	r0, [r3, #0]
    3996:	680d      	ldr	r5, [r1, #0]
    3998:	e005      	b.n	39a6 <_printf_i+0xca>
    399a:	0640      	lsls	r0, r0, #25
    399c:	d5f9      	bpl.n	3992 <_printf_i+0xb6>
    399e:	680d      	ldr	r5, [r1, #0]
    39a0:	1d08      	adds	r0, r1, #4
    39a2:	6018      	str	r0, [r3, #0]
    39a4:	b2ad      	uxth	r5, r5
    39a6:	4b59      	ldr	r3, [pc, #356]	; (3b0c <_printf_i+0x230>)
    39a8:	2708      	movs	r7, #8
    39aa:	9303      	str	r3, [sp, #12]
    39ac:	2a6f      	cmp	r2, #111	; 0x6f
    39ae:	d018      	beq.n	39e2 <_printf_i+0x106>
    39b0:	270a      	movs	r7, #10
    39b2:	e016      	b.n	39e2 <_printf_i+0x106>
    39b4:	3145      	adds	r1, #69	; 0x45
    39b6:	700a      	strb	r2, [r1, #0]
    39b8:	4a54      	ldr	r2, [pc, #336]	; (3b0c <_printf_i+0x230>)
    39ba:	9203      	str	r2, [sp, #12]
    39bc:	681a      	ldr	r2, [r3, #0]
    39be:	6821      	ldr	r1, [r4, #0]
    39c0:	1d10      	adds	r0, r2, #4
    39c2:	6018      	str	r0, [r3, #0]
    39c4:	6815      	ldr	r5, [r2, #0]
    39c6:	0608      	lsls	r0, r1, #24
    39c8:	d522      	bpl.n	3a10 <_printf_i+0x134>
    39ca:	07cb      	lsls	r3, r1, #31
    39cc:	d502      	bpl.n	39d4 <_printf_i+0xf8>
    39ce:	2320      	movs	r3, #32
    39d0:	4319      	orrs	r1, r3
    39d2:	6021      	str	r1, [r4, #0]
    39d4:	2710      	movs	r7, #16
    39d6:	2d00      	cmp	r5, #0
    39d8:	d103      	bne.n	39e2 <_printf_i+0x106>
    39da:	2320      	movs	r3, #32
    39dc:	6822      	ldr	r2, [r4, #0]
    39de:	439a      	bics	r2, r3
    39e0:	6022      	str	r2, [r4, #0]
    39e2:	0023      	movs	r3, r4
    39e4:	2200      	movs	r2, #0
    39e6:	3343      	adds	r3, #67	; 0x43
    39e8:	701a      	strb	r2, [r3, #0]
    39ea:	6863      	ldr	r3, [r4, #4]
    39ec:	60a3      	str	r3, [r4, #8]
    39ee:	2b00      	cmp	r3, #0
    39f0:	db5c      	blt.n	3aac <_printf_i+0x1d0>
    39f2:	2204      	movs	r2, #4
    39f4:	6821      	ldr	r1, [r4, #0]
    39f6:	4391      	bics	r1, r2
    39f8:	6021      	str	r1, [r4, #0]
    39fa:	2d00      	cmp	r5, #0
    39fc:	d158      	bne.n	3ab0 <_printf_i+0x1d4>
    39fe:	9e04      	ldr	r6, [sp, #16]
    3a00:	2b00      	cmp	r3, #0
    3a02:	d064      	beq.n	3ace <_printf_i+0x1f2>
    3a04:	0026      	movs	r6, r4
    3a06:	9b03      	ldr	r3, [sp, #12]
    3a08:	3642      	adds	r6, #66	; 0x42
    3a0a:	781b      	ldrb	r3, [r3, #0]
    3a0c:	7033      	strb	r3, [r6, #0]
    3a0e:	e05e      	b.n	3ace <_printf_i+0x1f2>
    3a10:	0648      	lsls	r0, r1, #25
    3a12:	d5da      	bpl.n	39ca <_printf_i+0xee>
    3a14:	b2ad      	uxth	r5, r5
    3a16:	e7d8      	b.n	39ca <_printf_i+0xee>
    3a18:	6809      	ldr	r1, [r1, #0]
    3a1a:	681a      	ldr	r2, [r3, #0]
    3a1c:	0608      	lsls	r0, r1, #24
    3a1e:	d505      	bpl.n	3a2c <_printf_i+0x150>
    3a20:	1d11      	adds	r1, r2, #4
    3a22:	6019      	str	r1, [r3, #0]
    3a24:	6813      	ldr	r3, [r2, #0]
    3a26:	6962      	ldr	r2, [r4, #20]
    3a28:	601a      	str	r2, [r3, #0]
    3a2a:	e006      	b.n	3a3a <_printf_i+0x15e>
    3a2c:	0649      	lsls	r1, r1, #25
    3a2e:	d5f7      	bpl.n	3a20 <_printf_i+0x144>
    3a30:	1d11      	adds	r1, r2, #4
    3a32:	6019      	str	r1, [r3, #0]
    3a34:	6813      	ldr	r3, [r2, #0]
    3a36:	8aa2      	ldrh	r2, [r4, #20]
    3a38:	801a      	strh	r2, [r3, #0]
    3a3a:	2300      	movs	r3, #0
    3a3c:	9e04      	ldr	r6, [sp, #16]
    3a3e:	6123      	str	r3, [r4, #16]
    3a40:	e054      	b.n	3aec <_printf_i+0x210>
    3a42:	681a      	ldr	r2, [r3, #0]
    3a44:	1d11      	adds	r1, r2, #4
    3a46:	6019      	str	r1, [r3, #0]
    3a48:	6816      	ldr	r6, [r2, #0]
    3a4a:	2100      	movs	r1, #0
    3a4c:	6862      	ldr	r2, [r4, #4]
    3a4e:	0030      	movs	r0, r6
    3a50:	f000 f91a 	bl	3c88 <memchr>
    3a54:	2800      	cmp	r0, #0
    3a56:	d001      	beq.n	3a5c <_printf_i+0x180>
    3a58:	1b80      	subs	r0, r0, r6
    3a5a:	6060      	str	r0, [r4, #4]
    3a5c:	6863      	ldr	r3, [r4, #4]
    3a5e:	6123      	str	r3, [r4, #16]
    3a60:	2300      	movs	r3, #0
    3a62:	9a04      	ldr	r2, [sp, #16]
    3a64:	7013      	strb	r3, [r2, #0]
    3a66:	e041      	b.n	3aec <_printf_i+0x210>
    3a68:	6923      	ldr	r3, [r4, #16]
    3a6a:	0032      	movs	r2, r6
    3a6c:	9906      	ldr	r1, [sp, #24]
    3a6e:	9805      	ldr	r0, [sp, #20]
    3a70:	9d07      	ldr	r5, [sp, #28]
    3a72:	47a8      	blx	r5
    3a74:	1c43      	adds	r3, r0, #1
    3a76:	d043      	beq.n	3b00 <_printf_i+0x224>
    3a78:	6823      	ldr	r3, [r4, #0]
    3a7a:	2500      	movs	r5, #0
    3a7c:	079b      	lsls	r3, r3, #30
    3a7e:	d40f      	bmi.n	3aa0 <_printf_i+0x1c4>
    3a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3a82:	68e0      	ldr	r0, [r4, #12]
    3a84:	4298      	cmp	r0, r3
    3a86:	da3d      	bge.n	3b04 <_printf_i+0x228>
    3a88:	0018      	movs	r0, r3
    3a8a:	e03b      	b.n	3b04 <_printf_i+0x228>
    3a8c:	0022      	movs	r2, r4
    3a8e:	2301      	movs	r3, #1
    3a90:	3219      	adds	r2, #25
    3a92:	9906      	ldr	r1, [sp, #24]
    3a94:	9805      	ldr	r0, [sp, #20]
    3a96:	9e07      	ldr	r6, [sp, #28]
    3a98:	47b0      	blx	r6
    3a9a:	1c43      	adds	r3, r0, #1
    3a9c:	d030      	beq.n	3b00 <_printf_i+0x224>
    3a9e:	3501      	adds	r5, #1
    3aa0:	68e3      	ldr	r3, [r4, #12]
    3aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3aa4:	1a9b      	subs	r3, r3, r2
    3aa6:	429d      	cmp	r5, r3
    3aa8:	dbf0      	blt.n	3a8c <_printf_i+0x1b0>
    3aaa:	e7e9      	b.n	3a80 <_printf_i+0x1a4>
    3aac:	2d00      	cmp	r5, #0
    3aae:	d0a9      	beq.n	3a04 <_printf_i+0x128>
    3ab0:	9e04      	ldr	r6, [sp, #16]
    3ab2:	0028      	movs	r0, r5
    3ab4:	0039      	movs	r1, r7
    3ab6:	f7fe ff5d 	bl	2974 <__aeabi_uidivmod>
    3aba:	9b03      	ldr	r3, [sp, #12]
    3abc:	3e01      	subs	r6, #1
    3abe:	5c5b      	ldrb	r3, [r3, r1]
    3ac0:	0028      	movs	r0, r5
    3ac2:	7033      	strb	r3, [r6, #0]
    3ac4:	0039      	movs	r1, r7
    3ac6:	f7fe fecf 	bl	2868 <__udivsi3>
    3aca:	1e05      	subs	r5, r0, #0
    3acc:	d1f1      	bne.n	3ab2 <_printf_i+0x1d6>
    3ace:	2f08      	cmp	r7, #8
    3ad0:	d109      	bne.n	3ae6 <_printf_i+0x20a>
    3ad2:	6823      	ldr	r3, [r4, #0]
    3ad4:	07db      	lsls	r3, r3, #31
    3ad6:	d506      	bpl.n	3ae6 <_printf_i+0x20a>
    3ad8:	6863      	ldr	r3, [r4, #4]
    3ada:	6922      	ldr	r2, [r4, #16]
    3adc:	4293      	cmp	r3, r2
    3ade:	dc02      	bgt.n	3ae6 <_printf_i+0x20a>
    3ae0:	2330      	movs	r3, #48	; 0x30
    3ae2:	3e01      	subs	r6, #1
    3ae4:	7033      	strb	r3, [r6, #0]
    3ae6:	9b04      	ldr	r3, [sp, #16]
    3ae8:	1b9b      	subs	r3, r3, r6
    3aea:	6123      	str	r3, [r4, #16]
    3aec:	9b07      	ldr	r3, [sp, #28]
    3aee:	aa09      	add	r2, sp, #36	; 0x24
    3af0:	9300      	str	r3, [sp, #0]
    3af2:	0021      	movs	r1, r4
    3af4:	9b06      	ldr	r3, [sp, #24]
    3af6:	9805      	ldr	r0, [sp, #20]
    3af8:	f7ff fe82 	bl	3800 <_printf_common>
    3afc:	1c43      	adds	r3, r0, #1
    3afe:	d1b3      	bne.n	3a68 <_printf_i+0x18c>
    3b00:	2001      	movs	r0, #1
    3b02:	4240      	negs	r0, r0
    3b04:	b00b      	add	sp, #44	; 0x2c
    3b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b08:	000042d6 	.word	0x000042d6
    3b0c:	000042c5 	.word	0x000042c5

00003b10 <_sbrk_r>:
    3b10:	2300      	movs	r3, #0
    3b12:	b570      	push	{r4, r5, r6, lr}
    3b14:	4c06      	ldr	r4, [pc, #24]	; (3b30 <_sbrk_r+0x20>)
    3b16:	0005      	movs	r5, r0
    3b18:	0008      	movs	r0, r1
    3b1a:	6023      	str	r3, [r4, #0]
    3b1c:	f7fd f928 	bl	d70 <_sbrk>
    3b20:	1c43      	adds	r3, r0, #1
    3b22:	d103      	bne.n	3b2c <_sbrk_r+0x1c>
    3b24:	6823      	ldr	r3, [r4, #0]
    3b26:	2b00      	cmp	r3, #0
    3b28:	d000      	beq.n	3b2c <_sbrk_r+0x1c>
    3b2a:	602b      	str	r3, [r5, #0]
    3b2c:	bd70      	pop	{r4, r5, r6, pc}
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	200002d4 	.word	0x200002d4

00003b34 <__sread>:
    3b34:	b570      	push	{r4, r5, r6, lr}
    3b36:	000c      	movs	r4, r1
    3b38:	250e      	movs	r5, #14
    3b3a:	5f49      	ldrsh	r1, [r1, r5]
    3b3c:	f000 f8f2 	bl	3d24 <_read_r>
    3b40:	2800      	cmp	r0, #0
    3b42:	db03      	blt.n	3b4c <__sread+0x18>
    3b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3b46:	181b      	adds	r3, r3, r0
    3b48:	6563      	str	r3, [r4, #84]	; 0x54
    3b4a:	bd70      	pop	{r4, r5, r6, pc}
    3b4c:	89a3      	ldrh	r3, [r4, #12]
    3b4e:	4a02      	ldr	r2, [pc, #8]	; (3b58 <__sread+0x24>)
    3b50:	4013      	ands	r3, r2
    3b52:	81a3      	strh	r3, [r4, #12]
    3b54:	e7f9      	b.n	3b4a <__sread+0x16>
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	ffffefff 	.word	0xffffefff

00003b5c <__swrite>:
    3b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b5e:	001f      	movs	r7, r3
    3b60:	898b      	ldrh	r3, [r1, #12]
    3b62:	0005      	movs	r5, r0
    3b64:	000c      	movs	r4, r1
    3b66:	0016      	movs	r6, r2
    3b68:	05db      	lsls	r3, r3, #23
    3b6a:	d505      	bpl.n	3b78 <__swrite+0x1c>
    3b6c:	230e      	movs	r3, #14
    3b6e:	5ec9      	ldrsh	r1, [r1, r3]
    3b70:	2200      	movs	r2, #0
    3b72:	2302      	movs	r3, #2
    3b74:	f000 f874 	bl	3c60 <_lseek_r>
    3b78:	89a3      	ldrh	r3, [r4, #12]
    3b7a:	4a05      	ldr	r2, [pc, #20]	; (3b90 <__swrite+0x34>)
    3b7c:	0028      	movs	r0, r5
    3b7e:	4013      	ands	r3, r2
    3b80:	81a3      	strh	r3, [r4, #12]
    3b82:	0032      	movs	r2, r6
    3b84:	230e      	movs	r3, #14
    3b86:	5ee1      	ldrsh	r1, [r4, r3]
    3b88:	003b      	movs	r3, r7
    3b8a:	f000 f81f 	bl	3bcc <_write_r>
    3b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b90:	ffffefff 	.word	0xffffefff

00003b94 <__sseek>:
    3b94:	b570      	push	{r4, r5, r6, lr}
    3b96:	000c      	movs	r4, r1
    3b98:	250e      	movs	r5, #14
    3b9a:	5f49      	ldrsh	r1, [r1, r5]
    3b9c:	f000 f860 	bl	3c60 <_lseek_r>
    3ba0:	89a3      	ldrh	r3, [r4, #12]
    3ba2:	1c42      	adds	r2, r0, #1
    3ba4:	d103      	bne.n	3bae <__sseek+0x1a>
    3ba6:	4a05      	ldr	r2, [pc, #20]	; (3bbc <__sseek+0x28>)
    3ba8:	4013      	ands	r3, r2
    3baa:	81a3      	strh	r3, [r4, #12]
    3bac:	bd70      	pop	{r4, r5, r6, pc}
    3bae:	2280      	movs	r2, #128	; 0x80
    3bb0:	0152      	lsls	r2, r2, #5
    3bb2:	4313      	orrs	r3, r2
    3bb4:	81a3      	strh	r3, [r4, #12]
    3bb6:	6560      	str	r0, [r4, #84]	; 0x54
    3bb8:	e7f8      	b.n	3bac <__sseek+0x18>
    3bba:	46c0      	nop			; (mov r8, r8)
    3bbc:	ffffefff 	.word	0xffffefff

00003bc0 <__sclose>:
    3bc0:	b510      	push	{r4, lr}
    3bc2:	230e      	movs	r3, #14
    3bc4:	5ec9      	ldrsh	r1, [r1, r3]
    3bc6:	f000 f815 	bl	3bf4 <_close_r>
    3bca:	bd10      	pop	{r4, pc}

00003bcc <_write_r>:
    3bcc:	b570      	push	{r4, r5, r6, lr}
    3bce:	0005      	movs	r5, r0
    3bd0:	0008      	movs	r0, r1
    3bd2:	0011      	movs	r1, r2
    3bd4:	2200      	movs	r2, #0
    3bd6:	4c06      	ldr	r4, [pc, #24]	; (3bf0 <_write_r+0x24>)
    3bd8:	6022      	str	r2, [r4, #0]
    3bda:	001a      	movs	r2, r3
    3bdc:	f7fd fcd6 	bl	158c <_write>
    3be0:	1c43      	adds	r3, r0, #1
    3be2:	d103      	bne.n	3bec <_write_r+0x20>
    3be4:	6823      	ldr	r3, [r4, #0]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d000      	beq.n	3bec <_write_r+0x20>
    3bea:	602b      	str	r3, [r5, #0]
    3bec:	bd70      	pop	{r4, r5, r6, pc}
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	200002d4 	.word	0x200002d4

00003bf4 <_close_r>:
    3bf4:	2300      	movs	r3, #0
    3bf6:	b570      	push	{r4, r5, r6, lr}
    3bf8:	4c06      	ldr	r4, [pc, #24]	; (3c14 <_close_r+0x20>)
    3bfa:	0005      	movs	r5, r0
    3bfc:	0008      	movs	r0, r1
    3bfe:	6023      	str	r3, [r4, #0]
    3c00:	f7fd f8c8 	bl	d94 <_close>
    3c04:	1c43      	adds	r3, r0, #1
    3c06:	d103      	bne.n	3c10 <_close_r+0x1c>
    3c08:	6823      	ldr	r3, [r4, #0]
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d000      	beq.n	3c10 <_close_r+0x1c>
    3c0e:	602b      	str	r3, [r5, #0]
    3c10:	bd70      	pop	{r4, r5, r6, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	200002d4 	.word	0x200002d4

00003c18 <_fstat_r>:
    3c18:	2300      	movs	r3, #0
    3c1a:	b570      	push	{r4, r5, r6, lr}
    3c1c:	4c06      	ldr	r4, [pc, #24]	; (3c38 <_fstat_r+0x20>)
    3c1e:	0005      	movs	r5, r0
    3c20:	0008      	movs	r0, r1
    3c22:	0011      	movs	r1, r2
    3c24:	6023      	str	r3, [r4, #0]
    3c26:	f7fd f8b8 	bl	d9a <_fstat>
    3c2a:	1c43      	adds	r3, r0, #1
    3c2c:	d103      	bne.n	3c36 <_fstat_r+0x1e>
    3c2e:	6823      	ldr	r3, [r4, #0]
    3c30:	2b00      	cmp	r3, #0
    3c32:	d000      	beq.n	3c36 <_fstat_r+0x1e>
    3c34:	602b      	str	r3, [r5, #0]
    3c36:	bd70      	pop	{r4, r5, r6, pc}
    3c38:	200002d4 	.word	0x200002d4

00003c3c <_isatty_r>:
    3c3c:	2300      	movs	r3, #0
    3c3e:	b570      	push	{r4, r5, r6, lr}
    3c40:	4c06      	ldr	r4, [pc, #24]	; (3c5c <_isatty_r+0x20>)
    3c42:	0005      	movs	r5, r0
    3c44:	0008      	movs	r0, r1
    3c46:	6023      	str	r3, [r4, #0]
    3c48:	f7fd f8ac 	bl	da4 <_isatty>
    3c4c:	1c43      	adds	r3, r0, #1
    3c4e:	d103      	bne.n	3c58 <_isatty_r+0x1c>
    3c50:	6823      	ldr	r3, [r4, #0]
    3c52:	2b00      	cmp	r3, #0
    3c54:	d000      	beq.n	3c58 <_isatty_r+0x1c>
    3c56:	602b      	str	r3, [r5, #0]
    3c58:	bd70      	pop	{r4, r5, r6, pc}
    3c5a:	46c0      	nop			; (mov r8, r8)
    3c5c:	200002d4 	.word	0x200002d4

00003c60 <_lseek_r>:
    3c60:	b570      	push	{r4, r5, r6, lr}
    3c62:	0005      	movs	r5, r0
    3c64:	0008      	movs	r0, r1
    3c66:	0011      	movs	r1, r2
    3c68:	2200      	movs	r2, #0
    3c6a:	4c06      	ldr	r4, [pc, #24]	; (3c84 <_lseek_r+0x24>)
    3c6c:	6022      	str	r2, [r4, #0]
    3c6e:	001a      	movs	r2, r3
    3c70:	f7fd f89a 	bl	da8 <_lseek>
    3c74:	1c43      	adds	r3, r0, #1
    3c76:	d103      	bne.n	3c80 <_lseek_r+0x20>
    3c78:	6823      	ldr	r3, [r4, #0]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d000      	beq.n	3c80 <_lseek_r+0x20>
    3c7e:	602b      	str	r3, [r5, #0]
    3c80:	bd70      	pop	{r4, r5, r6, pc}
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	200002d4 	.word	0x200002d4

00003c88 <memchr>:
    3c88:	b2c9      	uxtb	r1, r1
    3c8a:	1882      	adds	r2, r0, r2
    3c8c:	4290      	cmp	r0, r2
    3c8e:	d101      	bne.n	3c94 <memchr+0xc>
    3c90:	2000      	movs	r0, #0
    3c92:	4770      	bx	lr
    3c94:	7803      	ldrb	r3, [r0, #0]
    3c96:	428b      	cmp	r3, r1
    3c98:	d0fb      	beq.n	3c92 <memchr+0xa>
    3c9a:	3001      	adds	r0, #1
    3c9c:	e7f6      	b.n	3c8c <memchr+0x4>

00003c9e <memcpy>:
    3c9e:	2300      	movs	r3, #0
    3ca0:	b510      	push	{r4, lr}
    3ca2:	429a      	cmp	r2, r3
    3ca4:	d100      	bne.n	3ca8 <memcpy+0xa>
    3ca6:	bd10      	pop	{r4, pc}
    3ca8:	5ccc      	ldrb	r4, [r1, r3]
    3caa:	54c4      	strb	r4, [r0, r3]
    3cac:	3301      	adds	r3, #1
    3cae:	e7f8      	b.n	3ca2 <memcpy+0x4>

00003cb0 <memmove>:
    3cb0:	b510      	push	{r4, lr}
    3cb2:	4288      	cmp	r0, r1
    3cb4:	d902      	bls.n	3cbc <memmove+0xc>
    3cb6:	188b      	adds	r3, r1, r2
    3cb8:	4298      	cmp	r0, r3
    3cba:	d308      	bcc.n	3cce <memmove+0x1e>
    3cbc:	2300      	movs	r3, #0
    3cbe:	429a      	cmp	r2, r3
    3cc0:	d007      	beq.n	3cd2 <memmove+0x22>
    3cc2:	5ccc      	ldrb	r4, [r1, r3]
    3cc4:	54c4      	strb	r4, [r0, r3]
    3cc6:	3301      	adds	r3, #1
    3cc8:	e7f9      	b.n	3cbe <memmove+0xe>
    3cca:	5c8b      	ldrb	r3, [r1, r2]
    3ccc:	5483      	strb	r3, [r0, r2]
    3cce:	3a01      	subs	r2, #1
    3cd0:	d2fb      	bcs.n	3cca <memmove+0x1a>
    3cd2:	bd10      	pop	{r4, pc}

00003cd4 <__malloc_lock>:
    3cd4:	4770      	bx	lr

00003cd6 <__malloc_unlock>:
    3cd6:	4770      	bx	lr

00003cd8 <_realloc_r>:
    3cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cda:	0007      	movs	r7, r0
    3cdc:	000d      	movs	r5, r1
    3cde:	0016      	movs	r6, r2
    3ce0:	2900      	cmp	r1, #0
    3ce2:	d105      	bne.n	3cf0 <_realloc_r+0x18>
    3ce4:	0011      	movs	r1, r2
    3ce6:	f7ff fa83 	bl	31f0 <_malloc_r>
    3cea:	0004      	movs	r4, r0
    3cec:	0020      	movs	r0, r4
    3cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cf0:	2a00      	cmp	r2, #0
    3cf2:	d103      	bne.n	3cfc <_realloc_r+0x24>
    3cf4:	f7ff fa32 	bl	315c <_free_r>
    3cf8:	0034      	movs	r4, r6
    3cfa:	e7f7      	b.n	3cec <_realloc_r+0x14>
    3cfc:	f000 f826 	bl	3d4c <_malloc_usable_size_r>
    3d00:	002c      	movs	r4, r5
    3d02:	4286      	cmp	r6, r0
    3d04:	d9f2      	bls.n	3cec <_realloc_r+0x14>
    3d06:	0031      	movs	r1, r6
    3d08:	0038      	movs	r0, r7
    3d0a:	f7ff fa71 	bl	31f0 <_malloc_r>
    3d0e:	1e04      	subs	r4, r0, #0
    3d10:	d0ec      	beq.n	3cec <_realloc_r+0x14>
    3d12:	0029      	movs	r1, r5
    3d14:	0032      	movs	r2, r6
    3d16:	f7ff ffc2 	bl	3c9e <memcpy>
    3d1a:	0029      	movs	r1, r5
    3d1c:	0038      	movs	r0, r7
    3d1e:	f7ff fa1d 	bl	315c <_free_r>
    3d22:	e7e3      	b.n	3cec <_realloc_r+0x14>

00003d24 <_read_r>:
    3d24:	b570      	push	{r4, r5, r6, lr}
    3d26:	0005      	movs	r5, r0
    3d28:	0008      	movs	r0, r1
    3d2a:	0011      	movs	r1, r2
    3d2c:	2200      	movs	r2, #0
    3d2e:	4c06      	ldr	r4, [pc, #24]	; (3d48 <_read_r+0x24>)
    3d30:	6022      	str	r2, [r4, #0]
    3d32:	001a      	movs	r2, r3
    3d34:	f7fd fc16 	bl	1564 <_read>
    3d38:	1c43      	adds	r3, r0, #1
    3d3a:	d103      	bne.n	3d44 <_read_r+0x20>
    3d3c:	6823      	ldr	r3, [r4, #0]
    3d3e:	2b00      	cmp	r3, #0
    3d40:	d000      	beq.n	3d44 <_read_r+0x20>
    3d42:	602b      	str	r3, [r5, #0]
    3d44:	bd70      	pop	{r4, r5, r6, pc}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	200002d4 	.word	0x200002d4

00003d4c <_malloc_usable_size_r>:
    3d4c:	1f0b      	subs	r3, r1, #4
    3d4e:	681b      	ldr	r3, [r3, #0]
    3d50:	1f18      	subs	r0, r3, #4
    3d52:	2b00      	cmp	r3, #0
    3d54:	da01      	bge.n	3d5a <_malloc_usable_size_r+0xe>
    3d56:	580b      	ldr	r3, [r1, r0]
    3d58:	18c0      	adds	r0, r0, r3
    3d5a:	4770      	bx	lr
    3d5c:	682f2e2e 	.word	0x682f2e2e
    3d60:	732f6c61 	.word	0x732f6c61
    3d64:	682f6372 	.word	0x682f6372
    3d68:	695f6c61 	.word	0x695f6c61
    3d6c:	00632e6f 	.word	0x00632e6f
    3d70:	682f2e2e 	.word	0x682f2e2e
    3d74:	732f6c61 	.word	0x732f6c61
    3d78:	682f6372 	.word	0x682f6372
    3d7c:	745f6c61 	.word	0x745f6c61
    3d80:	72656d69 	.word	0x72656d69
    3d84:	0000632e 	.word	0x0000632e
    3d88:	682f2e2e 	.word	0x682f2e2e
    3d8c:	732f6c61 	.word	0x732f6c61
    3d90:	682f6372 	.word	0x682f6372
    3d94:	755f6c61 	.word	0x755f6c61
    3d98:	74726173 	.word	0x74726173
    3d9c:	7973615f 	.word	0x7973615f
    3da0:	632e636e 	.word	0x632e636e
    3da4:	00000000 	.word	0x00000000
    3da8:	682f2e2e 	.word	0x682f2e2e
    3dac:	732f6c61 	.word	0x732f6c61
    3db0:	682f6372 	.word	0x682f6372
    3db4:	755f6c61 	.word	0x755f6c61
    3db8:	74726173 	.word	0x74726173
    3dbc:	6e79735f 	.word	0x6e79735f
    3dc0:	00632e63 	.word	0x00632e63
    3dc4:	682f2e2e 	.word	0x682f2e2e
    3dc8:	752f6c61 	.word	0x752f6c61
    3dcc:	736c6974 	.word	0x736c6974
    3dd0:	6372732f 	.word	0x6372732f
    3dd4:	6974752f 	.word	0x6974752f
    3dd8:	6c5f736c 	.word	0x6c5f736c
    3ddc:	2e747369 	.word	0x2e747369
    3de0:	00000063 	.word	0x00000063
    3de4:	682f2e2e 	.word	0x682f2e2e
    3de8:	752f6c61 	.word	0x752f6c61
    3dec:	736c6974 	.word	0x736c6974
    3df0:	6372732f 	.word	0x6372732f
    3df4:	6974752f 	.word	0x6974752f
    3df8:	725f736c 	.word	0x725f736c
    3dfc:	62676e69 	.word	0x62676e69
    3e00:	65666675 	.word	0x65666675
    3e04:	00632e72 	.word	0x00632e72
    3e08:	682f2e2e 	.word	0x682f2e2e
    3e0c:	722f6c70 	.word	0x722f6c70
    3e10:	682f6374 	.word	0x682f6374
    3e14:	725f6c70 	.word	0x725f6c70
    3e18:	632e6374 	.word	0x632e6374
    3e1c:	00000000 	.word	0x00000000

00003e20 <_usarts>:
    3e20:	00000000 40100004 00030000 00008a09     .......@........
    3e30:	00000000 00000001 40100004 00030000     ...........@....
    3e40:	0000ff2e 00000000 00000004 40100004     ...............@
    3e50:	00030000 0000ff2e 00000000              ............

00003e5c <_i2cms>:
	...

00003e74 <_i2css>:
	...

00003e84 <sercomspi_regs>:
	...
    3e98:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3ea8:	65735f6c 6d6f6372 0000632e 00001ca2     l_sercom.c......
    3eb8:	00001c0c 00001c16 00001c20 00001c2a     ........ ...*...
    3ec8:	00001ca2 00001ca2 00001c34 00001c3e     ........4...>...
    3ed8:	00001c48 00001c52 00001ca2 00001ca2     H...R...........
    3ee8:	00001c5c 00001c66 00001c70 00001c7a     \...f...p...z...
    3ef8:	00001ca2 00001ca2 00001c84 00001ca2     ................
    3f08:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f18:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f28:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f38:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f48:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f58:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f68:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f78:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f88:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3f98:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3fa8:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3fb8:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3fc8:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3fd8:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3fe8:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    3ff8:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    4008:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    4018:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    4028:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    4038:	00001ca2 00001ca2 00001ca2 00001ca2     ................
    4048:	00001c8e 00001ca2 00001c98              ............

00004054 <download_cmd>:
    4054:	01020101 01040103 02080207 020a0209     ................
    4064:	040e010d 0110040f 02650313 00000467     ..........e.g...
    4074:	00004e4f 73252e77 00000000 61642e77     ON..w.%s....w.da
    4084:	252e6574 00000064 706d6574 00000000     te.%d...temp....
    4094:	3a796164 74206425 20706d65 756c6176     day:%d temp valu
    40a4:	73692065 0d64253a 0000000a 696d7568     e is:%d.....humi
    40b4:	79746964 00000000 3a796164 68206425     dity....day:%d h
    40c4:	64696d75 20797469 756c6176 73692065     umidity value is
    40d4:	0d64253a 0000000a 35326d70 00000000     :%d.....pm25....
    40e4:	3a796164 70206425 2035326d 756c6176     day:%d pm25 valu
    40f4:	73692065 0d64253a 0000000a 646e6f63     e is:%d.....cond
    4104:	6f697469 0000006e 3a796164 63206425     ition...day:%d c
    4114:	69646e6f 6e6f6974 6c617620 69206575     ondition value i
    4124:	73253a73 00000a0d 00002188 00002190     s:%s.....!...!..
    4134:	00002196 0000219c 000021cc 000021d4     .!...!...!...!..
    4144:	000021dc 0000218c 0000221c 0000218c     .!...!..."...!..
    4154:	0000218c 0000218c 0000218c 0000218c     .!...!...!...!..
    4164:	00002222 0000218c 0000218c 0000218c     ""...!...!...!..
    4174:	0000218c 0000218c 0000218c 0000218c     .!...!...!...!..
    4184:	0000218c 0000218c 0000218c 0000218c     .!...!...!...!..
    4194:	0000218c 0000218c 0000218c 0000218c     .!...!...!...!..
    41a4:	0000218c 0000218c 00002236 0000224a     .!...!..6"..J"..
    41b4:	0000218c 0000218c 0000218c 0000218c     .!...!...!...!..
    41c4:	0000218c 0000218c 0000218c 0000218c     .!...!...!...!..
    41d4:	0000218c 0000226e 0000218c 00002262     .!..n"...!..b"..
    41e4:	2270227b 0000223a 6e656e66 30617a6c     {"p":"..fnenlza0
    41f4:	7466646a 33657a70 00000000 76222c22     jdftpze3....","v
    4204:	00223a22 2e302e31 00000030 6d222c22     ":".1.0.0...","m
    4214:	00003a22 00000032 0000007d              ":..2...}...

00004220 <multipliers_tau_calc>:
    4220:	00130007 00900035                       ....5...

00004228 <gain_setting_int_cap>:
    4228:	050b1c3f 03020103                                ?.....

0000422e <PTC_XY_PINS>:
    422e:	05040302 21200706 25242322 29282726     ...... !"#$%&'()
    423e:	0b0a0908 13121110 17161514 2f2e2d2c     ............,-./
	...

00004250 <_global_impure_ptr>:
    4250:	20000060                                `.. 

00004254 <__sf_fake_stderr>:
	...

00004274 <__sf_fake_stdin>:
	...

00004294 <__sf_fake_stdout>:
	...
    42b4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    42c4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    42d4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    42e4:	00006665                                ef..

000042e8 <_init>:
    42e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42ea:	46c0      	nop			; (mov r8, r8)
    42ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42ee:	bc08      	pop	{r3}
    42f0:	469e      	mov	lr, r3
    42f2:	4770      	bx	lr

000042f4 <__init_array_start>:
    42f4:	000000dd 	.word	0x000000dd

000042f8 <_fini>:
    42f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42fa:	46c0      	nop			; (mov r8, r8)
    42fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    42fe:	bc08      	pop	{r3}
    4300:	469e      	mov	lr, r3
    4302:	4770      	bx	lr

00004304 <__fini_array_start>:
    4304:	000000b5 	.word	0x000000b5
